Search.setIndex({"docnames": ["index", "reference/api", "reference/api/polars.Array", "reference/api/polars.Binary", "reference/api/polars.Boolean", "reference/api/polars.Categorical", "reference/api/polars.Config.activate_decimals", "reference/api/polars.Config.load", "reference/api/polars.Config.load_from_file", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.save_to_file", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_auto_structify", "reference/api/polars.Config.set_decimal_separator", "reference/api/polars.Config.set_float_precision", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_fmt_table_cell_list_len", "reference/api/polars.Config.set_streaming_chunk_size", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cell_numeric_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_thousands_separator", "reference/api/polars.Config.set_trim_decimal_zeros", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_database", "reference/api/polars.DataFrame.write_delta", "reference/api/polars.DataFrame.write_excel", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_ipc_stream", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.DataType", "reference/api/polars.Date", "reference/api/polars.Datetime", "reference/api/polars.Decimal", "reference/api/polars.Duration", "reference/api/polars.Enum", "reference/api/polars.Float32", "reference/api/polars.Float64", "reference/api/polars.Int16", "reference/api/polars.Int32", "reference/api/polars.Int64", "reference/api/polars.Int8", "reference/api/polars.LazyFrame.sink_csv", "reference/api/polars.LazyFrame.sink_ipc", "reference/api/polars.LazyFrame.sink_parquet", "reference/api/polars.List", "reference/api/polars.Null", "reference/api/polars.Object", "reference/api/polars.SQLContext.execute", "reference/api/polars.SQLContext.register", "reference/api/polars.SQLContext.register_globals", "reference/api/polars.SQLContext.register_many", "reference/api/polars.SQLContext.tables", "reference/api/polars.SQLContext.unregister", "reference/api/polars.StringCache", "reference/api/polars.Struct", "reference/api/polars.Time", "reference/api/polars.UInt16", "reference/api/polars.UInt32", "reference/api/polars.UInt64", "reference/api/polars.UInt8", "reference/api/polars.Unknown", "reference/api/polars.Utf8", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.collect_all_async", "reference/api/polars.concat", "reference/api/polars.disable_string_cache", "reference/api/polars.enable_string_cache", "reference/api/polars.exceptions.ArrowError", "reference/api/polars.exceptions.ColumnNotFoundError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturnedError", "reference/api/polars.exceptions.PolarsPanicError", "reference/api/polars.exceptions.RowsError", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.SchemaFieldNotFoundError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.StructFieldNotFoundError", "reference/api/polars.exceptions.TooManyRowsReturnedError", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.from_repr", "reference/api/polars.get_index_type", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "reference/api/polars.read_avro", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_database", "reference/api/polars.read_database_uri", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_ipc_stream", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_ods", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_iceberg", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.scan_pyarrow_dataset", "reference/api/polars.set_random_seed", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_frame_not_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.assert_series_not_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.create_list_strategy", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.load_profile", "reference/api/polars.testing.parametric.series", "reference/api/polars.testing.parametric.set_profile", "reference/api/polars.threadpool_size", "reference/api/polars.using_string_cache", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.apply", "reference/dataframe/api/polars.DataFrame.approx_n_unique", "reference/dataframe/api/polars.DataFrame.bottom_k", "reference/dataframe/api/polars.DataFrame.cast", "reference/dataframe/api/polars.DataFrame.clear", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.corr", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.equals", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.find_idx_by_name", "reference/dataframe/api/polars.DataFrame.flags", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.frame_equal", "reference/dataframe/api/polars.DataFrame.gather_every", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_column_index", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.group_by", "reference/dataframe/api/polars.DataFrame.group_by_dynamic", "reference/dataframe/api/polars.DataFrame.group_by_rolling", "reference/dataframe/api/polars.DataFrame.groupby", "reference/dataframe/api/polars.DataFrame.groupby_dynamic", "reference/dataframe/api/polars.DataFrame.groupby_rolling", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_at_idx", "reference/dataframe/api/polars.DataFrame.insert_column", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_columns", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.map_rows", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.max_horizontal", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.mean_horizontal", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.min_horizontal", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace", "reference/dataframe/api/polars.DataFrame.replace_at_idx", "reference/dataframe/api/polars.DataFrame.replace_column", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.rolling", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.rows_by_key", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.select_seq", "reference/dataframe/api/polars.DataFrame.set_sorted", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shift_and_fill", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.sum_horizontal", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.take_every", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_init_repr", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.top_k", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.update", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_columns_seq", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.apply", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/group_by", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.add", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.and_", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.apply", "reference/expressions/api/polars.Expr.approx_n_unique", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_true", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.to_list", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.bottom_k", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.get_categories", "reference/expressions/api/polars.Expr.cat.set_ordering", "reference/expressions/api/polars.Expr.cbrt", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.clip_max", "reference/expressions/api/polars.Expr.clip_min", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.cot", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cum_count", "reference/expressions/api/polars.Expr.cum_max", "reference/expressions/api/polars.Expr.cum_min", "reference/expressions/api/polars.Expr.cum_prod", "reference/expressions/api/polars.Expr.cum_sum", "reference/expressions/api/polars.Expr.cumcount", "reference/expressions/api/polars.Expr.cummax", "reference/expressions/api/polars.Expr.cummin", "reference/expressions/api/polars.Expr.cumprod", "reference/expressions/api/polars.Expr.cumsum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.cut", "reference/expressions/api/polars.Expr.degrees", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.base_utc_offset", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.convert_time_zone", "reference/expressions/api/polars.Expr.dt.date", "reference/expressions/api/polars.Expr.dt.datetime", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.days", "reference/expressions/api/polars.Expr.dt.dst_offset", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.hours", "reference/expressions/api/polars.Expr.dt.is_leap_year", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.microseconds", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.milliseconds", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.minutes", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.month_end", "reference/expressions/api/polars.Expr.dt.month_start", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.nanoseconds", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.replace_time_zone", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.seconds", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.time", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.to_string", "reference/expressions/api/polars.Expr.dt.total_days", "reference/expressions/api/polars.Expr.dt.total_hours", "reference/expressions/api/polars.Expr.dt.total_microseconds", "reference/expressions/api/polars.Expr.dt.total_milliseconds", "reference/expressions/api/polars.Expr.dt.total_minutes", "reference/expressions/api/polars.Expr.dt.total_nanoseconds", "reference/expressions/api/polars.Expr.dt.total_seconds", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.eq", "reference/expressions/api/polars.Expr.eq_missing", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.floordiv", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.from_json", "reference/expressions/api/polars.Expr.gather", "reference/expressions/api/polars.Expr.gather_every", "reference/expressions/api/polars.Expr.ge", "reference/expressions/api/polars.Expr.get", "reference/expressions/api/polars.Expr.gt", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.hist", "reference/expressions/api/polars.Expr.implode", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first", "reference/expressions/api/polars.Expr.is_first_distinct", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_last", "reference/expressions/api/polars.Expr.is_last_distinct", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.keep_name", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.le", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.list.all", "reference/expressions/api/polars.Expr.list.any", "reference/expressions/api/polars.Expr.list.arg_max", "reference/expressions/api/polars.Expr.list.arg_min", "reference/expressions/api/polars.Expr.list.concat", "reference/expressions/api/polars.Expr.list.contains", "reference/expressions/api/polars.Expr.list.count_match", "reference/expressions/api/polars.Expr.list.count_matches", "reference/expressions/api/polars.Expr.list.diff", "reference/expressions/api/polars.Expr.list.drop_nulls", "reference/expressions/api/polars.Expr.list.eval", "reference/expressions/api/polars.Expr.list.explode", "reference/expressions/api/polars.Expr.list.first", "reference/expressions/api/polars.Expr.list.gather", "reference/expressions/api/polars.Expr.list.get", "reference/expressions/api/polars.Expr.list.head", "reference/expressions/api/polars.Expr.list.join", "reference/expressions/api/polars.Expr.list.last", "reference/expressions/api/polars.Expr.list.len", "reference/expressions/api/polars.Expr.list.lengths", "reference/expressions/api/polars.Expr.list.max", "reference/expressions/api/polars.Expr.list.mean", "reference/expressions/api/polars.Expr.list.min", "reference/expressions/api/polars.Expr.list.reverse", "reference/expressions/api/polars.Expr.list.sample", "reference/expressions/api/polars.Expr.list.set_difference", "reference/expressions/api/polars.Expr.list.set_intersection", "reference/expressions/api/polars.Expr.list.set_symmetric_difference", "reference/expressions/api/polars.Expr.list.set_union", "reference/expressions/api/polars.Expr.list.shift", "reference/expressions/api/polars.Expr.list.slice", "reference/expressions/api/polars.Expr.list.sort", "reference/expressions/api/polars.Expr.list.sum", "reference/expressions/api/polars.Expr.list.tail", "reference/expressions/api/polars.Expr.list.take", "reference/expressions/api/polars.Expr.list.to_array", "reference/expressions/api/polars.Expr.list.to_struct", "reference/expressions/api/polars.Expr.list.unique", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.log1p", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.lt", "reference/expressions/api/polars.Expr.map", "reference/expressions/api/polars.Expr.map_alias", "reference/expressions/api/polars.Expr.map_batches", "reference/expressions/api/polars.Expr.map_dict", "reference/expressions/api/polars.Expr.map_elements", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.eq", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.ne", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.tree_format", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.meta.write_json", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mod", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.mul", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.name.keep", "reference/expressions/api/polars.Expr.name.map", "reference/expressions/api/polars.Expr.name.prefix", "reference/expressions/api/polars.Expr.name.suffix", "reference/expressions/api/polars.Expr.name.to_lowercase", "reference/expressions/api/polars.Expr.name.to_uppercase", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.ne", "reference/expressions/api/polars.Expr.ne_missing", "reference/expressions/api/polars.Expr.not_", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.or_", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.peak_max", "reference/expressions/api/polars.Expr.peak_min", "reference/expressions/api/polars.Expr.pipe", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.prefix", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.qcut", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.radians", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.replace", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rle", "reference/expressions/api/polars.Expr.rle_id", "reference/expressions/api/polars.Expr.rolling", "reference/expressions/api/polars.Expr.rolling_apply", "reference/expressions/api/polars.Expr.rolling_map", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.round_sig_figs", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shift_and_fill", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.contains_any", "reference/expressions/api/polars.Expr.str.count_match", "reference/expressions/api/polars.Expr.str.count_matches", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.extract_groups", "reference/expressions/api/polars.Expr.str.json_decode", "reference/expressions/api/polars.Expr.str.json_extract", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.len_bytes", "reference/expressions/api/polars.Expr.str.len_chars", "reference/expressions/api/polars.Expr.str.lengths", "reference/expressions/api/polars.Expr.str.ljust", "reference/expressions/api/polars.Expr.str.lstrip", "reference/expressions/api/polars.Expr.str.n_chars", "reference/expressions/api/polars.Expr.str.pad_end", "reference/expressions/api/polars.Expr.str.pad_start", "reference/expressions/api/polars.Expr.str.parse_int", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.replace_many", "reference/expressions/api/polars.Expr.str.reverse", "reference/expressions/api/polars.Expr.str.rjust", "reference/expressions/api/polars.Expr.str.rstrip", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip", "reference/expressions/api/polars.Expr.str.strip_chars", "reference/expressions/api/polars.Expr.str.strip_chars_end", "reference/expressions/api/polars.Expr.str.strip_chars_start", "reference/expressions/api/polars.Expr.str.strip_prefix", "reference/expressions/api/polars.Expr.str.strip_suffix", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.to_date", "reference/expressions/api/polars.Expr.str.to_datetime", "reference/expressions/api/polars.Expr.str.to_decimal", "reference/expressions/api/polars.Expr.str.to_integer", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_time", "reference/expressions/api/polars.Expr.str.to_titlecase", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.json_encode", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.sub", "reference/expressions/api/polars.Expr.suffix", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.take", "reference/expressions/api/polars.Expr.take_every", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.truediv", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.Expr.xor", "reference/expressions/api/polars.all", "reference/expressions/api/polars.all_horizontal", "reference/expressions/api/polars.any", "reference/expressions/api/polars.any_horizontal", "reference/expressions/api/polars.apply", "reference/expressions/api/polars.approx_n_unique", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.arctan2", "reference/expressions/api/polars.arctan2d", "reference/expressions/api/polars.arg_sort_by", "reference/expressions/api/polars.arg_where", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.corr", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cum_fold", "reference/expressions/api/polars.cum_reduce", "reference/expressions/api/polars.cum_sum", "reference/expressions/api/polars.cum_sum_horizontal", "reference/expressions/api/polars.cumfold", "reference/expressions/api/polars.cumreduce", "reference/expressions/api/polars.cumsum", "reference/expressions/api/polars.cumsum_horizontal", "reference/expressions/api/polars.date", "reference/expressions/api/polars.date_range", "reference/expressions/api/polars.date_ranges", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.datetime_range", "reference/expressions/api/polars.datetime_ranges", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.implode", "reference/expressions/api/polars.int_range", "reference/expressions/api/polars.int_ranges", "reference/expressions/api/polars.last", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map", "reference/expressions/api/polars.map_batches", "reference/expressions/api/polars.map_groups", "reference/expressions/api/polars.max", "reference/expressions/api/polars.max_horizontal", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.min_horizontal", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.ones", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.rolling_corr", "reference/expressions/api/polars.rolling_cov", "reference/expressions/api/polars.select", "reference/expressions/api/polars.sql_expr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.sum_horizontal", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.time", "reference/expressions/api/polars.time_range", "reference/expressions/api/polars.time_ranges", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/api/polars.zeros", "reference/expressions/array", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/col", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/list", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/name", "reference/expressions/operators", "reference/expressions/string", "reference/expressions/struct", "reference/expressions/temporal", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique", "reference/lazyframe/api/polars.LazyFrame.bottom_k", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.cast", "reference/lazyframe/api/polars.LazyFrame.clear", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.collect_async", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.deserialize", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explain", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fetch", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.gather_every", "reference/lazyframe/api/polars.LazyFrame.group_by", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic", "reference/lazyframe/api/polars.LazyFrame.group_by_rolling", "reference/lazyframe/api/polars.LazyFrame.groupby", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map", "reference/lazyframe/api/polars.LazyFrame.map_batches", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.null_count", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.rolling", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.select_seq", "reference/lazyframe/api/polars.LazyFrame.serialize", "reference/lazyframe/api/polars.LazyFrame.set_sorted", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.take_every", "reference/lazyframe/api/polars.LazyFrame.top_k", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.update", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.apply", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/group_by", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/selectors", "reference/series/aggregation", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.apply", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.to_list", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.bottom_k", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat", "reference/series/api/polars.Series.cat.get_categories", "reference/series/api/polars.Series.cat.is_local", "reference/series/api/polars.Series.cat.set_ordering", "reference/series/api/polars.Series.cat.to_local", "reference/series/api/polars.Series.cat.uses_lexical_ordering", "reference/series/api/polars.Series.cbrt", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.clear", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clip_max", "reference/series/api/polars.Series.clip_min", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cot", "reference/series/api/polars.Series.cum_max", "reference/series/api/polars.Series.cum_min", "reference/series/api/polars.Series.cum_prod", "reference/series/api/polars.Series.cum_sum", "reference/series/api/polars.Series.cummax", "reference/series/api/polars.Series.cummin", "reference/series/api/polars.Series.cumprod", "reference/series/api/polars.Series.cumsum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.cut", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt", "reference/series/api/polars.Series.dt.base_utc_offset", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.convert_time_zone", "reference/series/api/polars.Series.dt.date", "reference/series/api/polars.Series.dt.datetime", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.days", "reference/series/api/polars.Series.dt.dst_offset", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.hours", "reference/series/api/polars.Series.dt.is_leap_year", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.microseconds", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.milliseconds", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.minutes", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.month_end", "reference/series/api/polars.Series.dt.month_start", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.nanoseconds", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.replace_time_zone", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.seconds", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.time", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.to_string", "reference/series/api/polars.Series.dt.total_days", "reference/series/api/polars.Series.dt.total_hours", "reference/series/api/polars.Series.dt.total_microseconds", "reference/series/api/polars.Series.dt.total_milliseconds", "reference/series/api/polars.Series.dt.total_minutes", "reference/series/api/polars.Series.dt.total_nanoseconds", "reference/series/api/polars.Series.dt.total_seconds", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.equals", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.gather", "reference/series/api/polars.Series.gather_every", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.hist", "reference/series/api/polars.Series.implode", "reference/series/api/polars.Series.inner_dtype", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.is_between", "reference/series/api/polars.Series.is_boolean", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first", "reference/series/api/polars.Series.is_first_distinct", "reference/series/api/polars.Series.is_float", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_integer", "reference/series/api/polars.Series.is_last", "reference/series/api/polars.Series.is_last_distinct", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_numeric", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_temporal", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.is_utf8", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.list", "reference/series/api/polars.Series.list.all", "reference/series/api/polars.Series.list.any", "reference/series/api/polars.Series.list.arg_max", "reference/series/api/polars.Series.list.arg_min", "reference/series/api/polars.Series.list.concat", "reference/series/api/polars.Series.list.contains", "reference/series/api/polars.Series.list.count_match", "reference/series/api/polars.Series.list.count_matches", "reference/series/api/polars.Series.list.diff", "reference/series/api/polars.Series.list.drop_nulls", "reference/series/api/polars.Series.list.eval", "reference/series/api/polars.Series.list.explode", "reference/series/api/polars.Series.list.first", "reference/series/api/polars.Series.list.gather", "reference/series/api/polars.Series.list.get", "reference/series/api/polars.Series.list.head", "reference/series/api/polars.Series.list.join", "reference/series/api/polars.Series.list.last", "reference/series/api/polars.Series.list.len", "reference/series/api/polars.Series.list.lengths", "reference/series/api/polars.Series.list.max", "reference/series/api/polars.Series.list.mean", "reference/series/api/polars.Series.list.min", "reference/series/api/polars.Series.list.reverse", "reference/series/api/polars.Series.list.sample", "reference/series/api/polars.Series.list.set_difference", "reference/series/api/polars.Series.list.set_intersection", "reference/series/api/polars.Series.list.set_symmetric_difference", "reference/series/api/polars.Series.list.set_union", "reference/series/api/polars.Series.list.shift", "reference/series/api/polars.Series.list.slice", "reference/series/api/polars.Series.list.sort", "reference/series/api/polars.Series.list.sum", "reference/series/api/polars.Series.list.tail", "reference/series/api/polars.Series.list.take", "reference/series/api/polars.Series.list.to_array", "reference/series/api/polars.Series.list.to_struct", "reference/series/api/polars.Series.list.unique", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.log1p", "reference/series/api/polars.Series.lower_bound", "reference/series/api/polars.Series.map_dict", "reference/series/api/polars.Series.map_elements", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.not_", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.qcut", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.replace", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rle", "reference/series/api/polars.Series.rle_id", "reference/series/api/polars.Series.rolling_apply", "reference/series/api/polars.Series.rolling_map", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.round_sig_figs", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.scatter", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.series_equal", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_at_idx", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shift_and_fill", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.contains_any", "reference/series/api/polars.Series.str.count_match", "reference/series/api/polars.Series.str.count_matches", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.extract_groups", "reference/series/api/polars.Series.str.json_decode", "reference/series/api/polars.Series.str.json_extract", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.len_bytes", "reference/series/api/polars.Series.str.len_chars", "reference/series/api/polars.Series.str.lengths", "reference/series/api/polars.Series.str.ljust", "reference/series/api/polars.Series.str.lstrip", "reference/series/api/polars.Series.str.n_chars", "reference/series/api/polars.Series.str.pad_end", "reference/series/api/polars.Series.str.pad_start", "reference/series/api/polars.Series.str.parse_int", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.replace_many", "reference/series/api/polars.Series.str.reverse", "reference/series/api/polars.Series.str.rjust", "reference/series/api/polars.Series.str.rstrip", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip", "reference/series/api/polars.Series.str.strip_chars", "reference/series/api/polars.Series.str.strip_chars_end", "reference/series/api/polars.Series.str.strip_chars_start", "reference/series/api/polars.Series.str.strip_prefix", "reference/series/api/polars.Series.str.strip_suffix", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.to_date", "reference/series/api/polars.Series.str.to_datetime", "reference/series/api/polars.Series.str.to_decimal", "reference/series/api/polars.Series.str.to_integer", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_time", "reference/series/api/polars.Series.str.to_titlecase", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.json_encode", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.schema", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.take", "reference/series/api/polars.Series.take_every", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_init_repr", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.upper_bound", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.view", "reference/series/api/polars.Series.zip_with", "reference/series/array", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/list", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/string", "reference/series/struct", "reference/series/temporal", "reference/sql", "reference/testing", "reference/utils"], "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Array.rst", "reference/api/polars.Binary.rst", "reference/api/polars.Boolean.rst", "reference/api/polars.Categorical.rst", "reference/api/polars.Config.activate_decimals.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.load_from_file.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.save_to_file.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_auto_structify.rst", "reference/api/polars.Config.set_decimal_separator.rst", "reference/api/polars.Config.set_float_precision.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_fmt_table_cell_list_len.rst", "reference/api/polars.Config.set_streaming_chunk_size.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cell_numeric_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_thousands_separator.rst", "reference/api/polars.Config.set_trim_decimal_zeros.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_database.rst", "reference/api/polars.DataFrame.write_delta.rst", "reference/api/polars.DataFrame.write_excel.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_ipc_stream.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.DataType.rst", "reference/api/polars.Date.rst", "reference/api/polars.Datetime.rst", "reference/api/polars.Decimal.rst", "reference/api/polars.Duration.rst", "reference/api/polars.Enum.rst", "reference/api/polars.Float32.rst", "reference/api/polars.Float64.rst", "reference/api/polars.Int16.rst", "reference/api/polars.Int32.rst", "reference/api/polars.Int64.rst", "reference/api/polars.Int8.rst", "reference/api/polars.LazyFrame.sink_csv.rst", "reference/api/polars.LazyFrame.sink_ipc.rst", "reference/api/polars.LazyFrame.sink_parquet.rst", "reference/api/polars.List.rst", "reference/api/polars.Null.rst", "reference/api/polars.Object.rst", "reference/api/polars.SQLContext.execute.rst", "reference/api/polars.SQLContext.register.rst", "reference/api/polars.SQLContext.register_globals.rst", "reference/api/polars.SQLContext.register_many.rst", "reference/api/polars.SQLContext.tables.rst", "reference/api/polars.SQLContext.unregister.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.Struct.rst", "reference/api/polars.Time.rst", "reference/api/polars.UInt16.rst", "reference/api/polars.UInt32.rst", "reference/api/polars.UInt64.rst", "reference/api/polars.UInt8.rst", "reference/api/polars.Unknown.rst", "reference/api/polars.Utf8.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.collect_all_async.rst", "reference/api/polars.concat.rst", "reference/api/polars.disable_string_cache.rst", "reference/api/polars.enable_string_cache.rst", "reference/api/polars.exceptions.ArrowError.rst", "reference/api/polars.exceptions.ColumnNotFoundError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturnedError.rst", "reference/api/polars.exceptions.PolarsPanicError.rst", "reference/api/polars.exceptions.RowsError.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.SchemaFieldNotFoundError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.StructFieldNotFoundError.rst", "reference/api/polars.exceptions.TooManyRowsReturnedError.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.from_repr.rst", "reference/api/polars.get_index_type.rst", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_database.rst", "reference/api/polars.read_database_uri.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_ipc_stream.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_ods.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_iceberg.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.scan_pyarrow_dataset.rst", "reference/api/polars.set_random_seed.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_frame_not_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.assert_series_not_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.create_list_strategy.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.load_profile.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.testing.parametric.set_profile.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.using_string_cache.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.apply.rst", "reference/dataframe/api/polars.DataFrame.approx_n_unique.rst", "reference/dataframe/api/polars.DataFrame.bottom_k.rst", "reference/dataframe/api/polars.DataFrame.cast.rst", "reference/dataframe/api/polars.DataFrame.clear.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.corr.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.equals.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.find_idx_by_name.rst", "reference/dataframe/api/polars.DataFrame.flags.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.frame_equal.rst", "reference/dataframe/api/polars.DataFrame.gather_every.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_column_index.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.group_by.rst", "reference/dataframe/api/polars.DataFrame.group_by_dynamic.rst", "reference/dataframe/api/polars.DataFrame.group_by_rolling.rst", "reference/dataframe/api/polars.DataFrame.groupby.rst", "reference/dataframe/api/polars.DataFrame.groupby_dynamic.rst", "reference/dataframe/api/polars.DataFrame.groupby_rolling.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_at_idx.rst", "reference/dataframe/api/polars.DataFrame.insert_column.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_columns.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.map_rows.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.max_horizontal.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.mean_horizontal.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.min_horizontal.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace.rst", "reference/dataframe/api/polars.DataFrame.replace_at_idx.rst", "reference/dataframe/api/polars.DataFrame.replace_column.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.rolling.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.rows_by_key.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.select_seq.rst", "reference/dataframe/api/polars.DataFrame.set_sorted.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shift_and_fill.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.sum_horizontal.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.take_every.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_init_repr.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.top_k.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.update.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_columns_seq.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.apply.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/group_by.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.add.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.and_.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.apply.rst", "reference/expressions/api/polars.Expr.approx_n_unique.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_true.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.to_list.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.bottom_k.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.get_categories.rst", "reference/expressions/api/polars.Expr.cat.set_ordering.rst", "reference/expressions/api/polars.Expr.cbrt.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.clip_max.rst", "reference/expressions/api/polars.Expr.clip_min.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.cot.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cum_count.rst", "reference/expressions/api/polars.Expr.cum_max.rst", "reference/expressions/api/polars.Expr.cum_min.rst", "reference/expressions/api/polars.Expr.cum_prod.rst", "reference/expressions/api/polars.Expr.cum_sum.rst", "reference/expressions/api/polars.Expr.cumcount.rst", "reference/expressions/api/polars.Expr.cummax.rst", "reference/expressions/api/polars.Expr.cummin.rst", "reference/expressions/api/polars.Expr.cumprod.rst", "reference/expressions/api/polars.Expr.cumsum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.cut.rst", "reference/expressions/api/polars.Expr.degrees.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.base_utc_offset.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.convert_time_zone.rst", "reference/expressions/api/polars.Expr.dt.date.rst", "reference/expressions/api/polars.Expr.dt.datetime.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.days.rst", "reference/expressions/api/polars.Expr.dt.dst_offset.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.hours.rst", "reference/expressions/api/polars.Expr.dt.is_leap_year.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.microseconds.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.milliseconds.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.minutes.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.month_end.rst", "reference/expressions/api/polars.Expr.dt.month_start.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.replace_time_zone.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.seconds.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.time.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.to_string.rst", "reference/expressions/api/polars.Expr.dt.total_days.rst", "reference/expressions/api/polars.Expr.dt.total_hours.rst", "reference/expressions/api/polars.Expr.dt.total_microseconds.rst", "reference/expressions/api/polars.Expr.dt.total_milliseconds.rst", "reference/expressions/api/polars.Expr.dt.total_minutes.rst", "reference/expressions/api/polars.Expr.dt.total_nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.total_seconds.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.eq.rst", "reference/expressions/api/polars.Expr.eq_missing.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.floordiv.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.from_json.rst", "reference/expressions/api/polars.Expr.gather.rst", "reference/expressions/api/polars.Expr.gather_every.rst", "reference/expressions/api/polars.Expr.ge.rst", "reference/expressions/api/polars.Expr.get.rst", "reference/expressions/api/polars.Expr.gt.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.hist.rst", "reference/expressions/api/polars.Expr.implode.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first.rst", "reference/expressions/api/polars.Expr.is_first_distinct.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_last.rst", "reference/expressions/api/polars.Expr.is_last_distinct.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.keep_name.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.le.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.list.all.rst", "reference/expressions/api/polars.Expr.list.any.rst", "reference/expressions/api/polars.Expr.list.arg_max.rst", "reference/expressions/api/polars.Expr.list.arg_min.rst", "reference/expressions/api/polars.Expr.list.concat.rst", "reference/expressions/api/polars.Expr.list.contains.rst", "reference/expressions/api/polars.Expr.list.count_match.rst", "reference/expressions/api/polars.Expr.list.count_matches.rst", "reference/expressions/api/polars.Expr.list.diff.rst", "reference/expressions/api/polars.Expr.list.drop_nulls.rst", "reference/expressions/api/polars.Expr.list.eval.rst", "reference/expressions/api/polars.Expr.list.explode.rst", "reference/expressions/api/polars.Expr.list.first.rst", "reference/expressions/api/polars.Expr.list.gather.rst", "reference/expressions/api/polars.Expr.list.get.rst", "reference/expressions/api/polars.Expr.list.head.rst", "reference/expressions/api/polars.Expr.list.join.rst", "reference/expressions/api/polars.Expr.list.last.rst", "reference/expressions/api/polars.Expr.list.len.rst", "reference/expressions/api/polars.Expr.list.lengths.rst", "reference/expressions/api/polars.Expr.list.max.rst", "reference/expressions/api/polars.Expr.list.mean.rst", "reference/expressions/api/polars.Expr.list.min.rst", "reference/expressions/api/polars.Expr.list.reverse.rst", "reference/expressions/api/polars.Expr.list.sample.rst", "reference/expressions/api/polars.Expr.list.set_difference.rst", "reference/expressions/api/polars.Expr.list.set_intersection.rst", "reference/expressions/api/polars.Expr.list.set_symmetric_difference.rst", "reference/expressions/api/polars.Expr.list.set_union.rst", "reference/expressions/api/polars.Expr.list.shift.rst", "reference/expressions/api/polars.Expr.list.slice.rst", "reference/expressions/api/polars.Expr.list.sort.rst", "reference/expressions/api/polars.Expr.list.sum.rst", "reference/expressions/api/polars.Expr.list.tail.rst", "reference/expressions/api/polars.Expr.list.take.rst", "reference/expressions/api/polars.Expr.list.to_array.rst", "reference/expressions/api/polars.Expr.list.to_struct.rst", "reference/expressions/api/polars.Expr.list.unique.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.log1p.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.lt.rst", "reference/expressions/api/polars.Expr.map.rst", "reference/expressions/api/polars.Expr.map_alias.rst", "reference/expressions/api/polars.Expr.map_batches.rst", "reference/expressions/api/polars.Expr.map_dict.rst", "reference/expressions/api/polars.Expr.map_elements.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.eq.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.ne.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.tree_format.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.meta.write_json.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mod.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.mul.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.name.keep.rst", "reference/expressions/api/polars.Expr.name.map.rst", "reference/expressions/api/polars.Expr.name.prefix.rst", "reference/expressions/api/polars.Expr.name.suffix.rst", "reference/expressions/api/polars.Expr.name.to_lowercase.rst", "reference/expressions/api/polars.Expr.name.to_uppercase.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.ne.rst", "reference/expressions/api/polars.Expr.ne_missing.rst", "reference/expressions/api/polars.Expr.not_.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.or_.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.peak_max.rst", "reference/expressions/api/polars.Expr.peak_min.rst", "reference/expressions/api/polars.Expr.pipe.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.prefix.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.qcut.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.radians.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.replace.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rle.rst", "reference/expressions/api/polars.Expr.rle_id.rst", "reference/expressions/api/polars.Expr.rolling.rst", "reference/expressions/api/polars.Expr.rolling_apply.rst", "reference/expressions/api/polars.Expr.rolling_map.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.round_sig_figs.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shift_and_fill.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.contains_any.rst", "reference/expressions/api/polars.Expr.str.count_match.rst", "reference/expressions/api/polars.Expr.str.count_matches.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.extract_groups.rst", "reference/expressions/api/polars.Expr.str.json_decode.rst", "reference/expressions/api/polars.Expr.str.json_extract.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.len_bytes.rst", "reference/expressions/api/polars.Expr.str.len_chars.rst", "reference/expressions/api/polars.Expr.str.lengths.rst", "reference/expressions/api/polars.Expr.str.ljust.rst", "reference/expressions/api/polars.Expr.str.lstrip.rst", "reference/expressions/api/polars.Expr.str.n_chars.rst", "reference/expressions/api/polars.Expr.str.pad_end.rst", "reference/expressions/api/polars.Expr.str.pad_start.rst", "reference/expressions/api/polars.Expr.str.parse_int.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.replace_many.rst", "reference/expressions/api/polars.Expr.str.reverse.rst", "reference/expressions/api/polars.Expr.str.rjust.rst", "reference/expressions/api/polars.Expr.str.rstrip.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip.rst", "reference/expressions/api/polars.Expr.str.strip_chars.rst", "reference/expressions/api/polars.Expr.str.strip_chars_end.rst", "reference/expressions/api/polars.Expr.str.strip_chars_start.rst", "reference/expressions/api/polars.Expr.str.strip_prefix.rst", "reference/expressions/api/polars.Expr.str.strip_suffix.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.to_date.rst", "reference/expressions/api/polars.Expr.str.to_datetime.rst", "reference/expressions/api/polars.Expr.str.to_decimal.rst", "reference/expressions/api/polars.Expr.str.to_integer.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_time.rst", "reference/expressions/api/polars.Expr.str.to_titlecase.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.json_encode.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.sub.rst", "reference/expressions/api/polars.Expr.suffix.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.take.rst", "reference/expressions/api/polars.Expr.take_every.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.truediv.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.Expr.xor.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.all_horizontal.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.any_horizontal.rst", "reference/expressions/api/polars.apply.rst", "reference/expressions/api/polars.approx_n_unique.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.arctan2.rst", "reference/expressions/api/polars.arctan2d.rst", "reference/expressions/api/polars.arg_sort_by.rst", "reference/expressions/api/polars.arg_where.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.corr.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cum_fold.rst", "reference/expressions/api/polars.cum_reduce.rst", "reference/expressions/api/polars.cum_sum.rst", "reference/expressions/api/polars.cum_sum_horizontal.rst", "reference/expressions/api/polars.cumfold.rst", "reference/expressions/api/polars.cumreduce.rst", "reference/expressions/api/polars.cumsum.rst", "reference/expressions/api/polars.cumsum_horizontal.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.date_range.rst", "reference/expressions/api/polars.date_ranges.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.datetime_range.rst", "reference/expressions/api/polars.datetime_ranges.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.implode.rst", "reference/expressions/api/polars.int_range.rst", "reference/expressions/api/polars.int_ranges.rst", "reference/expressions/api/polars.last.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map.rst", "reference/expressions/api/polars.map_batches.rst", "reference/expressions/api/polars.map_groups.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.max_horizontal.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.min_horizontal.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.ones.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.rolling_corr.rst", "reference/expressions/api/polars.rolling_cov.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.sql_expr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.sum_horizontal.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.time.rst", "reference/expressions/api/polars.time_range.rst", "reference/expressions/api/polars.time_ranges.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/api/polars.zeros.rst", "reference/expressions/array.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/col.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/list.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/name.rst", "reference/expressions/operators.rst", "reference/expressions/string.rst", "reference/expressions/struct.rst", "reference/expressions/temporal.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique.rst", "reference/lazyframe/api/polars.LazyFrame.bottom_k.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.cast.rst", "reference/lazyframe/api/polars.LazyFrame.clear.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.collect_async.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.deserialize.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explain.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fetch.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.gather_every.rst", "reference/lazyframe/api/polars.LazyFrame.group_by.rst", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.group_by_rolling.rst", "reference/lazyframe/api/polars.LazyFrame.groupby.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map.rst", "reference/lazyframe/api/polars.LazyFrame.map_batches.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.null_count.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.rolling.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.select_seq.rst", "reference/lazyframe/api/polars.LazyFrame.serialize.rst", "reference/lazyframe/api/polars.LazyFrame.set_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.take_every.rst", "reference/lazyframe/api/polars.LazyFrame.top_k.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.update.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.apply.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/group_by.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/selectors.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.apply.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.to_list.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.bottom_k.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.rst", "reference/series/api/polars.Series.cat.get_categories.rst", "reference/series/api/polars.Series.cat.is_local.rst", "reference/series/api/polars.Series.cat.set_ordering.rst", "reference/series/api/polars.Series.cat.to_local.rst", "reference/series/api/polars.Series.cat.uses_lexical_ordering.rst", "reference/series/api/polars.Series.cbrt.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.clear.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clip_max.rst", "reference/series/api/polars.Series.clip_min.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cot.rst", "reference/series/api/polars.Series.cum_max.rst", "reference/series/api/polars.Series.cum_min.rst", "reference/series/api/polars.Series.cum_prod.rst", "reference/series/api/polars.Series.cum_sum.rst", "reference/series/api/polars.Series.cummax.rst", "reference/series/api/polars.Series.cummin.rst", "reference/series/api/polars.Series.cumprod.rst", "reference/series/api/polars.Series.cumsum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.cut.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.rst", "reference/series/api/polars.Series.dt.base_utc_offset.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.convert_time_zone.rst", "reference/series/api/polars.Series.dt.date.rst", "reference/series/api/polars.Series.dt.datetime.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.days.rst", "reference/series/api/polars.Series.dt.dst_offset.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.hours.rst", "reference/series/api/polars.Series.dt.is_leap_year.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.microseconds.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.milliseconds.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.minutes.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.month_end.rst", "reference/series/api/polars.Series.dt.month_start.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.nanoseconds.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.replace_time_zone.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.seconds.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.time.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.to_string.rst", "reference/series/api/polars.Series.dt.total_days.rst", "reference/series/api/polars.Series.dt.total_hours.rst", "reference/series/api/polars.Series.dt.total_microseconds.rst", "reference/series/api/polars.Series.dt.total_milliseconds.rst", "reference/series/api/polars.Series.dt.total_minutes.rst", "reference/series/api/polars.Series.dt.total_nanoseconds.rst", "reference/series/api/polars.Series.dt.total_seconds.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.equals.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.gather.rst", "reference/series/api/polars.Series.gather_every.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.hist.rst", "reference/series/api/polars.Series.implode.rst", "reference/series/api/polars.Series.inner_dtype.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.is_between.rst", "reference/series/api/polars.Series.is_boolean.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first.rst", "reference/series/api/polars.Series.is_first_distinct.rst", "reference/series/api/polars.Series.is_float.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_integer.rst", "reference/series/api/polars.Series.is_last.rst", "reference/series/api/polars.Series.is_last_distinct.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_numeric.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_temporal.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.is_utf8.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.list.rst", "reference/series/api/polars.Series.list.all.rst", "reference/series/api/polars.Series.list.any.rst", "reference/series/api/polars.Series.list.arg_max.rst", "reference/series/api/polars.Series.list.arg_min.rst", "reference/series/api/polars.Series.list.concat.rst", "reference/series/api/polars.Series.list.contains.rst", "reference/series/api/polars.Series.list.count_match.rst", "reference/series/api/polars.Series.list.count_matches.rst", "reference/series/api/polars.Series.list.diff.rst", "reference/series/api/polars.Series.list.drop_nulls.rst", "reference/series/api/polars.Series.list.eval.rst", "reference/series/api/polars.Series.list.explode.rst", "reference/series/api/polars.Series.list.first.rst", "reference/series/api/polars.Series.list.gather.rst", "reference/series/api/polars.Series.list.get.rst", "reference/series/api/polars.Series.list.head.rst", "reference/series/api/polars.Series.list.join.rst", "reference/series/api/polars.Series.list.last.rst", "reference/series/api/polars.Series.list.len.rst", "reference/series/api/polars.Series.list.lengths.rst", "reference/series/api/polars.Series.list.max.rst", "reference/series/api/polars.Series.list.mean.rst", "reference/series/api/polars.Series.list.min.rst", "reference/series/api/polars.Series.list.reverse.rst", "reference/series/api/polars.Series.list.sample.rst", "reference/series/api/polars.Series.list.set_difference.rst", "reference/series/api/polars.Series.list.set_intersection.rst", "reference/series/api/polars.Series.list.set_symmetric_difference.rst", "reference/series/api/polars.Series.list.set_union.rst", "reference/series/api/polars.Series.list.shift.rst", "reference/series/api/polars.Series.list.slice.rst", "reference/series/api/polars.Series.list.sort.rst", "reference/series/api/polars.Series.list.sum.rst", "reference/series/api/polars.Series.list.tail.rst", "reference/series/api/polars.Series.list.take.rst", "reference/series/api/polars.Series.list.to_array.rst", "reference/series/api/polars.Series.list.to_struct.rst", "reference/series/api/polars.Series.list.unique.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.log1p.rst", "reference/series/api/polars.Series.lower_bound.rst", "reference/series/api/polars.Series.map_dict.rst", "reference/series/api/polars.Series.map_elements.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.not_.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.qcut.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.replace.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rle.rst", "reference/series/api/polars.Series.rle_id.rst", "reference/series/api/polars.Series.rolling_apply.rst", "reference/series/api/polars.Series.rolling_map.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.round_sig_figs.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.scatter.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.series_equal.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_at_idx.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shift_and_fill.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.contains_any.rst", "reference/series/api/polars.Series.str.count_match.rst", "reference/series/api/polars.Series.str.count_matches.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.extract_groups.rst", "reference/series/api/polars.Series.str.json_decode.rst", "reference/series/api/polars.Series.str.json_extract.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.len_bytes.rst", "reference/series/api/polars.Series.str.len_chars.rst", "reference/series/api/polars.Series.str.lengths.rst", "reference/series/api/polars.Series.str.ljust.rst", "reference/series/api/polars.Series.str.lstrip.rst", "reference/series/api/polars.Series.str.n_chars.rst", "reference/series/api/polars.Series.str.pad_end.rst", "reference/series/api/polars.Series.str.pad_start.rst", "reference/series/api/polars.Series.str.parse_int.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.replace_many.rst", "reference/series/api/polars.Series.str.reverse.rst", "reference/series/api/polars.Series.str.rjust.rst", "reference/series/api/polars.Series.str.rstrip.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip.rst", "reference/series/api/polars.Series.str.strip_chars.rst", "reference/series/api/polars.Series.str.strip_chars_end.rst", "reference/series/api/polars.Series.str.strip_chars_start.rst", "reference/series/api/polars.Series.str.strip_prefix.rst", "reference/series/api/polars.Series.str.strip_suffix.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.to_date.rst", "reference/series/api/polars.Series.str.to_datetime.rst", "reference/series/api/polars.Series.str.to_decimal.rst", "reference/series/api/polars.Series.str.to_integer.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_time.rst", "reference/series/api/polars.Series.str.to_titlecase.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.json_encode.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.schema.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.take.rst", "reference/series/api/polars.Series.take_every.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_init_repr.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.upper_bound.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.view.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/array.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/list.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/string.rst", "reference/series/struct.rst", "reference/series/temporal.rst", "reference/sql.rst", "reference/testing.rst", "reference/utils.rst"], "titles": ["Index", "Extending the API", "polars.Array", "polars.Binary", "polars.Boolean", "polars.Categorical", "polars.Config.activate_decimals", "polars.Config.load", "polars.Config.load_from_file", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.save_to_file", "polars.Config.set_ascii_tables", "polars.Config.set_auto_structify", "polars.Config.set_decimal_separator", "polars.Config.set_float_precision", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_fmt_table_cell_list_len", "polars.Config.set_streaming_chunk_size", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cell_numeric_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_thousands_separator", "polars.Config.set_trim_decimal_zeros", "polars.Config.set_verbose", "polars.Config.state", "polars.DataFrame.write_avro", "polars.DataFrame.write_csv", "polars.DataFrame.write_database", "polars.DataFrame.write_delta", "polars.DataFrame.write_excel", "polars.DataFrame.write_ipc", "polars.DataFrame.write_ipc_stream", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.DataType", "polars.Date", "polars.Datetime", "polars.Decimal", "polars.Duration", "polars.Enum", "polars.Float32", "polars.Float64", "polars.Int16", "polars.Int32", "polars.Int64", "polars.Int8", "polars.LazyFrame.sink_csv", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_parquet", "polars.List", "polars.Null", "polars.Object", "polars.SQLContext.execute", "polars.SQLContext.register", "polars.SQLContext.register_globals", "polars.SQLContext.register_many", "polars.SQLContext.tables", "polars.SQLContext.unregister", "polars.StringCache", "polars.Struct", "polars.Time", "polars.UInt16", "polars.UInt32", "polars.UInt64", "polars.UInt8", "polars.Unknown", "polars.Utf8", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.build_info", "polars.collect_all", "polars.collect_all_async", "polars.concat", "polars.disable_string_cache", "polars.enable_string_cache", "polars.exceptions.ArrowError", "polars.exceptions.ColumnNotFoundError", "polars.exceptions.ComputeError", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturnedError", "polars.exceptions.PolarsPanicError", "polars.exceptions.RowsError", "polars.exceptions.SchemaError", "polars.exceptions.SchemaFieldNotFoundError", "polars.exceptions.ShapeError", "polars.exceptions.StructFieldNotFoundError", "polars.exceptions.TooManyRowsReturnedError", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.from_repr", "polars.get_index_type", "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "polars.read_avro", "polars.read_csv", "polars.read_csv_batched", "polars.read_database", "polars.read_database_uri", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_ipc_stream", "polars.read_json", "polars.read_ndjson", "polars.read_ods", "polars.read_parquet", "polars.read_parquet_schema", "polars.scan_csv", "polars.scan_delta", "polars.scan_iceberg", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.scan_pyarrow_dataset", "polars.set_random_seed", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_frame_not_equal", "polars.testing.assert_series_equal", "polars.testing.assert_series_not_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.create_list_strategy", "polars.testing.parametric.dataframes", "polars.testing.parametric.load_profile", "polars.testing.parametric.series", "polars.testing.parametric.set_profile", "polars.threadpool_size", "polars.using_string_cache", "Config", "Aggregation", "polars.DataFrame.__dataframe__", "polars.DataFrame.apply", "polars.DataFrame.approx_n_unique", "polars.DataFrame.bottom_k", "polars.DataFrame.cast", "polars.DataFrame.clear", "polars.DataFrame.clone", "polars.DataFrame.columns", "polars.DataFrame.corr", "polars.DataFrame.describe", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.equals", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.find_idx_by_name", "polars.DataFrame.flags", "polars.DataFrame.fold", "polars.DataFrame.frame_equal", "polars.DataFrame.gather_every", "polars.DataFrame.get_column", "polars.DataFrame.get_column_index", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.group_by", "polars.DataFrame.group_by_dynamic", "polars.DataFrame.group_by_rolling", "polars.DataFrame.groupby", "polars.DataFrame.groupby_dynamic", "polars.DataFrame.groupby_rolling", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_at_idx", "polars.DataFrame.insert_column", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_columns", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.map_rows", "polars.DataFrame.max", "polars.DataFrame.max_horizontal", "polars.DataFrame.mean", "polars.DataFrame.mean_horizontal", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.min_horizontal", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace", "polars.DataFrame.replace_at_idx", "polars.DataFrame.replace_column", "polars.DataFrame.reverse", "polars.DataFrame.rolling", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.rows_by_key", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.select_seq", "polars.DataFrame.set_sorted", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shift_and_fill", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.sum_horizontal", "polars.DataFrame.tail", "polars.DataFrame.take_every", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_init_repr", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.top_k", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unstack", "polars.DataFrame.update", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_columns", "polars.DataFrame.with_columns_seq", "polars.DataFrame.with_row_count", "polars.dataframe.group_by.GroupBy.__iter__", "polars.dataframe.group_by.GroupBy.agg", "polars.dataframe.group_by.GroupBy.all", "polars.dataframe.group_by.GroupBy.apply", "polars.dataframe.group_by.GroupBy.count", "polars.dataframe.group_by.GroupBy.first", "polars.dataframe.group_by.GroupBy.head", "polars.dataframe.group_by.GroupBy.last", "polars.dataframe.group_by.GroupBy.map_groups", "polars.dataframe.group_by.GroupBy.max", "polars.dataframe.group_by.GroupBy.mean", "polars.dataframe.group_by.GroupBy.median", "polars.dataframe.group_by.GroupBy.min", "polars.dataframe.group_by.GroupBy.n_unique", "polars.dataframe.group_by.GroupBy.quantile", "polars.dataframe.group_by.GroupBy.sum", "polars.dataframe.group_by.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.add", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.and_", "polars.Expr.any", "polars.Expr.append", "polars.Expr.apply", "polars.Expr.approx_n_unique", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_true", "polars.Expr.arg_unique", "polars.Expr.arr.max", "polars.Expr.arr.min", "polars.Expr.arr.sum", "polars.Expr.arr.to_list", "polars.Expr.arr.unique", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.starts_with", "polars.Expr.bottom_k", "polars.Expr.cast", "polars.Expr.cat.get_categories", "polars.Expr.cat.set_ordering", "polars.Expr.cbrt", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.clip_max", "polars.Expr.clip_min", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.cot", "polars.Expr.count", "polars.Expr.cum_count", "polars.Expr.cum_max", "polars.Expr.cum_min", "polars.Expr.cum_prod", "polars.Expr.cum_sum", "polars.Expr.cumcount", "polars.Expr.cummax", "polars.Expr.cummin", "polars.Expr.cumprod", "polars.Expr.cumsum", "polars.Expr.cumulative_eval", "polars.Expr.cut", "polars.Expr.degrees", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.base_utc_offset", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.combine", "polars.Expr.dt.convert_time_zone", "polars.Expr.dt.date", "polars.Expr.dt.datetime", "polars.Expr.dt.day", "polars.Expr.dt.days", "polars.Expr.dt.dst_offset", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.hours", "polars.Expr.dt.is_leap_year", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.microseconds", "polars.Expr.dt.millisecond", "polars.Expr.dt.milliseconds", "polars.Expr.dt.minute", "polars.Expr.dt.minutes", "polars.Expr.dt.month", "polars.Expr.dt.month_end", "polars.Expr.dt.month_start", "polars.Expr.dt.nanosecond", "polars.Expr.dt.nanoseconds", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.replace_time_zone", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.seconds", "polars.Expr.dt.strftime", "polars.Expr.dt.time", "polars.Expr.dt.timestamp", "polars.Expr.dt.to_string", "polars.Expr.dt.total_days", "polars.Expr.dt.total_hours", "polars.Expr.dt.total_microseconds", "polars.Expr.dt.total_milliseconds", "polars.Expr.dt.total_minutes", "polars.Expr.dt.total_nanoseconds", "polars.Expr.dt.total_seconds", "polars.Expr.dt.truncate", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.eq", "polars.Expr.eq_missing", "polars.Expr.ewm_mean", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.floordiv", "polars.Expr.forward_fill", "polars.Expr.from_json", "polars.Expr.gather", "polars.Expr.gather_every", "polars.Expr.ge", "polars.Expr.get", "polars.Expr.gt", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.hist", "polars.Expr.implode", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first", "polars.Expr.is_first_distinct", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_last", "polars.Expr.is_last_distinct", "polars.Expr.is_nan", "polars.Expr.is_not", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.keep_name", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.le", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list.all", "polars.Expr.list.any", "polars.Expr.list.arg_max", "polars.Expr.list.arg_min", "polars.Expr.list.concat", "polars.Expr.list.contains", "polars.Expr.list.count_match", "polars.Expr.list.count_matches", "polars.Expr.list.diff", "polars.Expr.list.drop_nulls", "polars.Expr.list.eval", "polars.Expr.list.explode", "polars.Expr.list.first", "polars.Expr.list.gather", "polars.Expr.list.get", "polars.Expr.list.head", "polars.Expr.list.join", "polars.Expr.list.last", "polars.Expr.list.len", "polars.Expr.list.lengths", "polars.Expr.list.max", "polars.Expr.list.mean", "polars.Expr.list.min", "polars.Expr.list.reverse", "polars.Expr.list.sample", "polars.Expr.list.set_difference", "polars.Expr.list.set_intersection", "polars.Expr.list.set_symmetric_difference", "polars.Expr.list.set_union", "polars.Expr.list.shift", "polars.Expr.list.slice", "polars.Expr.list.sort", "polars.Expr.list.sum", "polars.Expr.list.tail", "polars.Expr.list.take", "polars.Expr.list.to_array", "polars.Expr.list.to_struct", "polars.Expr.list.unique", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.log1p", "polars.Expr.lower_bound", "polars.Expr.lt", "polars.Expr.map", "polars.Expr.map_alias", "polars.Expr.map_batches", "polars.Expr.map_dict", "polars.Expr.map_elements", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.eq", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.ne", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.tree_format", "polars.Expr.meta.undo_aliases", "polars.Expr.meta.write_json", "polars.Expr.min", "polars.Expr.mod", "polars.Expr.mode", "polars.Expr.mul", "polars.Expr.n_unique", "polars.Expr.name.keep", "polars.Expr.name.map", "polars.Expr.name.prefix", "polars.Expr.name.suffix", "polars.Expr.name.to_lowercase", "polars.Expr.name.to_uppercase", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.ne", "polars.Expr.ne_missing", "polars.Expr.not_", "polars.Expr.null_count", "polars.Expr.or_", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.peak_max", "polars.Expr.peak_min", "polars.Expr.pipe", "polars.Expr.pow", "polars.Expr.prefix", "polars.Expr.product", "polars.Expr.qcut", "polars.Expr.quantile", "polars.Expr.radians", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.replace", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rle", "polars.Expr.rle_id", "polars.Expr.rolling", "polars.Expr.rolling_apply", "polars.Expr.rolling_map", "polars.Expr.rolling_max", "polars.Expr.rolling_mean", "polars.Expr.rolling_median", "polars.Expr.rolling_min", "polars.Expr.rolling_quantile", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_sum", "polars.Expr.rolling_var", "polars.Expr.round", "polars.Expr.round_sig_figs", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shift_and_fill", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.contains_any", "polars.Expr.str.count_match", "polars.Expr.str.count_matches", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.extract_groups", "polars.Expr.str.json_decode", "polars.Expr.str.json_extract", "polars.Expr.str.json_path_match", "polars.Expr.str.len_bytes", "polars.Expr.str.len_chars", "polars.Expr.str.lengths", "polars.Expr.str.ljust", "polars.Expr.str.lstrip", "polars.Expr.str.n_chars", "polars.Expr.str.pad_end", "polars.Expr.str.pad_start", "polars.Expr.str.parse_int", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.replace_many", "polars.Expr.str.reverse", "polars.Expr.str.rjust", "polars.Expr.str.rstrip", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip", "polars.Expr.str.strip_chars", "polars.Expr.str.strip_chars_end", "polars.Expr.str.strip_chars_start", "polars.Expr.str.strip_prefix", "polars.Expr.str.strip_suffix", "polars.Expr.str.strptime", "polars.Expr.str.to_date", "polars.Expr.str.to_datetime", "polars.Expr.str.to_decimal", "polars.Expr.str.to_integer", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_time", "polars.Expr.str.to_titlecase", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.json_encode", "polars.Expr.struct.rename_fields", "polars.Expr.sub", "polars.Expr.suffix", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.take", "polars.Expr.take_every", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.truediv", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.Expr.xor", "polars.all", "polars.all_horizontal", "polars.any", "polars.any_horizontal", "polars.apply", "polars.approx_n_unique", "polars.arange", "polars.arctan2", "polars.arctan2d", "polars.arg_sort_by", "polars.arg_where", "polars.coalesce", "polars.concat_list", "polars.concat_str", "polars.corr", "polars.count", "polars.cov", "polars.cum_fold", "polars.cum_reduce", "polars.cum_sum", "polars.cum_sum_horizontal", "polars.cumfold", "polars.cumreduce", "polars.cumsum", "polars.cumsum_horizontal", "polars.date", "polars.date_range", "polars.date_ranges", "polars.datetime", "polars.datetime_range", "polars.datetime_ranges", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.implode", "polars.int_range", "polars.int_ranges", "polars.last", "polars.lit", "polars.map", "polars.map_batches", "polars.map_groups", "polars.max", "polars.max_horizontal", "polars.mean", "polars.median", "polars.min", "polars.min_horizontal", "polars.n_unique", "polars.ones", "polars.quantile", "polars.reduce", "polars.repeat", "polars.rolling_corr", "polars.rolling_cov", "polars.select", "polars.sql_expr", "polars.std", "polars.struct", "polars.sum", "polars.sum_horizontal", "polars.tail", "polars.time", "polars.time_range", "polars.time_ranges", "polars.var", "polars.when", "polars.zeros", "Array", "Binary", "Boolean", "Categories", "polars.col", "Columns / names", "Computation", "Functions", "Expressions", "List", "Meta", "Miscellaneous", "Manipulation/selection", "Name", "Operators", "String", "Struct", "Temporal", "Window", "Functions", "API reference", "Input/output", "Aggregation", "polars.LazyFrame.approx_n_unique", "polars.LazyFrame.bottom_k", "polars.LazyFrame.cache", "polars.LazyFrame.cast", "polars.LazyFrame.clear", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.collect_async", "polars.LazyFrame.columns", "polars.LazyFrame.deserialize", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explain", "polars.LazyFrame.explode", "polars.LazyFrame.fetch", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.gather_every", "polars.LazyFrame.group_by", "polars.LazyFrame.group_by_dynamic", "polars.LazyFrame.group_by_rolling", "polars.LazyFrame.groupby", "polars.LazyFrame.groupby_dynamic", "polars.LazyFrame.groupby_rolling", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map", "polars.LazyFrame.map_batches", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.null_count", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.rolling", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.select_seq", "polars.LazyFrame.serialize", "polars.LazyFrame.set_sorted", "polars.LazyFrame.shift", "polars.LazyFrame.shift_and_fill", "polars.LazyFrame.show_graph", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.take_every", "polars.LazyFrame.top_k", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.update", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_columns_seq", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.lazyframe.group_by.LazyGroupBy.agg", "polars.lazyframe.group_by.LazyGroupBy.all", "polars.lazyframe.group_by.LazyGroupBy.apply", "polars.lazyframe.group_by.LazyGroupBy.count", "polars.lazyframe.group_by.LazyGroupBy.first", "polars.lazyframe.group_by.LazyGroupBy.head", "polars.lazyframe.group_by.LazyGroupBy.last", "polars.lazyframe.group_by.LazyGroupBy.map_groups", "polars.lazyframe.group_by.LazyGroupBy.max", "polars.lazyframe.group_by.LazyGroupBy.mean", "polars.lazyframe.group_by.LazyGroupBy.median", "polars.lazyframe.group_by.LazyGroupBy.min", "polars.lazyframe.group_by.LazyGroupBy.n_unique", "polars.lazyframe.group_by.LazyGroupBy.quantile", "polars.lazyframe.group_by.LazyGroupBy.sum", "polars.lazyframe.group_by.LazyGroupBy.tail", "Attributes", "Descriptive", "GroupBy", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Selectors", "Aggregation", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.apply", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.arr.max", "polars.Series.arr.min", "polars.Series.arr.sum", "polars.Series.arr.to_list", "polars.Series.arr.unique", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.starts_with", "polars.Series.bottom_k", "polars.Series.cast", "polars.Series.cat", "polars.Series.cat.get_categories", "polars.Series.cat.is_local", "polars.Series.cat.set_ordering", "polars.Series.cat.to_local", "polars.Series.cat.uses_lexical_ordering", "polars.Series.cbrt", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.clear", "polars.Series.clip", "polars.Series.clip_max", "polars.Series.clip_min", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cot", "polars.Series.cum_max", "polars.Series.cum_min", "polars.Series.cum_prod", "polars.Series.cum_sum", "polars.Series.cummax", "polars.Series.cummin", "polars.Series.cumprod", "polars.Series.cumsum", "polars.Series.cumulative_eval", "polars.Series.cut", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt", "polars.Series.dt.base_utc_offset", "polars.Series.dt.cast_time_unit", "polars.Series.dt.combine", "polars.Series.dt.convert_time_zone", "polars.Series.dt.date", "polars.Series.dt.datetime", "polars.Series.dt.day", "polars.Series.dt.days", "polars.Series.dt.dst_offset", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.hours", "polars.Series.dt.is_leap_year", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.microseconds", "polars.Series.dt.millisecond", "polars.Series.dt.milliseconds", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.minutes", "polars.Series.dt.month", "polars.Series.dt.month_end", "polars.Series.dt.month_start", "polars.Series.dt.nanosecond", "polars.Series.dt.nanoseconds", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.replace_time_zone", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.seconds", "polars.Series.dt.strftime", "polars.Series.dt.time", "polars.Series.dt.timestamp", "polars.Series.dt.to_string", "polars.Series.dt.total_days", "polars.Series.dt.total_hours", "polars.Series.dt.total_microseconds", "polars.Series.dt.total_milliseconds", "polars.Series.dt.total_minutes", "polars.Series.dt.total_nanoseconds", "polars.Series.dt.total_seconds", "polars.Series.dt.truncate", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.equals", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.flags", "polars.Series.floor", "polars.Series.gather", "polars.Series.gather_every", "polars.Series.get_chunks", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.hist", "polars.Series.implode", "polars.Series.inner_dtype", "polars.Series.interpolate", "polars.Series.is_between", "polars.Series.is_boolean", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first", "polars.Series.is_first_distinct", "polars.Series.is_float", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_integer", "polars.Series.is_last", "polars.Series.is_last_distinct", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_numeric", "polars.Series.is_sorted", "polars.Series.is_temporal", "polars.Series.is_unique", "polars.Series.is_utf8", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.len", "polars.Series.limit", "polars.Series.list", "polars.Series.list.all", "polars.Series.list.any", "polars.Series.list.arg_max", "polars.Series.list.arg_min", "polars.Series.list.concat", "polars.Series.list.contains", "polars.Series.list.count_match", "polars.Series.list.count_matches", "polars.Series.list.diff", "polars.Series.list.drop_nulls", "polars.Series.list.eval", "polars.Series.list.explode", "polars.Series.list.first", "polars.Series.list.gather", "polars.Series.list.get", "polars.Series.list.head", "polars.Series.list.join", "polars.Series.list.last", "polars.Series.list.len", "polars.Series.list.lengths", "polars.Series.list.max", "polars.Series.list.mean", "polars.Series.list.min", "polars.Series.list.reverse", "polars.Series.list.sample", "polars.Series.list.set_difference", "polars.Series.list.set_intersection", "polars.Series.list.set_symmetric_difference", "polars.Series.list.set_union", "polars.Series.list.shift", "polars.Series.list.slice", "polars.Series.list.sort", "polars.Series.list.sum", "polars.Series.list.tail", "polars.Series.list.take", "polars.Series.list.to_array", "polars.Series.list.to_struct", "polars.Series.list.unique", "polars.Series.log", "polars.Series.log10", "polars.Series.log1p", "polars.Series.lower_bound", "polars.Series.map_dict", "polars.Series.map_elements", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.new_from_index", "polars.Series.not_", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.product", "polars.Series.qcut", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.replace", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rle", "polars.Series.rle_id", "polars.Series.rolling_apply", "polars.Series.rolling_map", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.round_sig_figs", "polars.Series.sample", "polars.Series.scatter", "polars.Series.search_sorted", "polars.Series.series_equal", "polars.Series.set", "polars.Series.set_at_idx", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shift_and_fill", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.contains_any", "polars.Series.str.count_match", "polars.Series.str.count_matches", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.extract_groups", "polars.Series.str.json_decode", "polars.Series.str.json_extract", "polars.Series.str.json_path_match", "polars.Series.str.len_bytes", "polars.Series.str.len_chars", "polars.Series.str.lengths", "polars.Series.str.ljust", "polars.Series.str.lstrip", "polars.Series.str.n_chars", "polars.Series.str.pad_end", "polars.Series.str.pad_start", "polars.Series.str.parse_int", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.replace_many", "polars.Series.str.reverse", "polars.Series.str.rjust", "polars.Series.str.rstrip", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip", "polars.Series.str.strip_chars", "polars.Series.str.strip_chars_end", "polars.Series.str.strip_chars_start", "polars.Series.str.strip_prefix", "polars.Series.str.strip_suffix", "polars.Series.str.strptime", "polars.Series.str.to_date", "polars.Series.str.to_datetime", "polars.Series.str.to_decimal", "polars.Series.str.to_integer", "polars.Series.str.to_lowercase", "polars.Series.str.to_time", "polars.Series.str.to_titlecase", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.json_encode", "polars.Series.struct.rename_fields", "polars.Series.struct.schema", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.take", "polars.Series.take_every", "polars.Series.tan", "polars.Series.tanh", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_init_repr", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.upper_bound", "polars.Series.value_counts", "polars.Series.var", "polars.Series.view", "polars.Series.zip_with", "Array", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "List", "Miscellaneous", "Manipulation/selection", "String", "Struct", "Temporal", "SQL", "Testing", "Utils"], "terms": {"api": [0, 105, 135, 153, 207, 281, 295, 509, 710, 745, 841, 892, 1068, 1219], "refer": [0, 40, 114, 115, 116, 120, 121, 122, 123, 124, 125, 126, 128, 161, 295, 395, 398, 507, 552, 600, 632, 633, 634, 638, 745, 769, 853, 956, 959, 1088, 1173, 1174, 1175, 1179, 1219], "input": [0, 79, 85, 107, 115, 116, 156, 183, 186, 207, 211, 220, 237, 238, 241, 245, 248, 260, 270, 271, 274, 295, 302, 339, 417, 441, 501, 508, 509, 518, 541, 556, 588, 628, 629, 630, 631, 662, 664, 666, 667, 669, 672, 674, 675, 676, 683, 687, 696, 697, 704, 705, 706, 708, 709, 710, 712, 716, 724, 727, 729, 735, 745, 757, 761, 781, 784, 811, 812, 813, 815, 819, 824, 830, 831, 834, 853, 897, 998, 1064, 1065, 1068, 1092, 1118, 1219], "output": [0, 13, 35, 37, 40, 41, 42, 43, 44, 58, 120, 154, 162, 184, 185, 187, 188, 201, 207, 211, 214, 220, 222, 231, 233, 237, 248, 266, 270, 295, 305, 307, 309, 357, 498, 505, 506, 507, 509, 517, 529, 549, 561, 566, 568, 570, 572, 591, 607, 659, 663, 665, 667, 677, 689, 690, 708, 709, 710, 745, 757, 782, 783, 785, 786, 795, 796, 800, 801, 809, 811, 813, 830, 836, 841, 853, 860, 861, 863, 913, 1068, 1086, 1132, 1148, 1207, 1219], "seri": [0, 1, 2, 16, 30, 70, 71, 80, 81, 82, 83, 87, 88, 89, 104, 106, 109, 111, 138, 140, 141, 145, 164, 173, 176, 179, 181, 184, 189, 192, 193, 194, 196, 198, 200, 208, 209, 210, 211, 215, 216, 227, 228, 229, 231, 235, 247, 248, 252, 255, 258, 259, 275, 295, 308, 309, 320, 328, 335, 336, 338, 391, 420, 426, 430, 431, 439, 443, 446, 447, 450, 452, 453, 454, 466, 473, 475, 496, 498, 503, 505, 507, 509, 546, 552, 553, 554, 555, 556, 557, 559, 561, 562, 563, 569, 577, 580, 591, 621, 632, 633, 634, 638, 642, 649, 650, 658, 667, 669, 673, 680, 681, 684, 685, 689, 690, 692, 693, 698, 700, 704, 705, 707, 708, 709, 710, 718, 720, 721, 724, 727, 732, 733, 736, 745, 757, 778, 782, 809, 835, 853, 1211, 1213, 1215, 1218, 1220, 1223, 1224, 1225, 1227], "datafram": [0, 1, 12, 13, 14, 15, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 79, 80, 81, 82, 83, 85, 86, 87, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 129, 132, 133, 134, 138, 139, 142, 143, 151, 293, 294, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 369, 371, 373, 375, 376, 377, 381, 383, 384, 385, 388, 389, 390, 391, 393, 395, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 509, 510, 511, 512, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 612, 613, 615, 616, 617, 618, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 635, 636, 637, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 690, 694, 695, 696, 697, 698, 699, 700, 702, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 717, 720, 724, 725, 726, 727, 728, 729, 730, 733, 734, 735, 741, 745, 757, 766, 767, 770, 774, 775, 779, 782, 790, 791, 792, 793, 795, 796, 800, 801, 805, 808, 818, 819, 825, 826, 827, 830, 831, 832, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 853, 856, 877, 879, 913, 914, 952, 994, 1025, 1026, 1035, 1068, 1086, 1146, 1164, 1165, 1188, 1196, 1197, 1207, 1219, 1226, 1227], "lazyfram": [0, 1, 64, 65, 67, 69, 79, 80, 81, 82, 83, 85, 86, 87, 129, 130, 131, 132, 133, 134, 135, 138, 139, 145, 205, 221, 222, 238, 271, 295, 423, 498, 745, 757, 852, 856, 1226, 1227], "express": [0, 13, 58, 59, 60, 85, 86, 142, 145, 147, 156, 169, 171, 173, 183, 186, 207, 218, 222, 232, 237, 238, 241, 245, 260, 270, 271, 274, 281, 295, 302, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 319, 320, 325, 328, 330, 331, 332, 339, 342, 343, 344, 345, 356, 357, 358, 360, 363, 364, 365, 366, 367, 368, 369, 371, 373, 375, 376, 377, 379, 381, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 395, 396, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 417, 419, 420, 422, 423, 427, 429, 430, 432, 433, 434, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 456, 459, 460, 464, 465, 467, 468, 469, 472, 473, 478, 480, 497, 498, 503, 504, 506, 507, 508, 509, 513, 514, 515, 516, 517, 518, 520, 522, 524, 526, 528, 529, 530, 531, 532, 533, 536, 537, 538, 540, 541, 545, 546, 547, 548, 549, 551, 555, 556, 557, 559, 575, 576, 577, 579, 581, 583, 584, 586, 588, 591, 592, 594, 595, 597, 599, 600, 601, 602, 603, 605, 606, 607, 615, 616, 621, 622, 623, 624, 636, 645, 646, 649, 651, 652, 655, 656, 658, 659, 661, 662, 663, 664, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 704, 705, 706, 707, 708, 709, 710, 712, 716, 718, 720, 721, 722, 723, 724, 725, 727, 729, 731, 732, 733, 735, 736, 741, 744, 757, 761, 766, 767, 773, 774, 775, 778, 781, 784, 805, 811, 812, 815, 816, 817, 819, 824, 830, 831, 832, 834, 841, 853, 856, 897, 912, 922, 982, 998, 1031, 1032, 1035, 1068, 1092, 1112, 1118, 1119, 1133, 1135, 1136, 1141, 1142, 1143, 1144, 1146, 1156, 1157, 1219], "selector": [0, 40, 157, 163, 165, 169, 213, 220, 222, 254, 262, 264, 295, 417, 745, 757, 763, 770, 771, 774, 800, 825, 853], "extend": [0, 107, 268, 295, 420, 745, 757, 862, 982, 1219], "function": [0, 40, 70, 79, 80, 81, 82, 83, 86, 88, 89, 105, 111, 114, 115, 116, 117, 120, 121, 122, 123, 124, 125, 126, 128, 129, 134, 138, 139, 140, 141, 143, 153, 154, 161, 168, 176, 207, 213, 221, 222, 256, 257, 261, 264, 265, 276, 281, 295, 305, 309, 356, 392, 414, 415, 416, 437, 498, 505, 506, 507, 509, 529, 541, 545, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 585, 653, 663, 667, 678, 680, 681, 684, 685, 686, 687, 697, 698, 700, 702, 703, 706, 708, 709, 710, 713, 714, 717, 720, 726, 730, 734, 741, 745, 757, 766, 767, 769, 775, 795, 796, 800, 804, 827, 836, 841, 853, 863, 912, 953, 975, 976, 977, 978, 994, 1061, 1068, 1086, 1097, 1098, 1111, 1114, 1121, 1126, 1201, 1219, 1227], "data": [0, 1, 6, 15, 23, 24, 26, 33, 36, 37, 38, 39, 40, 41, 42, 45, 46, 58, 59, 60, 64, 70, 71, 79, 80, 82, 87, 89, 94, 95, 99, 101, 104, 105, 106, 107, 108, 109, 110, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 133, 138, 139, 140, 141, 143, 144, 145, 147, 153, 159, 170, 182, 183, 184, 185, 186, 187, 188, 201, 202, 203, 205, 207, 220, 221, 225, 231, 232, 233, 234, 243, 251, 256, 257, 261, 270, 273, 293, 295, 305, 306, 307, 311, 312, 313, 314, 315, 316, 319, 322, 323, 324, 325, 326, 328, 330, 331, 332, 334, 335, 339, 342, 343, 344, 345, 357, 358, 363, 364, 367, 368, 369, 371, 373, 375, 376, 377, 379, 381, 383, 384, 385, 386, 388, 389, 390, 392, 393, 396, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 419, 430, 432, 433, 434, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 459, 460, 464, 465, 467, 473, 478, 480, 486, 497, 499, 504, 509, 536, 537, 540, 541, 549, 551, 552, 555, 556, 557, 559, 561, 564, 565, 566, 567, 568, 570, 571, 572, 573, 575, 583, 584, 585, 591, 594, 595, 597, 599, 600, 601, 602, 605, 606, 607, 621, 622, 623, 624, 632, 633, 634, 636, 638, 641, 651, 652, 653, 655, 656, 659, 662, 667, 669, 678, 688, 689, 690, 691, 692, 693, 694, 704, 705, 707, 708, 709, 710, 718, 721, 731, 732, 733, 736, 741, 745, 757, 764, 765, 766, 775, 781, 782, 783, 784, 785, 786, 804, 809, 830, 853, 860, 861, 873, 877, 878, 879, 880, 882, 886, 888, 896, 897, 900, 913, 914, 920, 921, 924, 925, 926, 928, 930, 932, 933, 937, 939, 942, 944, 945, 946, 947, 949, 950, 951, 953, 954, 957, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 980, 981, 994, 1000, 1002, 1003, 1004, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1018, 1027, 1028, 1030, 1036, 1041, 1043, 1049, 1060, 1062, 1068, 1080, 1086, 1088, 1092, 1093, 1095, 1108, 1110, 1121, 1126, 1132, 1133, 1135, 1136, 1138, 1140, 1141, 1142, 1143, 1146, 1147, 1148, 1162, 1163, 1164, 1165, 1173, 1174, 1175, 1177, 1179, 1182, 1199, 1200, 1201, 1202, 1204, 1209, 1218, 1219, 1226], "type": [0, 1, 2, 3, 4, 6, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 39, 40, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 85, 86, 94, 104, 106, 107, 108, 109, 110, 115, 116, 117, 119, 120, 124, 125, 126, 129, 130, 131, 133, 137, 138, 139, 140, 141, 144, 145, 154, 176, 182, 184, 185, 187, 188, 189, 202, 203, 207, 231, 251, 257, 259, 262, 295, 305, 307, 311, 312, 313, 314, 315, 316, 319, 325, 328, 330, 331, 332, 334, 335, 336, 339, 342, 343, 344, 345, 357, 358, 363, 366, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 396, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 417, 419, 430, 433, 435, 441, 442, 443, 444, 445, 446, 447, 448, 449, 460, 464, 465, 467, 473, 478, 480, 497, 498, 509, 549, 551, 555, 556, 557, 559, 561, 583, 584, 591, 594, 595, 597, 599, 600, 601, 602, 605, 606, 607, 621, 622, 623, 624, 632, 636, 651, 652, 653, 659, 667, 669, 678, 688, 689, 690, 691, 692, 693, 694, 696, 697, 704, 705, 706, 707, 708, 709, 710, 718, 721, 731, 732, 733, 736, 741, 745, 757, 766, 767, 773, 775, 782, 783, 785, 786, 790, 805, 809, 817, 825, 853, 860, 861, 873, 878, 880, 882, 886, 888, 890, 897, 913, 914, 920, 923, 924, 925, 926, 927, 928, 930, 931, 932, 933, 937, 938, 939, 940, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 957, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 971, 980, 992, 1000, 1002, 1003, 1004, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1018, 1027, 1028, 1030, 1036, 1041, 1043, 1060, 1061, 1080, 1086, 1092, 1093, 1095, 1121, 1132, 1133, 1135, 1136, 1138, 1140, 1141, 1142, 1143, 1146, 1147, 1148, 1162, 1163, 1164, 1165, 1173, 1177, 1199, 1200, 1202, 1210, 1219, 1226], "config": [0, 79, 237, 270, 295, 593, 617, 694, 757, 766, 811, 830, 853, 1134, 1158], "except": [0, 138, 190, 204, 206, 249, 295, 696, 757, 791, 853, 856, 993, 1023, 1190, 1200, 1209, 1219], "test": [0, 6, 117, 118, 120, 126, 757, 787, 794, 853], "util": [0, 111, 700, 757, 775, 853], "sql": [0, 38, 64, 68, 117, 118, 203, 241, 295, 491, 578, 678, 725, 745, 757, 815, 853, 1054, 1118, 1219], "These": [1, 40, 117, 151, 261, 295, 406, 744, 745, 953, 967], "allow": [1, 13, 39, 40, 58, 59, 60, 70, 89, 94, 105, 117, 129, 132, 133, 134, 135, 145, 147, 153, 201, 204, 205, 232, 233, 235, 256, 257, 262, 273, 295, 388, 395, 398, 486, 507, 509, 554, 575, 632, 633, 634, 745, 790, 791, 795, 796, 800, 825, 832, 853, 856, 949, 956, 959, 974, 1049, 1068, 1090, 1110, 1113, 1173, 1174, 1175, 1201, 1219, 1227], "you": [1, 15, 19, 40, 45, 60, 69, 79, 86, 87, 104, 106, 107, 108, 110, 115, 116, 117, 118, 120, 121, 124, 125, 127, 129, 133, 135, 151, 170, 184, 185, 187, 188, 200, 201, 207, 218, 222, 231, 232, 233, 234, 253, 256, 261, 281, 295, 384, 385, 388, 391, 395, 398, 406, 417, 423, 441, 472, 498, 507, 509, 554, 560, 561, 564, 565, 566, 567, 568, 570, 571, 572, 593, 606, 617, 680, 689, 694, 698, 710, 718, 721, 736, 745, 767, 771, 782, 783, 785, 786, 787, 794, 809, 817, 841, 853, 856, 945, 946, 952, 953, 956, 959, 967, 981, 998, 1035, 1068, 1090, 1096, 1134, 1147, 1158, 1175, 1209, 1219, 1227], "regist": [1, 64, 66, 67, 68, 69, 80, 81, 82, 83, 146, 148, 745, 1226], "custom": [1, 32, 39, 40, 80, 81, 82, 83, 146, 147, 148, 154, 207, 276, 281, 295, 309, 395, 398, 498, 505, 507, 509, 562, 563, 667, 708, 709, 710, 745, 795, 796, 836, 841, 853, 863, 956, 959, 1061, 1068, 1097, 1098, 1219, 1227], "dedic": [1, 105, 201, 233, 295], "namespac": [1, 294, 744, 757, 852, 1227], "underli": [1, 70, 89, 97, 104, 106, 107, 108, 110, 117, 124, 125, 127, 133, 142, 145, 147, 169, 170, 201, 202, 233, 251, 295, 329, 364, 365, 369, 373, 375, 376, 377, 379, 381, 383, 386, 389, 390, 391, 393, 407, 408, 409, 410, 554, 573, 592, 596, 745, 774, 853, 856, 881, 891, 921, 922, 926, 930, 932, 933, 937, 939, 942, 944, 947, 950, 951, 952, 954, 968, 969, 970, 971, 981, 1090, 1108, 1121, 1133, 1137, 1195, 1200, 1219], "polar": [1, 295, 744, 745, 751, 757, 853, 856, 1219, 1226], "class": [1, 2, 3, 4, 5, 22, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 61, 62, 63, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 142, 143, 234, 257, 295, 732, 741, 745, 751, 757, 853, 1199, 1200, 1219, 1226], "without": [1, 86, 111, 119, 122, 128, 130, 131, 135, 264, 265, 295, 309, 356, 392, 437, 564, 565, 566, 567, 568, 570, 571, 572, 593, 617, 724, 745, 767, 827, 853, 889, 892, 912, 953, 994, 1086, 1134, 1158, 1200, 1219], "requir": [1, 39, 40, 45, 60, 79, 105, 109, 117, 138, 139, 140, 141, 156, 161, 232, 257, 260, 295, 326, 414, 415, 416, 499, 509, 580, 632, 633, 634, 656, 721, 745, 761, 819, 824, 853, 879, 976, 977, 978, 1062, 1120, 1173, 1174, 1175, 1200, 1201, 1204, 1219], "subclass": [1, 295], "mixin": 1, "expr": [1, 79, 80, 81, 82, 83, 169, 171, 203, 204, 218, 222, 232, 237, 238, 270, 271, 295, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 737, 738, 740, 741, 745, 746, 747, 750, 751, 752, 753, 754, 774, 776, 790, 791, 806, 811, 812, 813, 816, 830, 831, 853, 912, 922, 949, 967, 983, 988, 1025, 1026, 1031, 1032, 1035, 1040, 1055, 1058, 1119, 1133, 1139, 1166, 1191, 1219], "ar": [1, 15, 16, 22, 25, 35, 37, 39, 40, 58, 59, 60, 69, 70, 79, 86, 87, 88, 89, 96, 103, 104, 105, 106, 107, 108, 109, 110, 111, 115, 116, 117, 118, 119, 120, 121, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 143, 145, 151, 153, 156, 161, 165, 168, 171, 175, 176, 182, 183, 184, 185, 186, 187, 188, 201, 203, 204, 205, 207, 213, 214, 220, 222, 231, 232, 233, 234, 237, 238, 239, 241, 245, 252, 257, 260, 265, 266, 270, 271, 274, 295, 305, 307, 339, 347, 349, 350, 392, 406, 411, 413, 414, 415, 416, 441, 443, 446, 447, 450, 452, 453, 454, 457, 462, 491, 498, 507, 508, 537, 541, 549, 552, 555, 556, 557, 561, 564, 565, 566, 567, 568, 569, 570, 571, 572, 578, 582, 585, 587, 588, 602, 603, 604, 605, 612, 613, 614, 636, 641, 647, 663, 664, 666, 672, 674, 675, 676, 677, 678, 683, 687, 689, 690, 692, 693, 712, 716, 724, 727, 729, 732, 733, 735, 737, 738, 740, 744, 745, 746, 747, 750, 751, 752, 753, 754, 757, 761, 766, 767, 771, 775, 776, 781, 782, 783, 784, 785, 786, 787, 790, 791, 794, 796, 800, 801, 805, 807, 809, 811, 812, 814, 815, 819, 824, 827, 830, 831, 832, 834, 853, 856, 860, 861, 889, 897, 906, 907, 953, 967, 973, 975, 976, 977, 978, 991, 998, 1002, 1006, 1007, 1011, 1012, 1013, 1014, 1021, 1025, 1054, 1061, 1086, 1088, 1092, 1093, 1104, 1118, 1123, 1126, 1143, 1144, 1145, 1153, 1154, 1155, 1175, 1177, 1182, 1189, 1201, 1209, 1211, 1213, 1215, 1219, 1220, 1223, 1224, 1225, 1227], "all": [1, 9, 13, 18, 22, 25, 30, 35, 37, 39, 40, 46, 58, 66, 79, 85, 104, 107, 109, 110, 115, 116, 119, 120, 121, 123, 126, 127, 129, 132, 133, 142, 143, 147, 151, 157, 162, 165, 172, 190, 196, 198, 200, 201, 202, 203, 205, 206, 211, 213, 217, 218, 225, 232, 233, 234, 238, 244, 248, 249, 254, 256, 262, 264, 265, 266, 271, 295, 306, 308, 327, 345, 356, 361, 362, 363, 417, 422, 428, 435, 438, 440, 443, 447, 453, 454, 456, 460, 471, 472, 478, 494, 498, 506, 507, 525, 528, 529, 530, 531, 532, 533, 539, 547, 552, 556, 558, 563, 580, 586, 588, 594, 595, 601, 602, 603, 604, 605, 610, 615, 616, 620, 626, 627, 628, 629, 646, 664, 680, 681, 682, 683, 686, 687, 689, 696, 698, 703, 720, 727, 728, 729, 735, 745, 751, 757, 763, 766, 767, 771, 773, 775, 777, 790, 795, 796, 800, 805, 812, 817, 818, 825, 827, 831, 832, 853, 856, 912, 914, 917, 918, 920, 993, 1000, 1018, 1023, 1034, 1035, 1041, 1057, 1061, 1088, 1092, 1098, 1127, 1135, 1136, 1142, 1143, 1144, 1145, 1146, 1151, 1156, 1157, 1161, 1167, 1168, 1169, 1170, 1190, 1219, 1226, 1227], "support": [1, 39, 40, 45, 87, 104, 105, 106, 107, 108, 109, 110, 111, 117, 118, 119, 120, 124, 125, 126, 127, 130, 131, 134, 142, 147, 151, 201, 202, 203, 204, 208, 210, 215, 233, 234, 244, 245, 247, 253, 257, 295, 492, 541, 556, 586, 588, 617, 621, 741, 745, 751, 790, 791, 818, 819, 853, 856, 1055, 1092, 1127, 1158, 1162, 1201, 1219, 1226], "target": [1, 38, 39, 40, 84, 120, 295, 600, 632, 633, 634, 856, 1141, 1173, 1174, 1175], "thi": [1, 6, 9, 15, 17, 19, 35, 37, 38, 39, 40, 43, 45, 49, 51, 58, 59, 60, 64, 65, 69, 70, 79, 85, 86, 87, 89, 104, 105, 106, 107, 108, 109, 110, 111, 113, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 147, 149, 151, 153, 154, 155, 156, 159, 161, 165, 166, 168, 170, 174, 175, 176, 177, 182, 183, 184, 185, 186, 187, 188, 189, 193, 194, 196, 198, 199, 200, 201, 203, 204, 205, 207, 208, 210, 212, 213, 214, 215, 217, 218, 220, 223, 224, 225, 228, 229, 231, 232, 233, 234, 235, 237, 238, 241, 242, 244, 246, 247, 250, 251, 253, 256, 257, 260, 261, 262, 264, 265, 266, 267, 268, 270, 271, 272, 276, 281, 294, 295, 305, 308, 309, 310, 319, 326, 333, 335, 336, 339, 351, 352, 353, 354, 355, 356, 357, 363, 364, 376, 384, 385, 388, 391, 392, 395, 398, 406, 409, 413, 419, 435, 437, 439, 440, 441, 444, 446, 448, 451, 456, 468, 472, 473, 478, 481, 486, 487, 488, 489, 490, 491, 493, 496, 498, 499, 502, 503, 505, 506, 507, 508, 509, 513, 514, 515, 516, 517, 518, 528, 530, 531, 532, 533, 534, 535, 537, 541, 547, 549, 552, 553, 554, 555, 556, 557, 560, 561, 562, 564, 565, 566, 567, 568, 570, 571, 572, 575, 577, 578, 579, 580, 581, 586, 587, 588, 593, 594, 600, 604, 608, 609, 610, 611, 612, 613, 614, 617, 619, 620, 626, 627, 628, 629, 630, 631, 635, 641, 643, 646, 649, 650, 654, 656, 657, 658, 659, 663, 667, 668, 675, 678, 680, 684, 686, 687, 697, 698, 700, 702, 703, 706, 708, 710, 713, 714, 717, 724, 726, 730, 734, 735, 741, 745, 757, 758, 760, 761, 762, 765, 766, 767, 771, 773, 775, 781, 782, 783, 784, 785, 786, 788, 790, 791, 795, 796, 800, 801, 805, 807, 809, 811, 812, 813, 815, 816, 817, 818, 819, 823, 824, 825, 827, 830, 831, 832, 833, 836, 841, 852, 853, 856, 862, 863, 872, 879, 885, 888, 890, 891, 892, 897, 900, 908, 909, 910, 911, 912, 913, 920, 921, 922, 933, 945, 946, 949, 952, 953, 956, 959, 967, 970, 975, 980, 981, 990, 992, 994, 999, 1003, 1005, 1006, 1008, 1009, 1015, 1017, 1019, 1020, 1031, 1035, 1036, 1041, 1044, 1049, 1050, 1051, 1052, 1053, 1054, 1056, 1059, 1062, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1074, 1075, 1077, 1078, 1081, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1096, 1097, 1099, 1100, 1102, 1105, 1106, 1107, 1110, 1111, 1113, 1114, 1115, 1116, 1118, 1119, 1120, 1121, 1122, 1127, 1128, 1130, 1134, 1135, 1141, 1145, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1158, 1160, 1161, 1167, 1168, 1169, 1170, 1175, 1176, 1182, 1183, 1188, 1189, 1191, 1192, 1195, 1197, 1199, 1200, 1201, 1203, 1204, 1206, 1207, 1208, 1209, 1219, 1226, 1227], "featur": [1, 45, 49, 51, 84, 295], "i": [1, 6, 17, 19, 22, 37, 39, 40, 41, 42, 43, 44, 49, 51, 58, 59, 60, 64, 69, 70, 79, 84, 85, 86, 87, 89, 91, 93, 94, 96, 100, 102, 104, 105, 106, 107, 108, 109, 110, 113, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 147, 149, 150, 151, 155, 156, 159, 162, 165, 167, 168, 170, 173, 177, 183, 184, 185, 186, 187, 188, 189, 190, 193, 194, 195, 197, 199, 201, 202, 203, 204, 205, 206, 207, 210, 213, 214, 218, 220, 221, 222, 229, 231, 232, 233, 234, 235, 238, 241, 244, 245, 246, 247, 249, 251, 256, 257, 260, 261, 262, 264, 265, 266, 267, 271, 273, 281, 294, 295, 302, 305, 307, 308, 309, 310, 320, 356, 357, 361, 362, 363, 365, 375, 388, 392, 395, 406, 414, 415, 416, 419, 423, 435, 437, 439, 441, 457, 463, 471, 472, 475, 476, 486, 491, 492, 496, 498, 502, 507, 509, 513, 516, 517, 518, 541, 549, 552, 554, 555, 556, 557, 560, 561, 563, 564, 565, 566, 567, 568, 570, 571, 572, 575, 576, 577, 578, 581, 582, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 600, 601, 602, 605, 606, 610, 612, 613, 614, 615, 617, 620, 621, 624, 626, 627, 628, 629, 632, 633, 634, 636, 638, 641, 659, 660, 663, 665, 668, 673, 675, 677, 678, 679, 680, 681, 684, 685, 689, 690, 692, 693, 698, 702, 703, 707, 710, 713, 714, 717, 721, 722, 723, 724, 726, 730, 732, 733, 734, 735, 741, 745, 760, 761, 765, 766, 767, 771, 773, 775, 778, 781, 782, 783, 784, 785, 786, 789, 790, 791, 793, 795, 796, 800, 801, 805, 809, 812, 813, 815, 817, 818, 819, 820, 824, 825, 827, 828, 831, 836, 841, 853, 856, 860, 861, 862, 863, 889, 892, 897, 900, 912, 913, 914, 917, 918, 920, 922, 932, 949, 953, 956, 967, 974, 975, 976, 977, 978, 980, 981, 985, 991, 992, 993, 994, 999, 1001, 1008, 1015, 1016, 1017, 1019, 1020, 1021, 1023, 1026, 1034, 1035, 1038, 1039, 1049, 1054, 1055, 1059, 1061, 1068, 1086, 1088, 1090, 1092, 1093, 1096, 1098, 1105, 1107, 1110, 1111, 1112, 1113, 1114, 1116, 1118, 1122, 1123, 1126, 1127, 1130, 1132, 1133, 1134, 1135, 1136, 1141, 1142, 1143, 1146, 1147, 1151, 1153, 1154, 1155, 1156, 1158, 1161, 1162, 1165, 1167, 1168, 1169, 1170, 1173, 1174, 1175, 1177, 1179, 1182, 1190, 1195, 1200, 1201, 1207, 1208, 1209, 1219, 1226, 1227], "primarili": 1, "intend": [1, 138, 139, 140, 141, 641, 1182], "us": [1, 12, 14, 16, 17, 19, 25, 30, 32, 37, 38, 40, 45, 48, 58, 60, 64, 65, 66, 67, 69, 70, 71, 79, 86, 87, 88, 89, 105, 107, 108, 110, 112, 115, 116, 117, 118, 119, 120, 121, 123, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 154, 155, 157, 163, 165, 171, 172, 173, 176, 183, 184, 185, 186, 187, 188, 196, 198, 200, 201, 202, 204, 207, 208, 210, 213, 215, 217, 218, 220, 221, 222, 231, 232, 233, 234, 235, 237, 238, 242, 245, 246, 247, 253, 254, 255, 256, 257, 261, 262, 264, 265, 266, 267, 270, 271, 274, 281, 295, 303, 305, 307, 309, 310, 320, 329, 330, 336, 340, 341, 356, 361, 362, 370, 374, 378, 380, 382, 387, 391, 392, 394, 395, 398, 406, 409, 411, 414, 415, 416, 417, 422, 423, 437, 440, 441, 457, 472, 486, 498, 507, 508, 509, 512, 541, 549, 552, 554, 557, 560, 561, 563, 564, 565, 566, 567, 568, 570, 571, 572, 575, 577, 579, 580, 585, 587, 588, 590, 592, 593, 596, 597, 598, 600, 601, 603, 604, 606, 607, 615, 617, 621, 623, 625, 628, 629, 630, 631, 632, 633, 634, 638, 641, 660, 663, 664, 665, 666, 668, 676, 677, 679, 680, 682, 683, 686, 687, 689, 690, 691, 692, 693, 694, 698, 700, 707, 710, 711, 712, 715, 716, 718, 721, 722, 723, 724, 726, 727, 728, 729, 732, 733, 734, 735, 736, 741, 744, 745, 756, 757, 760, 763, 766, 767, 770, 771, 775, 776, 777, 778, 781, 782, 783, 785, 786, 787, 791, 793, 794, 800, 809, 811, 812, 816, 819, 820, 825, 827, 828, 830, 831, 834, 841, 853, 856, 860, 861, 863, 881, 882, 890, 892, 898, 899, 912, 913, 917, 918, 927, 931, 938, 940, 943, 948, 952, 953, 955, 956, 959, 967, 970, 973, 976, 977, 978, 983, 984, 988, 991, 994, 997, 998, 999, 1005, 1008, 1015, 1017, 1019, 1021, 1035, 1049, 1061, 1067, 1068, 1086, 1088, 1090, 1093, 1096, 1098, 1110, 1111, 1114, 1116, 1119, 1120, 1126, 1130, 1133, 1134, 1137, 1138, 1141, 1142, 1144, 1145, 1147, 1148, 1156, 1158, 1162, 1164, 1173, 1174, 1175, 1179, 1182, 1191, 1196, 1198, 1199, 1200, 1201, 1208, 1209, 1219, 1226, 1227], "librari": [1, 97, 117, 120, 507, 745, 1227], "author": 1, "domain": [1, 601, 1142], "specif": [1, 35, 39, 40, 104, 106, 108, 110, 115, 118, 119, 120, 124, 125, 126, 130, 144, 145, 157, 201, 295, 395, 398, 632, 633, 634, 638, 763, 853, 856, 956, 959, 1173, 1174, 1175, 1179, 1219, 1227], "capabl": [1, 40, 295], "which": [1, 11, 15, 25, 36, 37, 39, 40, 41, 42, 43, 44, 45, 58, 59, 60, 70, 79, 80, 81, 82, 83, 107, 115, 116, 117, 118, 119, 120, 129, 130, 131, 138, 139, 146, 148, 156, 157, 165, 170, 171, 183, 184, 185, 186, 187, 188, 194, 204, 231, 256, 260, 262, 266, 295, 305, 388, 392, 395, 406, 420, 441, 443, 447, 450, 452, 453, 454, 498, 509, 518, 560, 561, 564, 565, 566, 567, 568, 570, 571, 572, 614, 636, 689, 690, 692, 693, 694, 732, 733, 735, 745, 761, 763, 771, 773, 782, 783, 785, 786, 791, 809, 813, 824, 825, 853, 949, 953, 956, 967, 981, 982, 998, 1002, 1007, 1011, 1012, 1013, 1014, 1061, 1096, 1114, 1155, 1177, 1200, 1219, 1227], "mai": [1, 39, 49, 51, 60, 86, 87, 104, 106, 107, 108, 110, 115, 117, 119, 121, 124, 125, 130, 131, 132, 133, 135, 138, 140, 162, 168, 170, 184, 204, 207, 231, 242, 257, 264, 265, 266, 295, 309, 356, 363, 364, 376, 388, 392, 406, 417, 437, 475, 496, 498, 507, 509, 517, 561, 564, 565, 566, 567, 568, 570, 571, 572, 579, 606, 680, 681, 684, 685, 689, 690, 692, 693, 698, 720, 732, 733, 745, 766, 767, 775, 782, 791, 795, 796, 809, 816, 827, 833, 836, 841, 853, 891, 892, 912, 914, 920, 921, 933, 949, 953, 967, 975, 981, 994, 1038, 1068, 1086, 1119, 1147, 1175, 1200, 1219, 1227], "exist": [1, 38, 39, 40, 79, 119, 130, 145, 261, 265, 270, 271, 295, 304, 328, 331, 332, 365, 508, 745, 807, 827, 830, 831, 853, 856, 922, 1067, 1219], "belong": [1, 184, 295, 782, 853], "core": [1, 257, 295, 1227], "cannot": [1, 115, 116, 120, 121, 126, 149, 207, 234, 235, 281, 295, 329, 417, 486, 509, 575, 596, 623, 644, 710, 745, 817, 841, 853, 881, 1049, 1068, 1110, 1137, 1164, 1219], "overrid": [1, 40, 104, 106, 107, 108, 109, 110, 115, 117, 118, 120, 124, 125, 126, 142, 143, 147, 149, 295, 508, 745, 853, 1067, 1219], "str": [1, 7, 8, 10, 11, 14, 15, 17, 20, 21, 22, 25, 26, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 51, 58, 59, 60, 64, 65, 66, 67, 68, 69, 79, 80, 81, 82, 83, 84, 104, 105, 106, 107, 108, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 142, 143, 145, 146, 147, 148, 151, 156, 157, 160, 162, 163, 164, 165, 166, 168, 169, 173, 174, 175, 176, 179, 180, 182, 183, 184, 185, 187, 188, 190, 192, 196, 198, 199, 201, 203, 204, 208, 210, 212, 213, 214, 215, 218, 220, 222, 224, 226, 227, 229, 230, 231, 232, 233, 235, 236, 239, 242, 244, 245, 246, 247, 249, 252, 253, 254, 255, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 295, 302, 303, 304, 328, 330, 331, 332, 335, 357, 360, 366, 388, 391, 392, 395, 398, 406, 417, 419, 423, 425, 429, 430, 433, 439, 441, 466, 467, 476, 477, 478, 492, 495, 498, 506, 509, 517, 519, 520, 522, 529, 530, 531, 532, 533, 538, 541, 545, 547, 549, 555, 556, 558, 560, 561, 564, 565, 566, 567, 568, 570, 571, 572, 580, 587, 588, 642, 643, 644, 646, 661, 662, 663, 664, 665, 666, 667, 668, 670, 671, 676, 678, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 706, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 719, 720, 721, 722, 723, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 741, 745, 752, 761, 763, 766, 767, 768, 769, 770, 771, 773, 774, 775, 778, 781, 782, 783, 785, 786, 788, 790, 791, 800, 801, 805, 807, 808, 809, 810, 813, 814, 816, 817, 818, 819, 824, 825, 826, 827, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 853, 856, 859, 886, 888, 913, 914, 923, 949, 952, 953, 956, 959, 967, 980, 984, 1030, 1031, 1032, 1041, 1061, 1077, 1078, 1086, 1091, 1092, 1111, 1114, 1115, 1183, 1186, 1196, 1197, 1198, 1207, 1219, 1223, 1226, 1227], "dt": [1, 79, 120, 126, 231, 295, 561, 694, 745, 754, 809, 853, 856, 1225], "attempt": [1, 256, 295], "do": [1, 40, 58, 59, 60, 79, 85, 86, 87, 115, 129, 138, 139, 140, 141, 170, 184, 185, 187, 188, 200, 204, 222, 231, 251, 261, 264, 295, 356, 472, 541, 561, 627, 628, 629, 718, 721, 736, 745, 766, 767, 773, 782, 783, 785, 786, 791, 795, 796, 805, 809, 817, 853, 856, 912, 981, 1035, 1168, 1169, 1170, 1209, 1219], "so": [1, 117, 118, 129, 149, 182, 184, 185, 187, 188, 222, 231, 295, 320, 441, 476, 498, 509, 561, 617, 627, 628, 629, 745, 782, 783, 785, 786, 809, 853, 1039, 1158, 1168, 1169, 1170], "rais": [1, 20, 21, 25, 39, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 115, 116, 120, 126, 129, 138, 140, 153, 222, 232, 295, 329, 391, 392, 406, 475, 496, 517, 549, 592, 596, 614, 632, 633, 634, 636, 638, 691, 707, 745, 881, 952, 953, 967, 1038, 1059, 1086, 1133, 1137, 1155, 1173, 1174, 1175, 1177, 1179, 1200, 1209, 1219], "an": [1, 35, 37, 38, 39, 40, 49, 51, 58, 59, 80, 82, 83, 85, 86, 89, 94, 95, 97, 104, 115, 116, 117, 118, 119, 120, 122, 126, 127, 129, 131, 132, 143, 145, 147, 157, 158, 159, 168, 171, 176, 184, 185, 187, 188, 200, 201, 202, 204, 207, 218, 222, 228, 229, 231, 232, 251, 256, 261, 264, 265, 270, 281, 295, 304, 325, 329, 334, 340, 341, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 365, 366, 388, 391, 395, 409, 420, 422, 423, 429, 430, 433, 456, 468, 469, 472, 475, 476, 496, 497, 498, 506, 507, 509, 518, 528, 529, 548, 549, 557, 560, 561, 562, 564, 565, 566, 567, 568, 570, 571, 572, 592, 596, 601, 603, 632, 633, 634, 636, 638, 649, 655, 663, 669, 673, 689, 690, 692, 693, 695, 697, 700, 704, 705, 706, 707, 718, 720, 721, 724, 727, 732, 733, 735, 736, 741, 745, 757, 763, 764, 765, 766, 767, 773, 775, 778, 782, 783, 785, 786, 791, 796, 805, 809, 817, 827, 830, 832, 841, 853, 856, 878, 881, 886, 896, 898, 899, 900, 904, 905, 906, 907, 908, 909, 910, 911, 912, 922, 956, 970, 975, 982, 1008, 1020, 1031, 1032, 1035, 1038, 1039, 1059, 1060, 1068, 1096, 1097, 1099, 1100, 1101, 1102, 1103, 1105, 1106, 1107, 1111, 1114, 1133, 1137, 1142, 1144, 1173, 1174, 1175, 1177, 1179, 1200, 1209, 1219, 1226], "attributeerror": 1, "howev": [1, 107, 117, 168, 207, 256, 295, 975, 1219], "can": [1, 19, 32, 40, 45, 48, 69, 70, 71, 79, 88, 89, 95, 105, 107, 115, 116, 117, 120, 121, 126, 127, 129, 132, 134, 135, 143, 144, 145, 147, 149, 151, 156, 158, 165, 166, 176, 183, 184, 185, 186, 187, 188, 196, 198, 200, 207, 218, 222, 231, 234, 237, 245, 256, 260, 261, 264, 270, 281, 295, 305, 309, 347, 350, 356, 384, 385, 388, 391, 406, 420, 441, 456, 472, 498, 509, 517, 525, 528, 530, 531, 532, 533, 541, 547, 549, 554, 561, 564, 565, 566, 567, 568, 570, 571, 572, 577, 580, 582, 585, 588, 593, 605, 617, 627, 628, 629, 632, 646, 672, 698, 700, 710, 735, 741, 744, 745, 756, 761, 766, 771, 773, 775, 782, 783, 785, 786, 809, 811, 813, 819, 824, 830, 833, 853, 856, 863, 892, 912, 913, 945, 946, 949, 952, 953, 967, 982, 998, 1035, 1061, 1068, 1073, 1086, 1090, 1092, 1111, 1114, 1116, 1120, 1123, 1126, 1134, 1135, 1136, 1143, 1146, 1158, 1168, 1169, 1170, 1173, 1175, 1200, 1219, 1226], "other": [1, 25, 40, 45, 69, 86, 115, 116, 117, 129, 138, 139, 140, 141, 165, 167, 170, 177, 203, 204, 213, 214, 232, 234, 237, 238, 265, 268, 270, 271, 293, 295, 302, 306, 308, 320, 339, 360, 412, 413, 427, 432, 434, 441, 446, 459, 466, 487, 488, 489, 490, 504, 513, 516, 524, 526, 536, 537, 540, 556, 588, 645, 653, 655, 662, 664, 666, 674, 675, 676, 683, 687, 689, 712, 716, 724, 727, 729, 745, 757, 767, 771, 790, 791, 800, 801, 811, 812, 827, 830, 831, 832, 853, 856, 862, 897, 916, 974, 981, 1006, 1029, 1050, 1051, 1052, 1053, 1092, 1113, 1202, 1210, 1218, 1219], "onli": [1, 15, 18, 25, 35, 37, 40, 58, 64, 66, 70, 79, 84, 87, 89, 115, 116, 119, 121, 123, 127, 129, 130, 132, 133, 134, 135, 138, 139, 140, 141, 145, 147, 151, 154, 165, 170, 184, 187, 189, 201, 203, 204, 207, 208, 210, 215, 222, 231, 233, 234, 247, 253, 255, 256, 265, 266, 281, 295, 303, 305, 307, 309, 320, 338, 339, 388, 396, 417, 426, 435, 456, 509, 528, 530, 531, 532, 533, 541, 547, 554, 564, 565, 566, 567, 568, 570, 571, 572, 593, 617, 646, 657, 689, 690, 710, 745, 766, 771, 782, 783, 785, 786, 787, 790, 791, 794, 809, 827, 841, 853, 860, 861, 862, 894, 897, 913, 949, 981, 987, 992, 1008, 1068, 1086, 1090, 1134, 1158, 1195, 1198, 1219, 1226, 1227], "gener": [1, 117, 118, 136, 142, 143, 144, 145, 147, 153, 161, 222, 235, 254, 256, 261, 295, 486, 575, 581, 669, 689, 692, 704, 705, 721, 732, 733, 745, 853, 1049, 1110, 1122, 1196, 1219, 1227], "userwarn": 1, "pl": [1, 2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 79, 80, 81, 82, 83, 87, 88, 89, 104, 105, 106, 107, 108, 109, 110, 111, 113, 115, 116, 117, 118, 119, 120, 121, 126, 129, 130, 131, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 151, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 176, 178, 179, 180, 181, 182, 183, 184, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 240, 241, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 295, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 369, 371, 372, 373, 375, 376, 377, 381, 383, 384, 385, 388, 389, 390, 391, 392, 393, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 612, 613, 615, 616, 617, 618, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 689, 690, 692, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 724, 725, 726, 727, 728, 729, 730, 732, 733, 734, 735, 736, 741, 745, 758, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 787, 788, 789, 790, 791, 792, 793, 794, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 815, 817, 818, 819, 820, 821, 822, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 853, 856, 859, 860, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 885, 886, 888, 889, 891, 892, 893, 894, 895, 896, 897, 900, 901, 902, 903, 904, 905, 906, 907, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 924, 925, 926, 928, 929, 930, 932, 933, 934, 935, 936, 937, 939, 941, 942, 944, 945, 946, 947, 949, 950, 951, 952, 953, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 973, 974, 975, 976, 977, 978, 981, 982, 983, 984, 985, 987, 988, 989, 992, 993, 994, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1019, 1020, 1022, 1025, 1026, 1033, 1034, 1035, 1036, 1040, 1041, 1043, 1049, 1050, 1051, 1053, 1054, 1055, 1056, 1058, 1060, 1061, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1080, 1082, 1083, 1084, 1086, 1087, 1088, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1113, 1114, 1116, 1118, 1122, 1123, 1124, 1125, 1127, 1128, 1129, 1130, 1132, 1133, 1134, 1136, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1146, 1147, 1148, 1153, 1154, 1156, 1157, 1158, 1159, 1162, 1164, 1165, 1166, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1188, 1189, 1190, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1210, 1219, 1226, 1227], "register_expr_namespac": [1, 80, 82, 83], "greet": 1, "def": [1, 70, 80, 81, 82, 83, 143, 144, 145, 147, 151, 221, 261, 295, 302, 545, 601, 629, 662, 709, 745, 767, 804, 853, 856, 1142, 1227], "__init__": [1, 2, 3, 4, 5, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 61, 62, 63, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 142, 1226], "self": [1, 65, 66, 67, 69, 80, 81, 82, 83, 85, 86, 158, 159, 162, 170, 190, 192, 193, 194, 206, 208, 210, 212, 213, 215, 219, 220, 222, 224, 225, 227, 228, 229, 235, 243, 244, 246, 247, 249, 254, 261, 263, 266, 267, 268, 272, 273, 295, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 327, 333, 334, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 523, 524, 525, 526, 527, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 741, 745, 760, 761, 762, 763, 765, 766, 767, 769, 770, 771, 773, 774, 775, 776, 777, 778, 779, 780, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 808, 811, 812, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 832, 833, 853, 862, 863, 886, 900, 981, 985, 995, 1066, 1067, 1068, 1079, 1083, 1084, 1089, 1092, 1111, 1114, 1116, 1128, 1206, 1210, 1219], "_expr": [1, 81], "hello": [1, 25, 65, 68, 627, 628, 629, 1041, 1168, 1169, 1170], "return": [1, 10, 11, 35, 37, 38, 39, 40, 41, 42, 43, 44, 58, 59, 60, 64, 68, 70, 79, 80, 81, 82, 83, 84, 85, 86, 96, 98, 103, 104, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 144, 154, 156, 158, 161, 164, 166, 168, 169, 170, 171, 172, 175, 176, 178, 179, 182, 183, 184, 186, 187, 190, 192, 199, 200, 201, 202, 203, 205, 206, 207, 209, 211, 216, 217, 218, 220, 221, 222, 231, 232, 233, 234, 235, 248, 249, 250, 256, 257, 260, 261, 262, 266, 270, 271, 277, 279, 281, 284, 289, 295, 305, 307, 311, 312, 313, 314, 315, 316, 319, 320, 325, 328, 330, 331, 332, 333, 342, 343, 344, 345, 357, 358, 363, 367, 368, 369, 371, 373, 375, 376, 377, 379, 381, 383, 384, 385, 386, 388, 389, 390, 392, 393, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 419, 430, 431, 433, 436, 437, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 460, 461, 464, 465, 467, 473, 475, 476, 477, 478, 480, 481, 486, 495, 496, 497, 503, 508, 518, 520, 525, 545, 549, 551, 555, 556, 557, 559, 575, 576, 582, 583, 584, 591, 594, 595, 597, 599, 600, 601, 602, 605, 606, 607, 608, 609, 611, 612, 613, 618, 619, 621, 622, 623, 624, 636, 641, 648, 650, 651, 652, 654, 655, 657, 658, 659, 662, 663, 667, 669, 670, 671, 672, 673, 678, 688, 689, 690, 691, 692, 693, 694, 697, 700, 702, 704, 705, 706, 707, 708, 709, 710, 718, 721, 724, 727, 730, 731, 732, 733, 735, 736, 745, 761, 764, 766, 767, 772, 773, 775, 780, 782, 783, 785, 786, 787, 790, 793, 794, 796, 804, 805, 809, 813, 817, 822, 823, 824, 825, 830, 831, 837, 839, 844, 849, 853, 860, 861, 862, 870, 871, 873, 874, 878, 880, 882, 885, 889, 892, 896, 913, 914, 920, 924, 925, 926, 928, 930, 932, 933, 934, 935, 936, 937, 939, 941, 942, 944, 945, 946, 947, 949, 950, 951, 953, 954, 957, 958, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 971, 974, 975, 980, 981, 989, 991, 993, 994, 1000, 1002, 1003, 1004, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1018, 1020, 1022, 1023, 1027, 1028, 1030, 1036, 1038, 1039, 1040, 1041, 1043, 1044, 1049, 1058, 1059, 1060, 1066, 1067, 1068, 1073, 1080, 1086, 1092, 1093, 1094, 1095, 1096, 1110, 1112, 1113, 1123, 1132, 1133, 1135, 1136, 1138, 1140, 1141, 1142, 1143, 1146, 1147, 1148, 1149, 1150, 1152, 1153, 1154, 1159, 1160, 1162, 1163, 1164, 1165, 1177, 1182, 1190, 1192, 1203, 1205, 1206, 1207, 1210, 1219, 1226, 1227], "lit": [1, 304, 328, 441, 456, 528, 680, 684, 698, 718, 721, 736, 745, 984, 1219], "alia": [1, 17, 79, 81, 83, 184, 206, 222, 231, 263, 270, 295, 302, 306, 328, 330, 331, 332, 333, 346, 347, 348, 349, 350, 357, 359, 363, 364, 365, 366, 369, 371, 372, 373, 376, 377, 381, 383, 388, 389, 390, 391, 392, 393, 395, 397, 398, 399, 400, 403, 405, 406, 407, 408, 409, 410, 412, 413, 425, 427, 432, 434, 439, 441, 445, 449, 456, 459, 461, 504, 509, 513, 514, 515, 516, 518, 521, 524, 526, 528, 536, 537, 540, 542, 546, 549, 552, 554, 574, 576, 592, 593, 595, 598, 600, 601, 606, 607, 617, 618, 621, 622, 623, 624, 625, 630, 631, 642, 643, 644, 645, 653, 654, 655, 661, 662, 669, 670, 671, 674, 675, 676, 694, 695, 698, 699, 709, 710, 720, 727, 735, 745, 782, 788, 794, 809, 826, 830, 853, 913, 921, 923, 929, 949, 952, 956, 958, 1023, 1035, 1086, 1091, 1141, 1142, 1164, 1165, 1219], "hi": 1, "goodby": 1, "say\u014dnara": 1, "bye": 1, "world": [1, 25, 65, 68, 593, 617, 627, 628, 629, 639, 1041, 1134, 1158, 1168, 1169, 1170, 1180], "select": [1, 13, 38, 64, 65, 66, 79, 80, 81, 82, 114, 115, 116, 117, 118, 119, 121, 123, 127, 129, 135, 144, 199, 200, 204, 207, 218, 221, 232, 238, 244, 258, 263, 266, 295, 301, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 331, 332, 333, 335, 337, 338, 342, 343, 344, 345, 356, 358, 359, 360, 361, 362, 364, 365, 366, 375, 376, 377, 384, 385, 388, 391, 399, 400, 401, 402, 403, 404, 405, 406, 409, 410, 411, 414, 415, 416, 417, 418, 419, 420, 424, 426, 428, 431, 435, 437, 438, 439, 440, 442, 443, 447, 455, 456, 457, 458, 460, 472, 473, 498, 500, 501, 502, 503, 507, 509, 510, 511, 512, 523, 525, 527, 528, 534, 535, 538, 539, 540, 543, 544, 548, 550, 551, 552, 553, 554, 555, 557, 558, 559, 563, 569, 573, 575, 576, 577, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 599, 600, 601, 602, 632, 642, 644, 647, 651, 652, 654, 656, 657, 658, 659, 660, 663, 665, 668, 670, 671, 672, 673, 675, 677, 678, 679, 682, 694, 696, 697, 698, 699, 700, 702, 706, 711, 713, 714, 715, 717, 720, 721, 725, 726, 727, 728, 730, 734, 741, 745, 768, 791, 804, 812, 813, 818, 826, 832, 853, 856, 877, 879, 952, 988, 1025, 1026, 1035, 1111, 1114, 1127, 1146, 1173, 1191, 1219, 1226], "shape": [1, 2, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 32, 33, 61, 64, 65, 66, 68, 70, 71, 79, 80, 81, 82, 83, 87, 88, 89, 101, 104, 105, 106, 107, 108, 109, 110, 111, 129, 135, 145, 147, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 169, 170, 171, 172, 173, 176, 178, 179, 181, 183, 184, 189, 190, 192, 194, 195, 196, 198, 199, 200, 203, 204, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 226, 227, 229, 230, 231, 235, 237, 241, 244, 245, 246, 247, 248, 249, 252, 254, 255, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 295, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 369, 371, 372, 373, 375, 376, 377, 381, 383, 384, 385, 388, 389, 390, 391, 392, 393, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 509, 510, 511, 512, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 612, 613, 615, 616, 617, 618, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 689, 690, 692, 694, 695, 696, 697, 698, 699, 700, 702, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 720, 721, 724, 725, 726, 727, 728, 729, 730, 732, 733, 734, 735, 736, 741, 745, 760, 761, 763, 764, 766, 767, 769, 770, 771, 774, 775, 776, 777, 778, 779, 780, 781, 782, 787, 789, 790, 791, 792, 794, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 813, 815, 818, 819, 820, 821, 822, 824, 825, 826, 827, 828, 830, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 853, 856, 859, 862, 864, 865, 866, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 879, 885, 886, 888, 891, 893, 894, 896, 897, 900, 901, 902, 903, 904, 905, 906, 907, 912, 913, 914, 915, 917, 918, 920, 921, 922, 923, 924, 925, 926, 928, 929, 930, 932, 933, 936, 937, 939, 942, 944, 945, 946, 947, 949, 950, 951, 952, 953, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 976, 977, 978, 981, 982, 983, 984, 985, 987, 988, 989, 992, 993, 994, 997, 998, 1000, 1002, 1004, 1006, 1007, 1010, 1011, 1012, 1013, 1014, 1018, 1020, 1025, 1026, 1033, 1034, 1035, 1036, 1040, 1041, 1043, 1049, 1050, 1051, 1053, 1054, 1055, 1056, 1058, 1060, 1061, 1066, 1068, 1073, 1080, 1082, 1083, 1084, 1086, 1088, 1091, 1092, 1093, 1094, 1095, 1096, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1114, 1118, 1122, 1123, 1124, 1125, 1127, 1128, 1129, 1132, 1133, 1134, 1136, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1146, 1147, 1148, 1153, 1154, 1156, 1157, 1158, 1159, 1162, 1164, 1165, 1166, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1188, 1190, 1193, 1194, 1196, 1197, 1198, 1202, 1203, 1204, 1205, 1206, 1207, 1210, 1219, 1226], "3": [1, 2, 12, 13, 14, 15, 16, 18, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 32, 36, 37, 39, 40, 41, 42, 43, 44, 45, 61, 64, 66, 67, 69, 79, 80, 81, 82, 83, 87, 89, 104, 105, 106, 107, 108, 109, 110, 111, 118, 120, 126, 129, 135, 137, 138, 139, 140, 141, 144, 145, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 173, 176, 178, 179, 180, 181, 182, 183, 184, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 240, 241, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 295, 302, 303, 304, 305, 307, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 337, 338, 345, 346, 347, 348, 349, 350, 356, 357, 359, 360, 361, 362, 364, 365, 366, 372, 373, 375, 376, 381, 383, 388, 390, 391, 392, 393, 395, 397, 398, 399, 406, 407, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 455, 456, 457, 459, 460, 461, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 500, 501, 502, 503, 504, 506, 509, 524, 525, 526, 528, 529, 530, 531, 532, 533, 536, 538, 539, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 580, 581, 585, 587, 588, 589, 592, 593, 594, 597, 598, 600, 601, 602, 603, 606, 607, 610, 615, 617, 618, 620, 621, 622, 623, 624, 625, 626, 633, 638, 642, 643, 644, 645, 646, 648, 654, 657, 658, 659, 661, 662, 669, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 702, 704, 705, 706, 707, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 721, 724, 725, 726, 727, 728, 729, 730, 732, 733, 734, 735, 736, 741, 745, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 778, 779, 780, 781, 782, 787, 788, 789, 790, 791, 792, 793, 794, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 815, 817, 818, 819, 820, 821, 822, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 853, 856, 859, 862, 864, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 885, 886, 888, 891, 893, 894, 895, 900, 901, 902, 903, 904, 905, 906, 907, 912, 913, 914, 915, 916, 917, 918, 921, 922, 923, 926, 929, 930, 932, 934, 935, 936, 941, 942, 944, 950, 952, 953, 954, 956, 958, 959, 960, 962, 963, 965, 967, 969, 970, 974, 975, 976, 977, 978, 981, 982, 983, 984, 985, 987, 988, 989, 992, 993, 994, 997, 998, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1021, 1022, 1031, 1033, 1034, 1035, 1036, 1040, 1043, 1049, 1050, 1051, 1053, 1054, 1055, 1056, 1058, 1060, 1061, 1066, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1080, 1082, 1083, 1084, 1086, 1087, 1088, 1091, 1092, 1093, 1094, 1095, 1096, 1098, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1114, 1116, 1118, 1122, 1124, 1125, 1126, 1127, 1128, 1130, 1134, 1135, 1138, 1139, 1141, 1142, 1143, 1144, 1147, 1148, 1151, 1156, 1158, 1159, 1161, 1162, 1166, 1167, 1174, 1179, 1188, 1189, 1190, 1193, 1194, 1195, 1196, 1199, 1200, 1201, 1203, 1204, 1205, 1206, 1207, 1208, 1210, 1219, 1226, 1227], "1": [1, 2, 12, 13, 14, 16, 17, 18, 20, 22, 23, 24, 26, 27, 28, 29, 30, 32, 33, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 60, 61, 64, 65, 66, 67, 68, 69, 71, 79, 80, 81, 82, 83, 87, 104, 105, 106, 107, 108, 109, 110, 111, 115, 116, 119, 120, 121, 126, 129, 130, 131, 134, 135, 137, 138, 139, 140, 141, 142, 145, 147, 153, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 176, 178, 179, 180, 181, 182, 183, 184, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 240, 241, 242, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 295, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 333, 334, 335, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 369, 372, 373, 375, 376, 377, 381, 383, 384, 385, 388, 389, 390, 391, 392, 393, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 449, 450, 452, 453, 454, 455, 456, 457, 458, 460, 461, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 509, 510, 511, 512, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 598, 599, 600, 601, 602, 603, 605, 606, 607, 615, 616, 623, 624, 625, 627, 628, 629, 641, 642, 643, 644, 645, 646, 647, 648, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 668, 669, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 704, 705, 706, 707, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 722, 723, 724, 725, 726, 727, 728, 729, 730, 732, 733, 734, 735, 741, 745, 760, 761, 763, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 787, 788, 789, 790, 791, 792, 794, 797, 798, 799, 800, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 815, 816, 817, 818, 819, 820, 821, 822, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 853, 856, 859, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 885, 886, 891, 893, 894, 895, 897, 900, 901, 902, 904, 905, 906, 907, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 924, 925, 926, 929, 930, 932, 933, 934, 935, 936, 937, 939, 941, 942, 944, 945, 946, 947, 949, 950, 951, 952, 953, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 973, 974, 976, 977, 978, 981, 982, 983, 984, 985, 987, 988, 989, 992, 993, 994, 997, 998, 1000, 1002, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1020, 1022, 1025, 1026, 1033, 1034, 1035, 1036, 1039, 1040, 1043, 1049, 1050, 1051, 1053, 1054, 1055, 1056, 1058, 1060, 1061, 1066, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1082, 1083, 1084, 1086, 1087, 1088, 1091, 1092, 1093, 1094, 1095, 1096, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1110, 1111, 1112, 1114, 1116, 1118, 1119, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1132, 1141, 1143, 1144, 1146, 1147, 1148, 1156, 1164, 1165, 1182, 1188, 1189, 1190, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1210, 1219, 1226, 1227], "2": [1, 2, 12, 13, 15, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 36, 37, 39, 40, 41, 42, 43, 44, 45, 61, 64, 66, 67, 69, 71, 79, 80, 81, 82, 83, 87, 104, 105, 106, 107, 108, 109, 110, 111, 118, 129, 135, 136, 137, 138, 139, 140, 141, 144, 145, 147, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 176, 178, 179, 180, 181, 182, 183, 184, 190, 191, 192, 194, 196, 197, 198, 199, 200, 201, 203, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 240, 241, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 295, 301, 302, 303, 304, 306, 308, 310, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 333, 334, 337, 338, 339, 344, 345, 346, 347, 348, 349, 350, 356, 357, 359, 360, 363, 365, 366, 369, 371, 373, 377, 381, 383, 384, 385, 388, 389, 390, 391, 392, 393, 395, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 509, 520, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 580, 581, 585, 586, 587, 588, 589, 591, 593, 595, 597, 598, 600, 602, 603, 605, 606, 607, 612, 613, 615, 616, 617, 618, 621, 623, 624, 625, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 645, 646, 648, 651, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 689, 690, 694, 695, 696, 697, 698, 699, 700, 702, 704, 705, 706, 707, 709, 710, 711, 713, 714, 715, 717, 720, 724, 725, 726, 727, 728, 730, 733, 734, 735, 741, 745, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 787, 788, 790, 792, 793, 794, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 808, 809, 810, 811, 813, 815, 817, 818, 819, 820, 821, 822, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 853, 856, 859, 862, 865, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 885, 891, 893, 894, 895, 896, 900, 901, 903, 905, 906, 907, 912, 913, 914, 915, 916, 920, 922, 924, 925, 928, 930, 934, 935, 936, 941, 942, 944, 945, 946, 951, 952, 953, 957, 967, 969, 970, 971, 973, 974, 975, 976, 977, 978, 981, 982, 983, 984, 985, 987, 988, 989, 992, 993, 994, 997, 998, 1000, 1002, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1022, 1033, 1034, 1035, 1036, 1040, 1041, 1043, 1049, 1050, 1051, 1053, 1054, 1055, 1056, 1058, 1060, 1061, 1063, 1066, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1082, 1083, 1084, 1086, 1087, 1088, 1091, 1092, 1093, 1094, 1095, 1096, 1098, 1099, 1100, 1101, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1114, 1116, 1118, 1122, 1124, 1126, 1127, 1128, 1129, 1130, 1132, 1136, 1141, 1143, 1144, 1146, 1148, 1156, 1157, 1164, 1165, 1168, 1169, 1170, 1173, 1175, 1176, 1177, 1178, 1180, 1181, 1188, 1189, 1190, 1193, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1203, 1204, 1205, 1206, 1207, 1208, 1210, 1219, 1226, 1227], "column_0": [1, 207, 261, 295], "register_dataframe_namespac": [1, 81, 82, 83], "split": [1, 40, 80, 202, 295, 623, 624, 1164, 1165], "splitfram": [1, 80], "df": [1, 12, 13, 14, 15, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 36, 37, 39, 40, 41, 42, 43, 44, 45, 61, 64, 65, 80, 81, 104, 105, 106, 107, 108, 109, 110, 111, 116, 117, 118, 129, 143, 145, 151, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 171, 172, 173, 176, 179, 180, 181, 182, 183, 184, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 240, 241, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 269, 270, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 295, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 333, 334, 335, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 369, 371, 372, 373, 375, 376, 377, 381, 383, 384, 385, 388, 389, 390, 391, 392, 393, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 509, 510, 511, 512, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 612, 613, 615, 616, 617, 618, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 635, 636, 637, 639, 640, 641, 642, 644, 645, 646, 647, 648, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 690, 694, 695, 696, 697, 698, 699, 700, 702, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 717, 720, 724, 725, 726, 727, 728, 729, 730, 733, 734, 735, 741, 745, 782, 809, 813, 826, 827, 839, 841, 849, 853, 856, 877, 879, 952, 1025, 1026, 1035, 1146, 1157, 1164, 1165, 1197, 1219, 1227], "_df": [1, 80], "by_alternate_row": 1, "list": [1, 2, 18, 39, 40, 48, 51, 64, 68, 71, 79, 80, 82, 85, 86, 104, 106, 107, 108, 110, 111, 113, 114, 115, 116, 118, 119, 120, 121, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 143, 144, 145, 147, 160, 163, 166, 168, 169, 173, 181, 183, 184, 192, 201, 217, 220, 232, 233, 234, 237, 245, 252, 253, 261, 262, 263, 264, 270, 274, 275, 295, 303, 325, 326, 357, 419, 425, 430, 438, 446, 505, 507, 509, 518, 519, 541, 549, 555, 557, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 587, 588, 601, 622, 642, 644, 649, 653, 672, 675, 690, 693, 695, 703, 705, 707, 710, 725, 727, 733, 745, 768, 772, 774, 778, 781, 782, 811, 819, 825, 826, 830, 832, 834, 835, 853, 856, 878, 879, 895, 913, 975, 980, 985, 988, 990, 994, 995, 1006, 1086, 1093, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1105, 1106, 1107, 1112, 1134, 1142, 1158, 1163, 1191, 1199, 1202, 1219, 1227], "with_row_count": [1, 295, 564, 565, 567, 570, 571, 572, 745, 853, 1111, 1219], "name": [1, 23, 27, 29, 36, 37, 38, 40, 43, 58, 65, 66, 67, 68, 69, 71, 80, 81, 82, 83, 87, 93, 104, 106, 107, 108, 109, 110, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 140, 141, 142, 143, 145, 146, 147, 148, 156, 157, 160, 163, 164, 165, 169, 173, 174, 175, 179, 180, 182, 183, 186, 199, 200, 201, 203, 204, 207, 209, 211, 213, 214, 216, 220, 222, 226, 232, 233, 234, 236, 237, 238, 245, 248, 252, 254, 256, 259, 260, 261, 262, 263, 264, 265, 270, 271, 272, 273, 274, 295, 304, 309, 328, 330, 331, 332, 357, 417, 441, 450, 452, 453, 454, 456, 498, 506, 509, 517, 519, 521, 541, 547, 549, 558, 588, 601, 602, 642, 644, 646, 663, 664, 665, 666, 668, 670, 671, 672, 674, 675, 676, 677, 678, 679, 682, 683, 686, 687, 696, 697, 702, 703, 706, 711, 712, 713, 715, 716, 717, 719, 722, 723, 724, 726, 727, 728, 729, 730, 734, 735, 741, 745, 761, 763, 768, 770, 771, 774, 778, 781, 784, 790, 791, 800, 801, 807, 810, 811, 812, 813, 819, 824, 825, 826, 827, 830, 831, 832, 833, 834, 853, 856, 859, 896, 913, 1061, 1086, 1091, 1141, 1142, 1143, 1156, 1183, 1186, 1196, 1197, 1201, 1219, 1226, 1227], "n": [1, 17, 18, 22, 30, 37, 44, 48, 50, 58, 66, 67, 80, 81, 82, 83, 113, 115, 116, 129, 154, 158, 170, 178, 184, 190, 201, 202, 206, 207, 233, 234, 235, 241, 242, 246, 249, 250, 253, 255, 267, 279, 289, 295, 333, 356, 359, 364, 365, 372, 397, 409, 420, 431, 436, 461, 470, 477, 486, 487, 491, 495, 498, 542, 545, 555, 570, 572, 575, 578, 579, 585, 590, 606, 607, 615, 623, 624, 627, 628, 634, 648, 650, 654, 655, 660, 662, 677, 679, 689, 690, 691, 692, 693, 694, 700, 702, 718, 721, 722, 723, 726, 730, 734, 736, 745, 764, 766, 780, 782, 787, 794, 815, 816, 820, 822, 823, 828, 839, 849, 853, 856, 885, 896, 912, 915, 921, 922, 929, 958, 970, 981, 982, 989, 993, 1023, 1033, 1040, 1049, 1050, 1054, 1058, 1061, 1082, 1105, 1107, 1110, 1118, 1119, 1126, 1130, 1147, 1148, 1156, 1164, 1165, 1175, 1190, 1192, 1198, 1203, 1208, 1219, 1226, 1227], "filter": [1, 80, 119, 129, 130, 135, 165, 196, 197, 198, 203, 222, 281, 295, 517, 519, 598, 625, 661, 698, 735, 745, 771, 775, 788, 790, 841, 853, 856, 1114, 1219], "col": [1, 17, 37, 40, 58, 79, 80, 81, 82, 108, 110, 129, 143, 145, 173, 183, 184, 197, 199, 205, 207, 218, 221, 222, 231, 232, 237, 245, 263, 264, 270, 274, 295, 301, 302, 303, 304, 305, 306, 307, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 330, 331, 332, 333, 334, 335, 337, 338, 339, 342, 343, 344, 346, 347, 348, 349, 350, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 369, 371, 372, 373, 375, 376, 377, 381, 383, 384, 385, 388, 389, 390, 391, 392, 393, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 430, 431, 432, 433, 434, 437, 439, 440, 441, 442, 445, 446, 449, 450, 452, 455, 456, 457, 458, 459, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 504, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 524, 526, 527, 528, 534, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 559, 560, 561, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 581, 582, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 595, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 612, 613, 615, 616, 617, 618, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 635, 636, 637, 639, 640, 641, 642, 643, 644, 645, 647, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 673, 674, 675, 676, 678, 682, 694, 697, 698, 699, 700, 701, 702, 703, 706, 711, 713, 714, 715, 717, 719, 720, 726, 728, 730, 734, 735, 745, 765, 778, 781, 782, 788, 793, 804, 809, 811, 819, 826, 830, 832, 834, 853, 856, 877, 879, 949, 952, 1025, 1026, 1035, 1093, 1111, 1114, 1146, 1173, 1219, 1227], "0": [1, 12, 14, 16, 18, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 40, 45, 49, 60, 61, 64, 69, 79, 80, 81, 83, 87, 89, 105, 115, 116, 117, 118, 120, 121, 123, 126, 127, 129, 132, 133, 134, 135, 137, 142, 143, 144, 145, 147, 153, 154, 157, 158, 159, 161, 162, 163, 166, 167, 171, 172, 174, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 193, 194, 195, 199, 201, 202, 203, 205, 207, 208, 209, 210, 211, 212, 215, 216, 217, 218, 219, 222, 223, 224, 228, 229, 233, 234, 235, 236, 237, 242, 244, 245, 246, 247, 248, 250, 254, 255, 256, 257, 258, 261, 264, 266, 267, 270, 272, 274, 276, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 295, 301, 303, 304, 306, 309, 311, 312, 313, 314, 315, 316, 319, 320, 321, 334, 337, 338, 340, 341, 342, 343, 344, 346, 351, 352, 353, 354, 355, 356, 357, 358, 361, 362, 370, 373, 374, 377, 378, 380, 381, 382, 387, 391, 393, 394, 401, 402, 404, 405, 406, 412, 413, 414, 415, 416, 418, 420, 421, 422, 423, 426, 427, 432, 434, 435, 437, 440, 443, 444, 447, 448, 450, 451, 452, 453, 454, 456, 457, 459, 464, 465, 468, 469, 472, 475, 476, 481, 483, 496, 498, 500, 501, 502, 504, 505, 506, 507, 508, 510, 511, 512, 518, 523, 524, 526, 528, 534, 535, 536, 537, 539, 540, 542, 545, 546, 547, 549, 550, 551, 552, 556, 560, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 579, 580, 582, 583, 584, 585, 589, 590, 594, 595, 600, 601, 604, 608, 609, 610, 611, 614, 619, 620, 626, 632, 634, 645, 646, 647, 649, 650, 651, 652, 653, 655, 660, 661, 663, 667, 669, 670, 671, 672, 673, 674, 675, 677, 679, 680, 684, 686, 687, 689, 691, 695, 698, 704, 705, 708, 710, 713, 714, 718, 719, 720, 725, 731, 732, 733, 734, 735, 736, 741, 745, 763, 764, 765, 770, 772, 776, 777, 781, 782, 783, 784, 785, 786, 789, 790, 793, 795, 796, 799, 803, 805, 806, 810, 811, 816, 817, 819, 820, 823, 828, 830, 832, 833, 834, 836, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 853, 856, 863, 864, 865, 866, 867, 868, 869, 870, 872, 874, 886, 891, 893, 894, 896, 898, 899, 901, 902, 903, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 927, 930, 931, 935, 936, 937, 938, 939, 940, 942, 943, 947, 948, 952, 953, 954, 955, 962, 963, 965, 966, 967, 973, 976, 977, 978, 983, 987, 992, 994, 997, 999, 1002, 1003, 1005, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1017, 1019, 1020, 1021, 1031, 1035, 1039, 1044, 1059, 1061, 1066, 1067, 1070, 1071, 1082, 1086, 1087, 1088, 1092, 1096, 1097, 1098, 1100, 1101, 1103, 1104, 1105, 1107, 1108, 1109, 1110, 1113, 1115, 1119, 1123, 1124, 1125, 1129, 1130, 1135, 1136, 1141, 1142, 1145, 1146, 1149, 1150, 1151, 1152, 1155, 1160, 1161, 1167, 1173, 1175, 1191, 1192, 1193, 1194, 1196, 1201, 1202, 1206, 1208, 1209, 1219, 1227], "drop": [1, 107, 164, 165, 207, 262, 270, 295, 359, 361, 362, 470, 471, 549, 745, 771, 825, 830, 853, 915, 917, 918, 1033, 1034, 1086, 1219], "aaa": [1, 40, 295, 592, 642, 644, 1133], "bbb": [1, 40, 295, 642, 644, 856], "ccc": [1, 40, 295, 642, 644], "ddd": [1, 40, 295, 642, 644], "eee": [1, 40, 295, 856], "fff": 1, "column": [1, 15, 21, 22, 23, 26, 27, 29, 39, 40, 43, 48, 70, 71, 79, 80, 87, 89, 91, 93, 104, 105, 106, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 138, 139, 140, 141, 145, 156, 157, 161, 163, 164, 165, 166, 169, 173, 174, 175, 179, 180, 182, 183, 184, 185, 186, 187, 188, 192, 193, 194, 199, 200, 201, 203, 204, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 245, 246, 247, 248, 252, 254, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 270, 271, 272, 274, 295, 304, 305, 307, 319, 325, 339, 345, 357, 365, 367, 368, 369, 373, 375, 376, 377, 379, 381, 383, 386, 389, 390, 393, 395, 396, 398, 407, 408, 410, 417, 419, 423, 425, 437, 441, 456, 460, 466, 473, 475, 493, 496, 497, 498, 508, 509, 515, 517, 519, 528, 530, 531, 532, 533, 541, 547, 549, 553, 555, 557, 561, 564, 565, 566, 567, 568, 570, 571, 572, 580, 587, 588, 591, 599, 623, 624, 632, 633, 634, 635, 636, 638, 643, 646, 661, 663, 664, 665, 666, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 696, 697, 698, 700, 701, 702, 703, 704, 705, 706, 708, 709, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 741, 745, 761, 763, 770, 771, 772, 774, 778, 781, 782, 783, 784, 785, 786, 790, 791, 796, 797, 798, 799, 800, 802, 803, 804, 806, 807, 809, 810, 811, 812, 813, 814, 819, 820, 821, 824, 825, 826, 827, 828, 830, 831, 832, 833, 834, 841, 853, 856, 860, 861, 878, 889, 891, 897, 913, 924, 925, 926, 930, 932, 933, 937, 939, 942, 944, 947, 950, 951, 954, 956, 957, 959, 968, 969, 971, 980, 991, 994, 1029, 1036, 1038, 1056, 1060, 1086, 1093, 1120, 1132, 1140, 1164, 1165, 1173, 1174, 1175, 1176, 1177, 1179, 1188, 1196, 1197, 1219, 1227], "txt": [1, 17, 129], "utf8": [1, 25, 71, 107, 115, 116, 129, 142, 144, 147, 157, 166, 168, 169, 176, 236, 255, 256, 295, 330, 395, 398, 478, 591, 597, 599, 600, 601, 602, 605, 621, 622, 623, 624, 632, 633, 634, 635, 636, 638, 641, 676, 763, 772, 774, 810, 853, 856, 956, 959, 1019, 1041, 1132, 1138, 1140, 1141, 1142, 1143, 1146, 1162, 1163, 1164, 1165, 1173, 1174, 1175, 1176, 1177, 1179, 1182, 1219], "register_lazyframe_namespac": [1, 80, 81, 83], "dtypeoper": [1, 82], "ldf": [1, 82, 834, 835, 838, 840, 842, 843, 844, 845, 846, 847, 848], "_ldf": [1, 82], "upcast_integer_typ": [1, 82], "with_column": [1, 17, 82, 184, 221, 231, 264, 271, 295, 302, 304, 320, 330, 334, 339, 346, 347, 348, 349, 350, 357, 359, 363, 369, 371, 372, 373, 381, 383, 388, 389, 390, 391, 392, 393, 395, 397, 398, 407, 408, 412, 413, 421, 422, 427, 432, 434, 435, 440, 441, 445, 446, 449, 450, 452, 453, 454, 456, 459, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 499, 504, 506, 509, 524, 526, 528, 529, 530, 531, 532, 533, 536, 537, 541, 542, 545, 546, 547, 549, 552, 556, 560, 561, 564, 565, 566, 567, 568, 570, 571, 572, 574, 578, 592, 593, 595, 597, 598, 600, 601, 602, 603, 605, 606, 607, 612, 613, 615, 616, 617, 618, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 635, 636, 637, 639, 640, 641, 643, 645, 646, 653, 655, 662, 664, 666, 674, 676, 680, 681, 683, 690, 695, 705, 709, 712, 716, 725, 729, 733, 735, 741, 745, 782, 788, 804, 809, 831, 853, 856, 913, 952, 1035, 1086, 1219], "tp": [1, 82], "cast": [1, 39, 81, 82, 104, 138, 139, 140, 141, 176, 184, 185, 187, 188, 221, 231, 257, 270, 295, 308, 349, 350, 364, 395, 398, 540, 545, 554, 561, 603, 604, 605, 641, 647, 653, 676, 725, 745, 782, 783, 785, 786, 804, 809, 830, 853, 856, 892, 906, 907, 921, 956, 959, 1090, 1144, 1145, 1146, 1182, 1189, 1197, 1202, 1219], "int64": [1, 2, 39, 40, 43, 71, 81, 82, 87, 115, 166, 176, 184, 185, 187, 188, 205, 221, 231, 236, 251, 257, 295, 322, 323, 324, 326, 349, 350, 399, 400, 401, 402, 403, 404, 405, 417, 545, 554, 561, 603, 636, 647, 653, 669, 696, 704, 705, 707, 721, 727, 745, 765, 772, 782, 783, 785, 786, 788, 793, 804, 809, 810, 813, 853, 875, 876, 877, 879, 906, 907, 960, 961, 962, 963, 964, 965, 966, 974, 1090, 1113, 1177, 1189, 1200, 1201, 1202, 1219], "int8": [1, 71, 82, 176, 295, 325, 349, 350, 369, 373, 381, 383, 390, 393, 407, 408, 497, 647, 718, 721, 736, 745, 878, 906, 907, 915, 926, 930, 942, 944, 951, 954, 968, 969, 1060, 1094, 1189, 1206, 1219], "int16": [1, 82, 349, 350, 389, 647, 745, 856, 906, 907, 950, 1189, 1198, 1219], "int32": [1, 82, 87, 104, 107, 120, 144, 145, 184, 185, 187, 188, 202, 231, 295, 334, 376, 377, 379, 386, 410, 561, 653, 721, 745, 782, 783, 785, 786, 809, 853, 856, 933, 937, 939, 947, 971, 1066, 1202, 1219], "b": [1, 15, 36, 37, 39, 41, 42, 45, 66, 67, 69, 71, 82, 87, 104, 105, 106, 107, 108, 109, 110, 111, 120, 153, 155, 156, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 176, 178, 180, 181, 182, 183, 184, 189, 190, 192, 194, 196, 198, 199, 200, 201, 202, 203, 205, 208, 210, 212, 213, 215, 217, 218, 219, 220, 221, 222, 223, 224, 226, 229, 230, 232, 233, 234, 235, 236, 237, 241, 244, 245, 246, 247, 249, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 272, 273, 274, 275, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 295, 302, 304, 305, 307, 308, 321, 327, 328, 330, 331, 332, 334, 345, 357, 360, 417, 419, 421, 422, 423, 425, 428, 435, 438, 440, 441, 443, 447, 450, 452, 453, 454, 456, 460, 466, 472, 478, 487, 488, 489, 490, 506, 509, 514, 525, 528, 529, 530, 531, 538, 539, 541, 545, 547, 549, 552, 556, 558, 560, 580, 586, 588, 599, 603, 615, 643, 646, 657, 661, 663, 664, 665, 666, 668, 672, 674, 676, 677, 678, 679, 680, 681, 682, 683, 695, 696, 697, 698, 699, 702, 706, 709, 710, 711, 712, 713, 714, 715, 716, 717, 720, 722, 723, 726, 727, 728, 729, 730, 734, 745, 760, 761, 764, 765, 766, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 787, 790, 792, 793, 794, 796, 797, 798, 799, 800, 802, 803, 804, 805, 806, 807, 808, 810, 811, 815, 817, 818, 819, 820, 821, 822, 824, 825, 826, 827, 828, 830, 832, 833, 834, 835, 837, 838, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 853, 856, 859, 862, 889, 891, 892, 913, 914, 916, 973, 974, 975, 981, 984, 998, 1006, 1019, 1035, 1050, 1051, 1053, 1086, 1091, 1140, 1144, 1156, 1188, 1201, 1205, 1219, 1226], "4": [1, 2, 13, 18, 22, 30, 36, 37, 39, 40, 41, 42, 45, 61, 64, 66, 67, 69, 79, 80, 81, 82, 83, 87, 104, 105, 106, 107, 108, 109, 110, 111, 120, 129, 147, 153, 155, 156, 157, 158, 159, 162, 165, 169, 170, 171, 172, 176, 178, 179, 181, 182, 183, 184, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 207, 209, 210, 211, 213, 214, 216, 217, 218, 220, 221, 222, 223, 227, 231, 233, 234, 240, 241, 245, 248, 249, 251, 252, 253, 254, 259, 260, 261, 263, 264, 265, 266, 268, 269, 270, 272, 274, 275, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 295, 301, 302, 303, 304, 306, 308, 321, 322, 323, 324, 325, 327, 333, 334, 337, 338, 339, 345, 346, 347, 348, 349, 350, 356, 358, 360, 365, 369, 389, 390, 391, 392, 395, 398, 400, 403, 405, 406, 408, 412, 413, 418, 419, 421, 422, 425, 426, 427, 428, 430, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 453, 454, 456, 459, 460, 461, 469, 470, 471, 472, 473, 475, 477, 486, 487, 488, 489, 490, 491, 492, 495, 497, 501, 504, 506, 509, 524, 526, 528, 529, 530, 531, 532, 533, 536, 537, 540, 541, 543, 544, 545, 546, 547, 550, 552, 556, 557, 558, 560, 561, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 576, 578, 582, 586, 587, 588, 589, 592, 595, 601, 606, 607, 612, 613, 615, 621, 622, 623, 624, 630, 631, 632, 636, 641, 642, 644, 645, 646, 648, 653, 654, 655, 662, 664, 666, 668, 670, 671, 672, 673, 674, 676, 677, 679, 680, 681, 682, 683, 689, 690, 692, 693, 695, 697, 698, 702, 706, 707, 709, 710, 711, 712, 713, 714, 715, 716, 717, 725, 726, 727, 728, 729, 730, 732, 733, 734, 735, 741, 745, 760, 761, 763, 764, 765, 766, 767, 771, 773, 774, 775, 776, 777, 779, 780, 781, 782, 787, 789, 790, 791, 792, 793, 794, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 809, 815, 817, 818, 819, 820, 821, 822, 824, 826, 827, 828, 829, 830, 833, 834, 835, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 853, 856, 862, 865, 872, 875, 876, 877, 878, 885, 894, 895, 897, 912, 914, 916, 930, 937, 939, 942, 944, 945, 946, 947, 951, 952, 953, 956, 959, 961, 964, 966, 967, 968, 969, 974, 981, 983, 984, 988, 989, 993, 994, 997, 998, 1000, 1006, 1011, 1012, 1013, 1014, 1018, 1033, 1034, 1035, 1036, 1040, 1049, 1050, 1051, 1053, 1054, 1055, 1058, 1060, 1074, 1082, 1083, 1084, 1088, 1092, 1093, 1096, 1101, 1103, 1104, 1105, 1106, 1107, 1110, 1118, 1123, 1127, 1128, 1133, 1136, 1142, 1147, 1148, 1153, 1154, 1162, 1164, 1165, 1171, 1172, 1173, 1177, 1182, 1188, 1190, 1198, 1201, 1202, 1203, 1210, 1219, 1227], "c": [1, 15, 36, 37, 39, 41, 42, 45, 66, 67, 69, 80, 82, 87, 105, 107, 109, 111, 120, 129, 143, 153, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 169, 173, 176, 180, 181, 182, 183, 184, 190, 192, 194, 202, 203, 205, 208, 210, 212, 213, 215, 217, 218, 219, 220, 222, 223, 224, 226, 229, 230, 232, 235, 236, 237, 244, 245, 246, 247, 249, 251, 254, 255, 256, 257, 258, 260, 261, 264, 265, 267, 268, 270, 274, 278, 279, 280, 282, 283, 285, 288, 289, 295, 302, 304, 305, 307, 309, 327, 357, 441, 456, 466, 478, 506, 509, 528, 529, 541, 545, 549, 580, 623, 632, 657, 664, 666, 668, 674, 676, 677, 679, 680, 681, 683, 697, 698, 699, 702, 706, 709, 711, 712, 713, 714, 715, 716, 717, 726, 728, 729, 730, 734, 741, 745, 761, 763, 764, 765, 766, 767, 768, 770, 771, 772, 773, 774, 775, 778, 781, 782, 790, 793, 800, 803, 805, 807, 808, 810, 811, 817, 818, 819, 824, 827, 830, 832, 834, 838, 839, 840, 842, 843, 845, 848, 849, 853, 856, 891, 913, 914, 998, 1019, 1086, 1164, 1173, 1205, 1219], "5": [1, 12, 13, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 36, 37, 39, 41, 42, 45, 67, 69, 79, 80, 82, 83, 87, 104, 107, 108, 109, 110, 111, 113, 115, 116, 129, 137, 138, 140, 145, 157, 158, 159, 162, 169, 170, 171, 172, 176, 178, 179, 181, 182, 183, 184, 190, 191, 194, 195, 197, 199, 200, 201, 203, 204, 205, 206, 207, 209, 210, 211, 213, 216, 217, 218, 220, 222, 223, 224, 227, 231, 234, 240, 241, 245, 248, 249, 251, 252, 253, 254, 256, 259, 264, 265, 266, 269, 270, 272, 274, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 295, 302, 303, 306, 333, 334, 338, 339, 356, 357, 358, 359, 360, 365, 366, 391, 393, 395, 398, 399, 405, 413, 416, 417, 420, 422, 426, 427, 431, 432, 434, 436, 438, 441, 445, 449, 450, 452, 453, 454, 456, 459, 461, 469, 472, 473, 475, 477, 480, 483, 486, 487, 488, 489, 490, 491, 494, 495, 524, 526, 528, 537, 540, 541, 542, 543, 544, 545, 549, 550, 552, 556, 557, 558, 560, 561, 563, 564, 565, 566, 567, 568, 570, 571, 572, 573, 576, 582, 588, 595, 605, 606, 607, 636, 645, 648, 654, 655, 668, 673, 674, 675, 677, 679, 680, 681, 682, 683, 689, 694, 695, 696, 697, 698, 702, 706, 707, 709, 710, 711, 712, 713, 714, 715, 716, 717, 720, 726, 728, 729, 730, 734, 741, 745, 763, 764, 765, 766, 767, 773, 774, 775, 776, 777, 779, 780, 781, 782, 787, 789, 790, 791, 792, 793, 794, 798, 799, 800, 805, 809, 815, 817, 818, 819, 820, 821, 822, 827, 829, 830, 833, 834, 838, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 853, 856, 862, 865, 869, 872, 885, 895, 897, 904, 912, 913, 914, 915, 916, 922, 923, 924, 925, 926, 952, 954, 956, 957, 959, 960, 966, 968, 969, 974, 978, 981, 982, 993, 994, 997, 998, 1004, 1010, 1035, 1036, 1040, 1043, 1049, 1050, 1051, 1053, 1054, 1058, 1066, 1074, 1082, 1083, 1084, 1086, 1087, 1088, 1092, 1093, 1096, 1098, 1099, 1100, 1102, 1103, 1106, 1110, 1123, 1129, 1136, 1146, 1147, 1177, 1190, 1203, 1206, 1210, 1219, 1227], "6": [1, 13, 18, 36, 37, 39, 40, 41, 42, 43, 44, 45, 67, 69, 70, 80, 82, 87, 88, 89, 104, 107, 108, 109, 110, 137, 157, 160, 163, 164, 165, 166, 167, 169, 170, 173, 178, 179, 180, 181, 182, 184, 190, 192, 194, 195, 197, 199, 200, 201, 203, 207, 208, 209, 210, 211, 212, 213, 215, 216, 219, 222, 223, 224, 226, 227, 229, 231, 232, 233, 234, 235, 236, 237, 241, 244, 245, 246, 247, 248, 249, 251, 253, 254, 255, 256, 257, 258, 261, 263, 264, 266, 267, 268, 270, 272, 279, 288, 289, 295, 302, 306, 327, 334, 349, 350, 360, 365, 369, 383, 388, 389, 390, 407, 408, 411, 413, 421, 422, 428, 431, 436, 438, 440, 461, 462, 463, 473, 487, 488, 489, 490, 509, 537, 540, 548, 551, 552, 553, 557, 559, 561, 564, 565, 566, 567, 568, 570, 571, 572, 576, 588, 595, 599, 606, 607, 636, 645, 648, 662, 680, 681, 682, 695, 698, 709, 710, 728, 741, 745, 763, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 778, 779, 780, 782, 787, 789, 790, 792, 794, 796, 800, 803, 805, 807, 809, 810, 811, 813, 815, 817, 818, 819, 822, 826, 829, 830, 833, 839, 848, 849, 853, 856, 895, 901, 903, 906, 907, 916, 949, 969, 974, 994, 1025, 1026, 1036, 1050, 1051, 1053, 1074, 1088, 1093, 1095, 1101, 1103, 1105, 1107, 1136, 1140, 1147, 1177, 1189, 1219, 1226, 1227], "7": [1, 21, 32, 36, 37, 39, 40, 41, 42, 43, 44, 45, 69, 80, 82, 87, 157, 160, 161, 162, 163, 164, 166, 167, 169, 173, 178, 180, 184, 190, 192, 195, 203, 208, 210, 212, 214, 215, 219, 222, 224, 226, 229, 231, 232, 234, 235, 236, 237, 241, 244, 246, 247, 248, 249, 255, 256, 257, 258, 264, 266, 267, 268, 295, 302, 306, 324, 350, 365, 369, 389, 391, 392, 406, 408, 418, 431, 436, 440, 461, 487, 488, 489, 490, 540, 552, 557, 561, 571, 588, 635, 648, 680, 681, 692, 698, 709, 710, 728, 745, 763, 768, 770, 772, 774, 778, 780, 782, 787, 789, 790, 794, 801, 803, 806, 807, 809, 810, 811, 815, 822, 853, 856, 869, 877, 922, 926, 933, 952, 953, 967, 969, 1020, 1050, 1051, 1053, 1092, 1093, 1106, 1176, 1219, 1227], "float32": [1, 15, 37, 58, 82, 157, 176, 255, 256, 295, 707, 763, 853, 856, 1001, 1066, 1219], "lazi": [1, 64, 65, 66, 67, 69, 82, 87, 129, 145, 204, 221, 222, 295, 509, 700, 718, 721, 736, 745, 790, 791, 832, 834, 835, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 853, 856, 1226, 1227], "i16": [1, 82, 369, 389, 408, 580, 745, 856, 950, 1198, 1219, 1227], "i32": [1, 82, 104, 107, 111, 144, 145, 237, 295, 334, 376, 377, 410, 559, 580, 735, 745, 811, 853, 933, 937, 939, 947, 971, 1066, 1095, 1219, 1227], "f32": [1, 82, 157, 255, 295, 580, 745, 763, 853, 856, 1066, 1219], "i64": [1, 2, 15, 18, 21, 22, 26, 32, 61, 64, 66, 80, 81, 82, 83, 87, 104, 105, 106, 107, 108, 109, 110, 111, 117, 129, 156, 158, 159, 160, 163, 165, 166, 169, 170, 172, 173, 178, 179, 181, 182, 183, 184, 190, 192, 194, 196, 198, 200, 203, 204, 207, 208, 213, 214, 215, 220, 221, 222, 223, 226, 227, 229, 230, 231, 235, 237, 241, 244, 245, 247, 249, 252, 258, 260, 261, 262, 263, 264, 265, 266, 268, 270, 272, 273, 274, 275, 278, 279, 280, 281, 282, 285, 288, 289, 295, 302, 304, 308, 322, 323, 324, 326, 327, 333, 339, 346, 347, 348, 349, 350, 357, 359, 360, 372, 397, 399, 400, 401, 402, 403, 404, 405, 417, 419, 420, 422, 423, 424, 425, 427, 428, 430, 431, 433, 436, 438, 439, 440, 441, 445, 446, 449, 450, 452, 453, 454, 456, 458, 461, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 498, 499, 503, 506, 507, 509, 524, 525, 526, 528, 529, 530, 531, 532, 533, 541, 542, 545, 546, 547, 548, 549, 552, 553, 554, 556, 557, 558, 559, 560, 561, 575, 577, 578, 580, 581, 582, 586, 587, 588, 615, 616, 636, 641, 642, 644, 645, 646, 647, 648, 654, 655, 656, 658, 661, 669, 674, 676, 680, 681, 682, 683, 694, 695, 696, 697, 698, 702, 704, 705, 706, 707, 709, 710, 711, 712, 715, 716, 720, 724, 725, 728, 729, 730, 735, 741, 745, 761, 764, 766, 767, 769, 770, 771, 774, 775, 777, 778, 779, 780, 781, 782, 787, 790, 791, 792, 794, 796, 797, 800, 801, 802, 804, 805, 807, 808, 809, 811, 813, 815, 818, 819, 821, 822, 824, 825, 826, 827, 830, 833, 834, 835, 838, 839, 840, 841, 842, 845, 848, 849, 853, 856, 859, 862, 875, 876, 877, 879, 885, 897, 900, 904, 905, 906, 907, 913, 914, 929, 958, 960, 961, 962, 963, 964, 965, 966, 981, 982, 984, 985, 988, 989, 993, 1006, 1033, 1034, 1035, 1036, 1040, 1049, 1050, 1051, 1053, 1054, 1055, 1056, 1058, 1061, 1068, 1073, 1086, 1091, 1092, 1093, 1095, 1099, 1102, 1106, 1110, 1111, 1114, 1118, 1122, 1123, 1127, 1128, 1177, 1188, 1190, 1197, 1203, 1204, 1210, 1219, 1226, 1227], "register_series_namespac": [1, 80, 81, 82], "math": [1, 15, 83, 358, 670, 671, 745, 901, 903, 1124, 1193, 1219], "mathshortcut": [1, 83], "": [1, 2, 16, 37, 39, 40, 45, 58, 64, 67, 71, 83, 104, 105, 111, 115, 116, 117, 118, 120, 126, 130, 131, 134, 135, 147, 156, 157, 165, 168, 178, 183, 184, 186, 187, 194, 200, 203, 204, 213, 220, 222, 227, 229, 234, 237, 238, 245, 254, 260, 262, 263, 264, 265, 270, 271, 295, 372, 395, 398, 417, 457, 478, 507, 509, 518, 525, 534, 535, 541, 542, 554, 559, 588, 592, 600, 601, 602, 615, 621, 622, 624, 632, 633, 634, 638, 639, 642, 644, 663, 664, 665, 666, 672, 677, 682, 683, 686, 687, 696, 699, 700, 709, 710, 711, 712, 715, 716, 724, 725, 727, 728, 729, 735, 741, 745, 761, 763, 770, 771, 781, 782, 784, 785, 791, 800, 811, 812, 819, 824, 825, 826, 827, 830, 831, 836, 841, 853, 856, 859, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 878, 885, 886, 888, 889, 891, 892, 894, 895, 896, 897, 900, 901, 902, 903, 904, 905, 906, 907, 912, 913, 914, 915, 916, 917, 918, 920, 922, 926, 928, 929, 932, 934, 935, 939, 941, 945, 946, 950, 953, 954, 956, 959, 967, 969, 970, 971, 975, 976, 977, 978, 982, 983, 984, 985, 987, 988, 989, 992, 993, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1019, 1020, 1021, 1022, 1033, 1034, 1036, 1040, 1041, 1043, 1049, 1054, 1055, 1056, 1058, 1060, 1066, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1077, 1078, 1080, 1082, 1083, 1084, 1086, 1087, 1088, 1091, 1092, 1093, 1094, 1095, 1096, 1098, 1099, 1100, 1101, 1102, 1103, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1114, 1116, 1118, 1122, 1123, 1124, 1125, 1127, 1128, 1130, 1133, 1134, 1136, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1147, 1148, 1153, 1154, 1156, 1158, 1159, 1162, 1165, 1166, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1186, 1188, 1189, 1190, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1219], "_": [1, 79, 83, 222, 254, 295, 478, 593, 601, 606, 607, 617, 622, 623, 891, 1134, 1142, 1147, 1148, 1158, 1164, 1196, 1219], "squar": [1, 83, 281, 457, 589, 745, 841, 1021, 1129, 1219], "cube": [1, 83, 337, 546, 745, 893, 1219], "s2": [1, 70, 88, 89, 140, 141, 176, 295, 895, 916, 974, 1006, 1020, 1061, 1074, 1201, 1210, 1219], "renam": [1, 107, 115, 116, 154, 174, 177, 185, 186, 187, 188, 193, 228, 237, 238, 250, 270, 271, 274, 276, 295, 304, 309, 351, 352, 353, 354, 355, 444, 448, 451, 456, 468, 481, 496, 505, 506, 508, 521, 529, 530, 531, 547, 562, 594, 604, 608, 609, 610, 611, 614, 619, 620, 626, 644, 646, 649, 650, 667, 686, 687, 708, 724, 727, 745, 783, 784, 785, 786, 795, 811, 812, 823, 830, 831, 834, 836, 853, 859, 863, 908, 909, 910, 911, 913, 1003, 1009, 1031, 1044, 1059, 1067, 1086, 1097, 1113, 1115, 1135, 1145, 1149, 1150, 1151, 1152, 1155, 1160, 1161, 1167, 1186, 1191, 1192, 1197, 1219], "n2": 1, "in_plac": [1, 192, 243, 268, 295, 1089, 1121, 1128, 1219], "true": [1, 6, 12, 13, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 37, 39, 40, 43, 45, 58, 59, 60, 64, 66, 68, 85, 86, 87, 104, 105, 109, 111, 113, 115, 116, 117, 119, 120, 121, 123, 126, 127, 129, 130, 132, 133, 134, 135, 138, 139, 140, 141, 142, 143, 145, 146, 147, 151, 153, 156, 157, 158, 159, 162, 167, 172, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 194, 196, 197, 198, 201, 204, 205, 210, 211, 217, 218, 220, 222, 223, 231, 232, 233, 234, 235, 237, 245, 248, 252, 254, 256, 257, 260, 261, 262, 263, 264, 265, 266, 270, 275, 278, 280, 282, 283, 284, 285, 286, 287, 288, 295, 303, 304, 305, 306, 307, 308, 309, 320, 328, 329, 331, 332, 334, 346, 347, 348, 349, 350, 357, 364, 366, 369, 372, 375, 377, 384, 385, 388, 389, 391, 392, 393, 397, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 411, 412, 413, 414, 415, 416, 430, 432, 433, 434, 437, 441, 442, 443, 445, 446, 447, 449, 450, 452, 453, 454, 455, 457, 459, 462, 463, 467, 475, 493, 496, 498, 504, 509, 513, 514, 515, 516, 517, 518, 520, 521, 536, 537, 538, 540, 543, 544, 549, 554, 561, 564, 565, 566, 567, 568, 569, 570, 571, 572, 575, 580, 585, 587, 588, 591, 592, 593, 595, 596, 598, 603, 605, 614, 622, 623, 625, 632, 633, 634, 636, 638, 642, 644, 656, 659, 662, 663, 664, 665, 666, 667, 669, 672, 673, 677, 689, 690, 691, 692, 693, 698, 704, 705, 710, 718, 721, 727, 732, 733, 735, 736, 745, 761, 763, 764, 765, 766, 767, 773, 775, 777, 781, 782, 783, 784, 785, 786, 790, 791, 793, 795, 796, 800, 805, 809, 811, 813, 817, 819, 824, 825, 826, 827, 830, 835, 838, 840, 842, 843, 844, 845, 846, 847, 848, 853, 856, 860, 861, 863, 873, 881, 886, 889, 892, 895, 896, 913, 920, 921, 923, 926, 928, 929, 930, 932, 936, 937, 939, 942, 944, 945, 946, 947, 949, 950, 951, 952, 953, 954, 958, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 973, 974, 976, 977, 978, 985, 991, 994, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1019, 1021, 1025, 1026, 1038, 1056, 1059, 1068, 1074, 1080, 1083, 1084, 1086, 1090, 1104, 1113, 1126, 1128, 1132, 1133, 1134, 1136, 1137, 1139, 1144, 1146, 1155, 1163, 1164, 1166, 1173, 1174, 1175, 1177, 1179, 1200, 1201, 1207, 1209, 1210, 1219, 1226, 1227], "s3": [1, 39, 119, 130, 131, 134, 135, 295, 1061, 1219], "n3": 1, "8": [1, 16, 36, 37, 39, 41, 42, 43, 44, 45, 57, 58, 64, 69, 76, 78, 79, 80, 82, 83, 87, 137, 143, 157, 160, 161, 162, 163, 164, 165, 166, 167, 169, 173, 178, 180, 182, 190, 192, 200, 203, 207, 208, 210, 212, 215, 224, 226, 229, 232, 234, 235, 236, 237, 241, 244, 246, 247, 249, 255, 256, 257, 258, 264, 267, 268, 270, 295, 306, 308, 321, 347, 350, 356, 365, 431, 437, 440, 470, 472, 481, 487, 488, 489, 490, 526, 540, 546, 557, 558, 563, 580, 586, 588, 608, 611, 612, 613, 632, 662, 668, 677, 679, 681, 683, 695, 697, 702, 706, 709, 710, 711, 712, 713, 714, 715, 716, 717, 726, 729, 730, 734, 745, 763, 768, 770, 771, 772, 774, 778, 780, 787, 790, 794, 796, 805, 807, 810, 811, 815, 822, 830, 853, 856, 903, 912, 933, 994, 1020, 1033, 1035, 1044, 1050, 1051, 1053, 1082, 1093, 1096, 1098, 1101, 1103, 1105, 1107, 1149, 1152, 1153, 1154, 1173, 1219, 1227], "9": [1, 14, 36, 37, 39, 40, 41, 42, 45, 64, 69, 79, 87, 137, 161, 162, 176, 185, 190, 195, 207, 231, 233, 234, 237, 248, 249, 264, 268, 270, 288, 295, 302, 306, 308, 321, 347, 350, 358, 365, 431, 440, 446, 456, 470, 485, 493, 528, 540, 551, 557, 561, 563, 569, 571, 582, 586, 601, 635, 643, 675, 680, 681, 733, 745, 783, 787, 789, 794, 809, 811, 822, 830, 848, 853, 856, 914, 926, 937, 939, 947, 953, 967, 968, 1006, 1020, 1033, 1056, 1093, 1098, 1104, 1106, 1108, 1123, 1142, 1176, 1219], "27": [1, 83, 288, 350, 383, 390, 407, 745, 848, 1219, 1227], "16": [1, 40, 54, 73, 81, 137, 177, 184, 231, 270, 295, 347, 350, 440, 508, 526, 546, 561, 636, 680, 694, 695, 698, 745, 782, 809, 817, 830, 853, 856, 953, 967, 1067, 1082, 1113, 1124, 1177, 1193, 1219], "64": [1, 53, 56, 75, 81, 83, 136, 153, 344, 526, 546, 745, 1082, 1219], "25": [1, 32, 40, 83, 111, 145, 162, 184, 204, 231, 266, 270, 295, 359, 369, 371, 389, 392, 406, 408, 549, 561, 564, 565, 566, 567, 568, 570, 571, 572, 655, 689, 690, 692, 693, 694, 700, 710, 732, 733, 745, 782, 791, 798, 809, 828, 830, 853, 856, 914, 915, 928, 953, 967, 973, 994, 1082, 1086, 1219], "125": [1, 40, 83, 295, 302, 745, 1082, 1219], "inner": [2, 61, 144, 203, 265, 295, 325, 360, 478, 497, 555, 653, 745, 790, 813, 827, 853, 878, 916, 1041, 1060, 1202, 1219], "polarsdatatyp": [2, 61, 115, 116, 129, 142, 143, 144, 145, 147, 154, 157, 207, 295, 309, 334, 417, 505, 507, 508, 509, 556, 603, 604, 667, 696, 707, 708, 709, 710, 718, 721, 736, 741, 745, 763, 853, 856, 863, 886, 1067, 1068, 1092, 1144, 1145, 1219], "pythondatatyp": [2, 61], "width": [2, 31, 40, 115, 116, 129, 295, 497, 853, 1060], "int": [2, 15, 17, 18, 19, 22, 30, 31, 37, 38, 40, 45, 49, 58, 60, 66, 69, 81, 107, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 126, 127, 129, 130, 132, 133, 134, 135, 136, 143, 144, 145, 146, 147, 148, 149, 154, 156, 158, 162, 168, 171, 172, 174, 178, 180, 182, 189, 190, 191, 193, 194, 199, 201, 202, 204, 206, 207, 208, 210, 215, 217, 218, 228, 229, 232, 235, 240, 241, 242, 244, 246, 247, 249, 250, 255, 258, 260, 264, 267, 269, 272, 279, 289, 295, 302, 327, 333, 356, 359, 414, 415, 416, 420, 421, 422, 428, 430, 431, 433, 435, 436, 437, 461, 467, 470, 475, 476, 477, 486, 491, 492, 495, 496, 497, 498, 540, 542, 545, 546, 549, 552, 555, 557, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 578, 579, 581, 586, 590, 600, 603, 604, 609, 612, 613, 614, 615, 619, 621, 623, 624, 635, 636, 641, 648, 649, 650, 654, 660, 662, 669, 677, 679, 688, 691, 694, 700, 702, 704, 705, 718, 721, 722, 723, 726, 727, 730, 731, 734, 736, 745, 761, 764, 775, 776, 777, 780, 787, 791, 794, 805, 815, 816, 818, 820, 822, 823, 824, 828, 829, 833, 839, 849, 853, 870, 871, 885, 886, 895, 896, 912, 915, 975, 976, 977, 978, 982, 983, 984, 988, 989, 992, 993, 994, 1020, 1022, 1023, 1030, 1031, 1032, 1033, 1038, 1039, 1040, 1049, 1054, 1055, 1058, 1059, 1060, 1061, 1070, 1074, 1075, 1077, 1078, 1079, 1081, 1082, 1085, 1086, 1088, 1093, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1114, 1115, 1118, 1119, 1122, 1127, 1130, 1141, 1144, 1145, 1150, 1153, 1154, 1155, 1156, 1160, 1162, 1164, 1165, 1176, 1177, 1182, 1189, 1190, 1191, 1192, 1198, 1203, 1208, 1219, 1226, 1227], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 295, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 741, 745, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 853, 856, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 987, 988, 989, 990, 991, 992, 993, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1185, 1186, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1219, 1226], "fix": [2, 15, 51, 120, 143, 145, 409, 564, 565, 566, 567, 568, 570, 571, 572, 694, 745, 970], "length": [2, 61, 87, 115, 116, 129, 143, 182, 184, 185, 187, 188, 231, 244, 295, 356, 392, 406, 492, 498, 518, 556, 559, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 586, 606, 607, 609, 611, 612, 613, 619, 621, 641, 718, 721, 722, 723, 736, 745, 782, 783, 785, 786, 805, 809, 818, 853, 895, 912, 922, 953, 967, 1055, 1061, 1079, 1092, 1095, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1105, 1106, 1107, 1127, 1147, 1148, 1150, 1152, 1153, 1154, 1160, 1162, 1182, 1219], "paramet": [2, 5, 7, 8, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 50, 51, 58, 59, 60, 61, 64, 65, 66, 67, 69, 71, 79, 80, 81, 82, 83, 85, 86, 87, 89, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 153, 154, 156, 157, 158, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 199, 201, 202, 203, 204, 206, 207, 208, 210, 211, 213, 214, 215, 217, 218, 220, 221, 222, 224, 226, 227, 228, 229, 231, 232, 233, 234, 235, 237, 238, 239, 241, 242, 244, 245, 246, 247, 248, 249, 250, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 274, 276, 279, 281, 287, 289, 295, 302, 304, 305, 306, 307, 308, 309, 319, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 339, 340, 341, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 364, 365, 366, 372, 388, 391, 392, 393, 395, 397, 398, 406, 409, 411, 412, 413, 414, 415, 416, 417, 420, 422, 423, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 440, 441, 446, 457, 459, 461, 466, 467, 468, 469, 470, 472, 475, 476, 477, 478, 486, 487, 488, 489, 490, 491, 492, 493, 495, 496, 497, 498, 499, 500, 504, 505, 506, 507, 508, 509, 520, 524, 526, 529, 530, 531, 536, 537, 540, 541, 542, 545, 546, 547, 549, 550, 552, 554, 555, 556, 557, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 609, 610, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 641, 642, 644, 645, 646, 648, 649, 650, 654, 655, 656, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 741, 745, 761, 763, 764, 766, 767, 769, 770, 771, 773, 774, 775, 776, 777, 778, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 794, 795, 796, 800, 801, 804, 805, 806, 807, 809, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 822, 823, 824, 825, 826, 827, 828, 830, 831, 832, 833, 834, 836, 839, 841, 847, 849, 853, 856, 859, 860, 861, 862, 863, 872, 879, 880, 881, 882, 883, 884, 885, 886, 890, 896, 897, 898, 899, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 921, 922, 923, 929, 949, 952, 953, 954, 956, 958, 959, 967, 970, 973, 974, 975, 976, 977, 978, 981, 982, 983, 984, 985, 988, 989, 992, 993, 994, 997, 998, 1008, 1016, 1017, 1021, 1023, 1029, 1030, 1031, 1032, 1033, 1035, 1038, 1039, 1040, 1041, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1058, 1059, 1060, 1061, 1062, 1067, 1068, 1082, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1118, 1119, 1122, 1126, 1127, 1128, 1130, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1141, 1142, 1143, 1144, 1145, 1146, 1150, 1151, 1153, 1154, 1155, 1156, 1157, 1158, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1179, 1182, 1183, 1186, 1190, 1191, 1192, 1196, 1197, 1198, 1199, 1200, 1201, 1203, 1204, 1207, 1208, 1209, 1210, 1219, 1226], "The": [2, 25, 38, 39, 40, 45, 60, 61, 64, 68, 70, 71, 79, 84, 85, 89, 104, 106, 107, 108, 110, 113, 115, 116, 117, 118, 120, 124, 125, 127, 129, 133, 134, 135, 138, 139, 140, 141, 149, 162, 164, 165, 166, 169, 170, 173, 182, 183, 184, 187, 189, 195, 201, 204, 207, 214, 220, 231, 232, 233, 234, 237, 238, 256, 263, 266, 270, 271, 274, 281, 295, 304, 327, 328, 329, 330, 357, 361, 362, 369, 383, 388, 389, 392, 395, 406, 407, 417, 420, 423, 428, 435, 471, 475, 496, 507, 508, 509, 541, 549, 552, 555, 556, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 582, 585, 591, 596, 597, 600, 603, 604, 610, 612, 613, 620, 626, 627, 628, 629, 630, 631, 632, 696, 700, 710, 722, 723, 724, 727, 735, 737, 738, 740, 741, 745, 746, 747, 750, 752, 753, 754, 771, 774, 778, 782, 785, 787, 789, 791, 794, 796, 801, 805, 809, 811, 812, 813, 826, 830, 831, 834, 841, 853, 859, 862, 880, 881, 882, 896, 913, 914, 917, 918, 926, 944, 949, 950, 953, 956, 967, 968, 981, 982, 985, 992, 1034, 1038, 1067, 1068, 1086, 1088, 1092, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1123, 1126, 1132, 1137, 1138, 1144, 1145, 1151, 1153, 1154, 1161, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1211, 1213, 1215, 1219, 1220, 1223, 1224, 1225, 1227], "datatyp": [2, 37, 43, 58, 61, 77, 104, 106, 107, 108, 110, 112, 120, 122, 124, 125, 128, 133, 147, 166, 169, 176, 236, 295, 334, 417, 580, 653, 696, 707, 745, 757, 772, 774, 810, 813, 853, 863, 886, 914, 1008, 1015, 1017, 1019, 1068, 1120, 1202, 1219], "valu": [2, 5, 9, 15, 16, 17, 18, 22, 33, 35, 37, 40, 43, 58, 61, 62, 64, 68, 70, 77, 79, 87, 89, 107, 109, 115, 116, 117, 118, 120, 129, 135, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 153, 155, 156, 162, 165, 167, 170, 171, 172, 173, 177, 182, 184, 187, 189, 190, 195, 199, 201, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 218, 220, 222, 223, 224, 226, 231, 232, 233, 234, 235, 241, 242, 245, 246, 247, 248, 249, 252, 253, 257, 260, 261, 264, 265, 266, 267, 277, 278, 280, 282, 283, 285, 286, 295, 301, 302, 303, 305, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 326, 327, 329, 330, 331, 332, 333, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 350, 356, 357, 359, 361, 362, 365, 369, 383, 389, 407, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 452, 453, 454, 455, 458, 459, 460, 462, 463, 464, 465, 468, 469, 470, 471, 474, 476, 477, 479, 480, 482, 483, 484, 486, 491, 494, 495, 498, 499, 501, 503, 504, 507, 508, 509, 510, 511, 512, 523, 524, 525, 526, 527, 534, 535, 536, 537, 539, 541, 542, 545, 546, 549, 550, 552, 555, 556, 559, 560, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 575, 576, 577, 578, 579, 582, 583, 584, 585, 587, 588, 589, 591, 592, 594, 595, 596, 597, 598, 600, 603, 604, 605, 612, 613, 615, 616, 618, 621, 623, 624, 625, 641, 643, 645, 647, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 662, 663, 665, 668, 674, 676, 678, 680, 681, 682, 683, 684, 685, 686, 687, 697, 698, 703, 706, 707, 711, 712, 713, 714, 715, 716, 717, 720, 721, 722, 723, 728, 729, 735, 745, 760, 761, 771, 776, 777, 778, 782, 785, 788, 789, 790, 791, 797, 798, 799, 800, 802, 803, 806, 807, 809, 813, 815, 816, 819, 820, 821, 824, 827, 828, 837, 838, 840, 842, 843, 845, 846, 853, 856, 858, 860, 861, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 875, 876, 877, 879, 881, 882, 883, 884, 890, 894, 897, 898, 899, 901, 902, 903, 912, 913, 914, 915, 917, 918, 922, 926, 944, 950, 968, 974, 975, 976, 977, 978, 981, 982, 983, 984, 987, 988, 989, 991, 992, 993, 994, 995, 997, 998, 1000, 1002, 1003, 1004, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1018, 1022, 1023, 1025, 1026, 1027, 1028, 1031, 1032, 1033, 1034, 1037, 1039, 1040, 1042, 1043, 1045, 1046, 1047, 1049, 1054, 1058, 1062, 1067, 1069, 1070, 1072, 1073, 1075, 1077, 1078, 1079, 1081, 1082, 1085, 1086, 1087, 1088, 1092, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1110, 1111, 1112, 1113, 1114, 1115, 1118, 1119, 1123, 1124, 1125, 1126, 1132, 1133, 1135, 1136, 1137, 1138, 1139, 1141, 1142, 1143, 1144, 1145, 1146, 1153, 1154, 1156, 1157, 1159, 1162, 1164, 1165, 1166, 1182, 1189, 1190, 1191, 1192, 1193, 1194, 1200, 1201, 1202, 1205, 1207, 1209, 1210, 1219, 1227], "within": [2, 61, 138, 139, 140, 141, 183, 184, 185, 186, 187, 188, 189, 204, 231, 266, 295, 435, 552, 561, 588, 745, 782, 783, 785, 786, 791, 809, 853, 992, 1219, 1226], "each": [2, 37, 40, 58, 61, 79, 116, 117, 133, 138, 139, 140, 141, 143, 182, 183, 184, 185, 186, 187, 188, 202, 204, 207, 220, 231, 235, 257, 263, 265, 266, 273, 274, 277, 279, 281, 289, 295, 357, 392, 406, 444, 445, 448, 449, 477, 480, 481, 486, 495, 502, 509, 549, 552, 560, 566, 568, 570, 572, 575, 581, 588, 601, 606, 607, 608, 611, 623, 624, 669, 672, 676, 704, 705, 727, 735, 745, 766, 782, 783, 785, 786, 791, 805, 809, 826, 827, 834, 836, 837, 839, 841, 849, 853, 895, 913, 953, 967, 1003, 1004, 1009, 1010, 1040, 1043, 1044, 1049, 1058, 1086, 1088, 1096, 1110, 1122, 1142, 1147, 1148, 1149, 1152, 1164, 1165, 1188, 1219, 1227], "exampl": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 79, 80, 81, 82, 83, 87, 88, 89, 104, 105, 106, 107, 108, 109, 110, 111, 113, 116, 117, 118, 119, 120, 126, 129, 130, 131, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 176, 178, 179, 180, 181, 182, 183, 184, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 240, 241, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 295, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 369, 371, 372, 373, 375, 376, 377, 381, 383, 384, 385, 388, 389, 390, 391, 392, 393, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 612, 613, 615, 616, 617, 618, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 689, 690, 692, 694, 695, 696, 697, 698, 699, 700, 702, 704, 705, 706, 707, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 720, 721, 724, 725, 726, 727, 728, 729, 730, 732, 733, 734, 735, 736, 741, 745, 757, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 787, 788, 789, 790, 791, 792, 793, 794, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 815, 817, 818, 819, 820, 821, 822, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 853, 859, 860, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 885, 886, 888, 889, 891, 892, 894, 895, 896, 897, 900, 901, 902, 903, 904, 905, 906, 907, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 924, 925, 926, 928, 929, 930, 932, 933, 934, 935, 936, 937, 939, 941, 942, 944, 945, 946, 947, 949, 950, 951, 952, 953, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 973, 974, 975, 976, 977, 978, 981, 982, 983, 984, 985, 987, 988, 989, 992, 993, 994, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1019, 1020, 1022, 1025, 1026, 1033, 1034, 1035, 1036, 1040, 1041, 1043, 1049, 1050, 1051, 1053, 1054, 1055, 1056, 1058, 1060, 1061, 1066, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1080, 1082, 1083, 1084, 1086, 1087, 1088, 1091, 1092, 1093, 1094, 1095, 1096, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1114, 1116, 1118, 1122, 1123, 1124, 1125, 1127, 1128, 1130, 1132, 1133, 1134, 1136, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1146, 1147, 1148, 1153, 1154, 1156, 1157, 1158, 1159, 1162, 1164, 1165, 1166, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1188, 1189, 1190, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1210, 1219, 1226], "dtype": [2, 15, 40, 48, 70, 71, 82, 88, 89, 104, 106, 108, 110, 111, 115, 116, 117, 118, 124, 125, 126, 129, 142, 143, 144, 145, 147, 153, 157, 184, 185, 187, 188, 204, 231, 255, 256, 257, 264, 295, 309, 334, 335, 349, 350, 409, 417, 430, 466, 475, 496, 503, 505, 507, 508, 509, 554, 555, 561, 564, 565, 566, 567, 568, 570, 571, 572, 580, 603, 604, 632, 647, 649, 653, 658, 667, 669, 696, 700, 704, 705, 707, 708, 709, 710, 718, 721, 727, 736, 745, 763, 782, 783, 785, 786, 791, 809, 853, 856, 875, 876, 878, 886, 888, 889, 891, 896, 906, 907, 914, 915, 970, 974, 975, 999, 1001, 1005, 1008, 1015, 1017, 1019, 1029, 1038, 1060, 1066, 1067, 1094, 1113, 1120, 1144, 1145, 1173, 1189, 1198, 1200, 1201, 1202, 1206, 1219, 1227], "method": [2, 3, 4, 5, 9, 36, 39, 40, 41, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 61, 62, 63, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 86, 87, 105, 114, 115, 116, 117, 120, 121, 122, 123, 124, 125, 126, 127, 128, 135, 142, 151, 154, 165, 170, 174, 177, 183, 185, 186, 187, 188, 193, 195, 201, 207, 208, 210, 215, 218, 224, 228, 232, 233, 234, 241, 247, 250, 262, 270, 276, 281, 287, 295, 302, 305, 306, 309, 339, 351, 352, 353, 354, 355, 395, 398, 412, 413, 420, 427, 432, 434, 440, 444, 448, 451, 456, 459, 468, 481, 491, 496, 504, 505, 506, 508, 509, 524, 526, 528, 530, 531, 532, 533, 536, 537, 540, 546, 547, 550, 552, 562, 564, 565, 566, 567, 568, 570, 571, 572, 578, 594, 604, 608, 609, 610, 611, 614, 619, 620, 626, 628, 629, 630, 631, 635, 641, 645, 646, 649, 650, 655, 657, 662, 677, 710, 719, 737, 738, 740, 741, 745, 746, 747, 750, 751, 752, 753, 754, 757, 767, 769, 771, 783, 784, 785, 786, 789, 795, 806, 815, 823, 825, 830, 836, 841, 847, 853, 862, 863, 897, 908, 909, 910, 911, 956, 959, 981, 982, 997, 1003, 1009, 1031, 1044, 1054, 1059, 1067, 1068, 1087, 1088, 1097, 1103, 1113, 1115, 1118, 1135, 1145, 1149, 1150, 1151, 1152, 1155, 1160, 1161, 1167, 1176, 1182, 1185, 1191, 1192, 1202, 1209, 1211, 1213, 1215, 1219, 1220, 1223, 1224, 1225], "attribut": [2, 5, 48, 49, 50, 51, 61, 71, 142, 295, 737, 738, 740, 741, 746, 747, 750, 752, 753, 754, 853, 1211, 1213, 1215, 1220, 1223, 1224, 1225], "arg": [3, 4, 46, 47, 52, 53, 54, 55, 56, 57, 62, 63, 67, 70, 72, 73, 74, 75, 76, 77, 78, 173, 221, 257, 295, 545, 672, 699, 745, 778, 804, 853, 1068, 1200, 1201, 1219], "kwarg": [3, 4, 46, 47, 52, 53, 54, 55, 56, 57, 62, 63, 67, 70, 72, 73, 74, 75, 76, 77, 78, 117, 161, 173, 221, 257, 295, 545, 745, 778, 804, 853, 1201, 1219, 1226], "order": [5, 15, 40, 58, 59, 60, 64, 66, 79, 85, 107, 117, 136, 138, 139, 156, 165, 173, 183, 184, 185, 186, 187, 188, 203, 220, 221, 222, 231, 235, 239, 245, 256, 260, 262, 266, 295, 319, 326, 336, 361, 362, 423, 471, 486, 493, 499, 552, 561, 565, 566, 567, 568, 570, 572, 575, 576, 577, 587, 588, 618, 628, 629, 630, 631, 644, 656, 657, 659, 672, 735, 745, 756, 761, 771, 778, 781, 782, 783, 784, 785, 786, 790, 800, 809, 814, 819, 824, 825, 853, 872, 879, 890, 892, 917, 918, 985, 1016, 1034, 1049, 1056, 1062, 1088, 1094, 1110, 1112, 1116, 1128, 1159, 1186, 1204, 1205, 1207, 1219, 1227], "categoricalord": [5, 336, 890], "none": [5, 6, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 48, 49, 58, 59, 60, 62, 64, 66, 67, 69, 79, 86, 89, 104, 106, 107, 108, 109, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 154, 158, 162, 165, 171, 172, 182, 184, 185, 187, 188, 189, 195, 199, 203, 204, 205, 207, 208, 210, 213, 215, 218, 219, 222, 231, 232, 235, 241, 242, 244, 245, 247, 252, 254, 257, 261, 262, 263, 264, 265, 266, 277, 295, 305, 307, 308, 309, 321, 327, 339, 345, 347, 350, 357, 361, 362, 388, 391, 392, 406, 413, 414, 415, 416, 417, 420, 421, 422, 428, 435, 437, 440, 441, 450, 452, 453, 454, 460, 462, 463, 471, 476, 480, 486, 487, 488, 489, 490, 492, 498, 505, 507, 508, 509, 517, 520, 522, 537, 538, 539, 542, 546, 549, 552, 553, 556, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 575, 578, 579, 580, 581, 582, 586, 587, 591, 592, 595, 597, 598, 601, 603, 604, 605, 606, 607, 610, 612, 613, 614, 620, 621, 623, 624, 625, 626, 627, 628, 629, 632, 633, 634, 636, 638, 641, 642, 643, 644, 653, 663, 664, 665, 666, 667, 674, 676, 678, 683, 689, 690, 691, 692, 693, 694, 696, 697, 706, 707, 708, 709, 710, 712, 716, 721, 722, 723, 727, 729, 731, 732, 733, 735, 745, 764, 765, 767, 771, 776, 777, 782, 783, 785, 786, 789, 790, 791, 793, 795, 796, 800, 803, 809, 813, 815, 816, 817, 818, 819, 825, 826, 827, 832, 836, 837, 841, 853, 856, 860, 861, 863, 870, 871, 896, 897, 913, 914, 916, 917, 918, 934, 935, 936, 941, 952, 953, 967, 972, 973, 976, 977, 978, 982, 983, 984, 986, 992, 994, 996, 997, 998, 1008, 1013, 1014, 1017, 1020, 1021, 1022, 1025, 1026, 1034, 1039, 1043, 1049, 1050, 1051, 1053, 1055, 1061, 1067, 1068, 1069, 1070, 1071, 1072, 1076, 1086, 1087, 1088, 1092, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1105, 1106, 1107, 1110, 1111, 1114, 1115, 1117, 1118, 1119, 1122, 1123, 1126, 1127, 1130, 1132, 1133, 1136, 1138, 1139, 1142, 1144, 1145, 1146, 1147, 1148, 1151, 1153, 1154, 1155, 1161, 1162, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1173, 1174, 1175, 1177, 1179, 1182, 1197, 1198, 1199, 1201, 1202, 1208, 1219, 1226], "physic": [5, 70, 89, 115, 116, 204, 295, 336, 653, 745, 762, 790, 791, 853, 890, 891, 1202, 1219], "A": [5, 18, 37, 40, 51, 58, 64, 67, 85, 86, 111, 115, 116, 117, 118, 129, 131, 136, 149, 176, 184, 203, 204, 209, 211, 216, 222, 248, 252, 264, 265, 266, 270, 271, 295, 301, 361, 362, 365, 412, 413, 420, 432, 434, 443, 447, 450, 452, 459, 498, 504, 507, 518, 536, 537, 558, 563, 564, 565, 566, 567, 568, 570, 571, 572, 592, 593, 594, 595, 600, 601, 602, 605, 615, 616, 617, 641, 675, 694, 695, 699, 745, 782, 790, 791, 807, 827, 830, 831, 853, 856, 917, 918, 922, 982, 1098, 1099, 1100, 1102, 1105, 1106, 1107, 1133, 1134, 1135, 1136, 1141, 1142, 1143, 1146, 1156, 1157, 1158, 1182, 1219, 1226], "encod": [5, 51, 78, 115, 116, 129, 254, 295, 329, 429, 596, 643, 745, 881, 1137], "set": [5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 17, 18, 20, 21, 22, 25, 30, 31, 32, 35, 37, 39, 40, 41, 42, 43, 44, 51, 58, 59, 60, 79, 80, 105, 107, 110, 115, 116, 117, 120, 121, 123, 126, 127, 129, 132, 133, 134, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 151, 153, 160, 165, 175, 183, 184, 185, 186, 187, 188, 189, 201, 204, 208, 210, 211, 213, 215, 231, 235, 237, 244, 247, 248, 254, 256, 261, 262, 264, 270, 295, 305, 307, 309, 339, 357, 409, 435, 446, 475, 486, 487, 488, 489, 490, 492, 496, 498, 508, 509, 545, 549, 556, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 575, 581, 585, 586, 591, 610, 620, 621, 626, 627, 628, 629, 630, 631, 632, 633, 634, 638, 659, 663, 665, 669, 673, 689, 690, 692, 693, 697, 704, 705, 706, 718, 721, 722, 723, 727, 732, 733, 735, 736, 745, 757, 766, 771, 773, 781, 782, 783, 784, 785, 786, 790, 791, 795, 796, 800, 809, 811, 813, 818, 825, 830, 836, 841, 853, 860, 861, 892, 897, 913, 970, 992, 1006, 1038, 1049, 1050, 1051, 1052, 1053, 1055, 1059, 1061, 1067, 1068, 1086, 1092, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1105, 1106, 1107, 1110, 1111, 1115, 1122, 1126, 1127, 1132, 1151, 1161, 1162, 1167, 1168, 1169, 1170, 1173, 1174, 1175, 1179, 1200, 1207, 1219, 1227], "string": [5, 7, 8, 10, 11, 17, 19, 20, 21, 25, 36, 37, 38, 40, 43, 44, 48, 51, 58, 64, 70, 78, 88, 89, 111, 115, 116, 117, 118, 129, 138, 139, 140, 141, 142, 143, 144, 147, 150, 156, 176, 182, 183, 184, 186, 204, 220, 222, 231, 234, 237, 238, 245, 255, 260, 261, 264, 266, 270, 271, 274, 295, 302, 331, 336, 388, 392, 395, 398, 406, 417, 419, 425, 429, 441, 478, 520, 541, 545, 556, 561, 564, 565, 566, 567, 568, 570, 571, 572, 588, 591, 592, 593, 595, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 636, 641, 643, 664, 666, 672, 674, 675, 676, 683, 687, 689, 690, 692, 693, 699, 712, 716, 724, 727, 729, 732, 733, 735, 745, 761, 773, 781, 782, 784, 791, 809, 811, 812, 813, 819, 824, 830, 831, 834, 853, 856, 883, 889, 890, 949, 953, 956, 959, 967, 980, 998, 1041, 1092, 1131, 1132, 1133, 1134, 1136, 1139, 1140, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1162, 1163, 1164, 1165, 1166, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1177, 1178, 1180, 1181, 1182, 1198, 1219, 1227], "lexic": [5, 336, 856, 890, 892], "appear": [5, 40, 107, 295, 657, 745, 1205, 1219], "default": [5, 9, 12, 14, 15, 19, 32, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 58, 60, 79, 86, 87, 104, 106, 107, 108, 109, 110, 111, 115, 116, 118, 120, 124, 125, 126, 127, 129, 138, 140, 142, 143, 144, 145, 146, 147, 151, 162, 165, 168, 183, 184, 185, 186, 187, 188, 189, 201, 203, 204, 211, 213, 220, 222, 231, 232, 233, 234, 235, 241, 246, 248, 254, 262, 264, 265, 267, 272, 295, 304, 305, 307, 336, 357, 391, 392, 406, 411, 413, 414, 415, 416, 435, 475, 486, 491, 492, 496, 498, 500, 508, 517, 534, 535, 537, 542, 549, 552, 556, 561, 564, 565, 566, 567, 568, 570, 571, 572, 575, 578, 581, 590, 591, 600, 610, 614, 620, 621, 626, 627, 628, 629, 632, 633, 634, 636, 638, 659, 660, 663, 665, 669, 673, 677, 679, 689, 690, 691, 692, 693, 697, 700, 704, 705, 706, 707, 718, 721, 726, 727, 732, 733, 734, 736, 745, 766, 767, 771, 773, 781, 782, 783, 784, 785, 786, 790, 791, 800, 809, 813, 815, 820, 825, 828, 853, 860, 861, 890, 897, 913, 914, 952, 953, 967, 973, 975, 976, 977, 978, 992, 1038, 1049, 1054, 1055, 1059, 1061, 1067, 1077, 1078, 1082, 1086, 1088, 1092, 1110, 1118, 1122, 1130, 1132, 1133, 1141, 1151, 1155, 1161, 1162, 1167, 1168, 1169, 1170, 1173, 1174, 1175, 1177, 1179, 1207, 1208, 1219, 1227], "classmethod": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 429, 745, 769, 853], "activ": [6, 12, 13, 23, 24, 26, 27, 28, 29, 33, 34, 472, 601, 1035, 1142], "bool": [6, 12, 13, 14, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 37, 39, 40, 43, 45, 58, 59, 60, 79, 85, 86, 87, 88, 89, 104, 105, 109, 111, 115, 116, 120, 121, 123, 125, 126, 127, 129, 132, 133, 134, 135, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 150, 153, 156, 157, 158, 159, 162, 167, 172, 173, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 192, 194, 196, 197, 198, 203, 204, 211, 220, 222, 231, 234, 235, 239, 243, 245, 248, 252, 254, 256, 257, 260, 261, 262, 263, 265, 266, 268, 270, 278, 280, 282, 285, 295, 304, 305, 306, 307, 308, 309, 319, 326, 328, 329, 331, 332, 334, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 375, 391, 393, 406, 411, 412, 413, 414, 415, 416, 432, 434, 437, 441, 442, 443, 445, 446, 447, 449, 450, 452, 453, 454, 455, 457, 459, 462, 463, 467, 472, 475, 486, 493, 496, 499, 504, 505, 507, 509, 513, 514, 515, 516, 517, 520, 536, 537, 538, 540, 543, 544, 549, 552, 554, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 575, 577, 580, 585, 587, 588, 591, 592, 593, 595, 596, 598, 614, 615, 616, 617, 622, 623, 625, 632, 633, 634, 636, 638, 644, 656, 659, 662, 663, 664, 665, 666, 667, 669, 672, 673, 677, 680, 684, 689, 690, 691, 692, 693, 704, 705, 707, 710, 718, 721, 727, 732, 733, 735, 736, 745, 761, 763, 764, 766, 767, 773, 775, 777, 778, 781, 782, 783, 784, 785, 786, 790, 791, 795, 796, 800, 805, 809, 814, 817, 819, 824, 825, 826, 827, 830, 838, 840, 842, 845, 853, 856, 860, 861, 863, 872, 879, 881, 886, 889, 892, 896, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 932, 952, 954, 967, 973, 974, 976, 977, 978, 985, 991, 994, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1021, 1025, 1026, 1030, 1031, 1032, 1035, 1038, 1049, 1056, 1059, 1062, 1068, 1080, 1083, 1084, 1086, 1088, 1089, 1090, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1110, 1111, 1113, 1114, 1115, 1116, 1121, 1126, 1128, 1132, 1133, 1134, 1136, 1137, 1139, 1155, 1156, 1157, 1158, 1163, 1164, 1166, 1173, 1174, 1175, 1177, 1179, 1199, 1200, 1201, 1204, 1207, 1209, 1219, 1226], "decim": [6, 14, 15, 16, 32, 33, 37, 40, 58, 256, 295, 573, 635, 745, 853, 1108, 1176, 1219], "temporari": 6, "remov": [6, 9, 90, 115, 116, 129, 153, 163, 208, 210, 215, 247, 254, 295, 309, 406, 417, 506, 509, 529, 610, 620, 626, 627, 628, 629, 630, 631, 696, 745, 770, 853, 913, 953, 967, 1086, 1151, 1161, 1167, 1168, 1169, 1170, 1171, 1172, 1175, 1209, 1219], "onc": [6, 67, 115, 116, 120, 149, 207, 233, 235, 274, 295, 486, 509, 575, 630, 631, 745, 762, 834, 853, 1049, 1068, 1110, 1171, 1172, 1219], "stabil": [6, 189, 295, 435, 745, 992, 1219], "current": [6, 7, 8, 10, 11, 35, 66, 105, 111, 117, 118, 127, 134, 158, 159, 203, 204, 295, 371, 392, 498, 542, 745, 757, 764, 765, 766, 790, 791, 853, 856, 896, 900, 920, 928, 953, 1082, 1219, 1226], "consid": [6, 86, 88, 89, 115, 116, 129, 135, 138, 139, 140, 141, 165, 167, 177, 200, 207, 213, 233, 262, 264, 265, 295, 309, 339, 356, 392, 437, 507, 509, 564, 565, 566, 567, 568, 570, 571, 572, 680, 698, 741, 745, 767, 771, 787, 794, 800, 825, 827, 841, 853, 889, 892, 897, 912, 953, 974, 994, 1008, 1068, 1086, 1111, 1113, 1114, 1219], "beta": 6, "cfg": [7, 9, 22, 151], "previous": [7, 8], "save": [7, 8, 11, 184, 204, 231, 266, 295, 363, 371, 388, 392, 406, 561, 564, 565, 566, 567, 568, 570, 571, 572, 689, 690, 692, 693, 694, 732, 733, 741, 745, 757, 782, 791, 809, 853, 928, 949, 953, 967], "option": [7, 8, 9, 10, 11, 35, 39, 40, 49, 79, 115, 117, 119, 120, 121, 123, 127, 130, 131, 132, 134, 135, 137, 142, 143, 144, 145, 146, 147, 148, 184, 199, 204, 213, 252, 256, 261, 265, 295, 457, 562, 564, 565, 566, 567, 568, 570, 571, 572, 585, 593, 617, 621, 659, 707, 727, 735, 745, 757, 782, 790, 791, 800, 813, 827, 853, 856, 1017, 1021, 1097, 1099, 1100, 1101, 1102, 1103, 1105, 1106, 1107, 1126, 1134, 1158, 1162, 1197, 1207, 1219], "from": [7, 8, 9, 10, 11, 15, 21, 33, 37, 39, 40, 58, 64, 65, 66, 71, 79, 87, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 157, 162, 163, 168, 170, 175, 182, 184, 187, 201, 202, 203, 204, 205, 213, 222, 226, 231, 232, 234, 235, 237, 238, 254, 261, 262, 264, 265, 266, 295, 346, 357, 358, 363, 364, 365, 366, 367, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 413, 417, 429, 440, 457, 486, 498, 509, 534, 535, 537, 542, 545, 549, 551, 561, 563, 564, 565, 567, 570, 571, 572, 575, 588, 600, 601, 603, 604, 614, 628, 629, 630, 631, 632, 633, 634, 638, 657, 670, 671, 674, 688, 689, 690, 691, 692, 694, 721, 731, 732, 733, 741, 744, 745, 763, 769, 770, 775, 782, 785, 790, 791, 800, 807, 809, 811, 812, 825, 827, 832, 853, 856, 913, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 975, 981, 1017, 1021, 1049, 1061, 1077, 1078, 1079, 1082, 1086, 1098, 1110, 1141, 1142, 1144, 1145, 1155, 1171, 1172, 1173, 1174, 1175, 1179, 1210, 1219, 1226, 1227], "json": [7, 8, 10, 11, 43, 44, 124, 125, 131, 133, 295, 429, 522, 603, 604, 605, 643, 745, 757, 769, 813, 853, 1144, 1145, 1146], "produc": [7, 8, 144, 145, 147, 203, 295, 468, 469, 517, 709, 790, 795, 796, 853, 1031, 1032], "load_from_fil": [7, 10, 11], "file": [7, 8, 10, 11, 36, 37, 41, 42, 43, 44, 45, 58, 59, 60, 114, 115, 116, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 170, 295, 522, 769, 813, 853, 981, 1219], "path": [8, 11, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 58, 59, 60, 114, 115, 116, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 295, 522, 577, 605, 745, 769, 813, 817, 853, 1116, 1146, 1219, 1227], "load": [8, 10, 11, 107, 109, 117, 119, 120, 126, 130, 131, 146, 148, 295, 745, 757, 787, 794, 853, 1227], "reset": [9, 151], "state": [9, 85, 86, 97, 680, 684, 757, 766, 767, 773, 775, 805, 817, 853], "note": [9, 15, 25, 39, 40, 64, 68, 69, 70, 79, 86, 88, 89, 104, 105, 106, 108, 110, 111, 115, 117, 118, 119, 120, 124, 125, 127, 130, 131, 135, 138, 140, 143, 145, 147, 149, 151, 153, 156, 161, 162, 171, 184, 185, 187, 188, 189, 199, 200, 201, 203, 204, 207, 218, 221, 222, 231, 232, 233, 234, 241, 253, 256, 260, 261, 265, 266, 270, 295, 339, 349, 350, 361, 362, 384, 385, 388, 392, 406, 435, 441, 450, 452, 456, 472, 475, 491, 496, 498, 509, 528, 530, 531, 532, 533, 547, 556, 561, 564, 565, 566, 567, 568, 569, 570, 571, 572, 578, 585, 592, 600, 601, 602, 606, 607, 615, 627, 628, 629, 632, 641, 646, 647, 655, 678, 680, 689, 690, 692, 693, 694, 698, 707, 718, 720, 721, 732, 733, 735, 736, 741, 745, 756, 761, 767, 775, 776, 782, 783, 785, 786, 787, 791, 794, 807, 809, 815, 817, 819, 824, 827, 830, 853, 897, 906, 907, 914, 917, 918, 945, 946, 949, 967, 991, 992, 1035, 1038, 1054, 1059, 1068, 1092, 1104, 1111, 1114, 1118, 1121, 1126, 1133, 1141, 1142, 1143, 1147, 1148, 1156, 1168, 1169, 1170, 1173, 1182, 1189, 1200, 1219, 1226], "oper": [9, 39, 40, 70, 87, 89, 94, 95, 104, 106, 107, 108, 109, 110, 115, 117, 127, 154, 159, 170, 173, 176, 183, 186, 193, 194, 205, 207, 214, 218, 220, 221, 225, 229, 231, 234, 235, 241, 251, 256, 257, 261, 264, 273, 274, 295, 302, 303, 306, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 412, 413, 427, 432, 434, 456, 459, 486, 487, 488, 489, 490, 491, 498, 504, 521, 524, 526, 528, 530, 531, 536, 537, 540, 546, 547, 554, 561, 575, 578, 645, 646, 655, 662, 663, 665, 675, 676, 695, 745, 757, 765, 775, 781, 784, 787, 790, 794, 800, 801, 809, 815, 834, 853, 900, 904, 905, 906, 907, 908, 909, 910, 911, 912, 981, 1049, 1050, 1051, 1052, 1053, 1054, 1090, 1110, 1118, 1195, 1199, 1200, 1201, 1209, 1219], "environ": [9, 35, 127, 134, 146, 149], "ani": [9, 37, 39, 40, 45, 48, 58, 84, 104, 105, 106, 107, 108, 109, 110, 115, 116, 117, 119, 120, 121, 123, 124, 125, 127, 129, 130, 131, 132, 134, 142, 144, 145, 147, 151, 154, 161, 165, 170, 172, 173, 176, 199, 201, 202, 207, 211, 220, 221, 232, 233, 234, 248, 252, 253, 256, 257, 262, 264, 265, 295, 302, 305, 306, 309, 334, 393, 412, 413, 422, 427, 430, 432, 434, 446, 459, 466, 472, 504, 505, 507, 508, 509, 521, 524, 526, 530, 531, 536, 537, 540, 541, 545, 547, 556, 557, 562, 563, 576, 591, 593, 614, 628, 629, 630, 631, 632, 633, 634, 636, 638, 645, 646, 649, 655, 662, 663, 666, 667, 677, 707, 710, 735, 745, 771, 777, 778, 804, 825, 827, 853, 856, 860, 863, 954, 981, 984, 988, 1006, 1020, 1029, 1035, 1067, 1068, 1092, 1093, 1097, 1098, 1111, 1112, 1115, 1132, 1134, 1155, 1173, 1174, 1175, 1177, 1179, 1191, 1199, 1200, 1201, 1219, 1226, 1227], "local": [9, 39, 117, 119, 130, 131, 134, 147, 295, 406, 543, 544, 745, 889, 891, 924, 925, 957, 967, 1083, 1084, 1219], "non": [9, 37, 39, 40, 49, 58, 79, 109, 136, 185, 188, 202, 213, 231, 237, 238, 241, 261, 265, 270, 271, 295, 339, 345, 441, 498, 508, 542, 556, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 594, 595, 601, 606, 641, 664, 666, 674, 675, 676, 678, 683, 687, 694, 712, 716, 722, 723, 724, 727, 729, 745, 783, 786, 800, 809, 811, 812, 815, 827, 830, 831, 853, 897, 914, 998, 1061, 1082, 1092, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1105, 1106, 1107, 1118, 1135, 1136, 1142, 1147, 1182, 1200, 1219], "env": [9, 148], "back": [9, 79, 170, 257, 295, 541, 639, 745, 813, 853, 981, 1180, 1201, 1219], "contain": [10, 37, 38, 39, 40, 58, 79, 84, 105, 106, 109, 111, 117, 119, 130, 131, 138, 139, 144, 156, 165, 184, 187, 202, 218, 222, 260, 265, 277, 295, 305, 307, 309, 331, 332, 446, 508, 509, 591, 598, 600, 602, 605, 624, 625, 641, 663, 665, 678, 710, 745, 761, 771, 782, 785, 805, 824, 827, 837, 853, 856, 860, 861, 913, 1067, 1074, 1086, 1132, 1139, 1141, 1143, 1146, 1165, 1166, 1182, 1195, 1219], "save_to_fil": 10, "json_str": 10, "written": [11, 36, 37, 40, 41, 42, 43, 44, 45, 58, 59, 60, 295, 813, 853], "leav": [11, 213, 295, 498, 800, 853], "directli": [11, 35, 66, 86, 117, 145, 147, 151, 234, 295, 414, 415, 416, 556, 721, 745, 767, 853, 976, 977, 978, 1092, 1219, 1227], "json_fil": 11, "ascii": [12, 25, 593, 606, 607, 609, 617, 619, 641, 1134, 1147, 1148, 1150, 1158, 1160, 1182], "charact": [12, 14, 17, 25, 31, 32, 33, 37, 38, 58, 115, 116, 129, 295, 388, 599, 601, 606, 607, 609, 610, 611, 612, 613, 619, 620, 622, 623, 626, 627, 628, 629, 630, 631, 641, 805, 853, 856, 949, 1140, 1142, 1147, 1148, 1150, 1151, 1152, 1153, 1154, 1160, 1161, 1163, 1164, 1167, 1168, 1169, 1170, 1182], "displai": [12, 15, 16, 17, 18, 22, 24, 28, 30, 40, 182, 295], "tabl": [12, 20, 21, 22, 24, 25, 26, 27, 28, 30, 31, 38, 39, 40, 65, 66, 67, 69, 104, 111, 115, 116, 119, 120, 129, 130, 131, 203, 222, 251, 257, 264, 265, 295, 790, 827, 853, 1201, 1219, 1226], "outlin": 12, "fals": [12, 13, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 33, 35, 37, 39, 40, 43, 45, 58, 59, 60, 64, 79, 85, 86, 105, 109, 111, 115, 116, 117, 120, 121, 123, 125, 126, 127, 129, 133, 134, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 153, 156, 157, 158, 159, 162, 167, 176, 181, 182, 183, 184, 185, 186, 187, 188, 192, 194, 196, 197, 198, 201, 203, 204, 205, 210, 211, 217, 218, 220, 222, 223, 231, 232, 233, 234, 235, 239, 243, 245, 248, 252, 254, 256, 257, 260, 261, 262, 265, 266, 268, 270, 278, 280, 282, 283, 285, 288, 295, 305, 306, 307, 309, 319, 326, 328, 331, 332, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 375, 391, 393, 406, 411, 412, 413, 414, 415, 416, 434, 437, 441, 442, 443, 445, 446, 447, 449, 450, 452, 453, 454, 455, 457, 459, 462, 463, 467, 472, 475, 486, 493, 496, 499, 504, 505, 507, 509, 513, 516, 518, 520, 536, 537, 538, 540, 543, 544, 549, 552, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 575, 577, 580, 585, 587, 588, 591, 592, 593, 595, 598, 603, 614, 615, 616, 617, 622, 623, 625, 632, 633, 634, 636, 656, 659, 662, 663, 664, 665, 666, 669, 672, 673, 677, 680, 684, 689, 690, 691, 692, 693, 704, 705, 707, 718, 721, 727, 732, 733, 735, 736, 745, 761, 763, 764, 765, 766, 767, 773, 775, 781, 782, 783, 784, 785, 786, 790, 791, 793, 795, 796, 805, 809, 814, 817, 819, 824, 825, 827, 830, 838, 840, 842, 843, 845, 848, 853, 856, 860, 861, 872, 879, 886, 889, 892, 895, 896, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 932, 952, 954, 967, 973, 974, 976, 977, 978, 985, 991, 998, 999, 1000, 1002, 1004, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1021, 1025, 1026, 1035, 1038, 1049, 1056, 1059, 1062, 1074, 1080, 1083, 1084, 1086, 1088, 1089, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1110, 1113, 1116, 1121, 1126, 1128, 1132, 1133, 1134, 1136, 1139, 1144, 1155, 1156, 1157, 1158, 1163, 1164, 1166, 1173, 1174, 1175, 1177, 1200, 1201, 1204, 1207, 1209, 1210, 1219, 1226], "revert": [12, 14, 15], "utf8_full_condens": [12, 25, 111], "format": [12, 16, 20, 21, 25, 37, 40, 41, 42, 58, 114, 115, 116, 117, 129, 135, 169, 182, 201, 213, 233, 234, 253, 293, 295, 392, 395, 398, 520, 632, 633, 634, 638, 694, 774, 800, 813, 853, 956, 959, 1173, 1174, 1175, 1179, 1218], "style": [12, 25, 40, 117, 127, 222, 295], "abc": [12, 21, 23, 24, 25, 26, 27, 28, 29, 30, 302, 601, 615, 628, 745, 856, 1142, 1156], "xyz": [12, 21, 23, 24, 25, 26, 27, 28, 29, 30, 302, 595, 601, 745, 1136, 1142, 1197, 1219], "f64": [12, 14, 15, 16, 20, 23, 24, 26, 27, 28, 29, 30, 32, 61, 64, 79, 81, 83, 87, 105, 107, 135, 145, 158, 159, 161, 162, 163, 166, 171, 172, 176, 181, 182, 183, 184, 194, 195, 203, 204, 209, 210, 211, 212, 216, 222, 223, 224, 244, 245, 246, 248, 267, 270, 274, 278, 280, 282, 283, 284, 285, 287, 288, 295, 301, 304, 311, 312, 313, 314, 315, 316, 334, 337, 338, 342, 343, 344, 356, 357, 358, 361, 362, 393, 411, 412, 413, 414, 415, 416, 417, 418, 421, 422, 426, 427, 432, 434, 440, 450, 452, 453, 454, 456, 457, 459, 472, 483, 500, 501, 502, 504, 510, 511, 512, 523, 526, 528, 534, 535, 536, 537, 542, 546, 549, 550, 551, 552, 556, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 583, 584, 585, 589, 590, 651, 652, 655, 660, 670, 671, 674, 675, 677, 679, 695, 696, 710, 713, 714, 725, 726, 734, 741, 745, 764, 770, 776, 777, 781, 782, 789, 790, 791, 798, 799, 806, 819, 820, 828, 830, 832, 834, 838, 840, 842, 843, 844, 845, 847, 848, 853, 856, 864, 865, 866, 867, 868, 869, 893, 894, 901, 902, 903, 912, 913, 914, 917, 918, 954, 976, 977, 978, 983, 987, 994, 997, 1035, 1082, 1086, 1088, 1092, 1098, 1100, 1101, 1103, 1104, 1105, 1107, 1108, 1109, 1124, 1125, 1129, 1193, 1194, 1206, 1219, 1227], "multi": [13, 40, 115, 116, 295, 417, 600, 745, 1141], "automat": [13, 66, 69, 104, 106, 107, 108, 110, 111, 115, 116, 117, 118, 120, 124, 125, 129, 133, 145, 147, 149, 237, 270, 295, 508, 556, 627, 628, 629, 745, 811, 830, 853, 1067, 1092, 1168, 1169, 1170, 1219, 1226], "turn": [13, 58, 59, 60, 85, 86, 115, 116, 129, 639, 766, 767, 773, 775, 795, 796, 805, 853, 1180], "struct": [13, 111, 218, 237, 259, 263, 270, 295, 357, 437, 498, 549, 559, 560, 602, 603, 623, 624, 659, 680, 681, 683, 684, 685, 709, 745, 811, 826, 830, 841, 853, 913, 1061, 1086, 1095, 1143, 1144, 1162, 1164, 1165, 1219], "v": [13, 14, 45, 66, 67, 168, 295, 576, 745, 1112, 1219], "v2": [13, 121, 132], "out": [13, 19, 58, 59, 60, 111, 137, 231, 234, 295, 329, 475, 476, 496, 592, 596, 735, 809, 853, 881, 1038, 1039, 1059, 1133, 1137], "separ": [14, 15, 29, 32, 37, 58, 113, 115, 116, 129, 220, 222, 254, 261, 263, 295, 309, 473, 478, 509, 599, 676, 680, 681, 684, 685, 745, 826, 853, 1036, 1041, 1140, 1188, 1196, 1219], "set_thousands_separ": 14, "thousand": [14, 32], "group": [14, 32, 40, 45, 60, 64, 116, 183, 184, 185, 186, 187, 188, 202, 218, 220, 222, 231, 234, 264, 266, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 295, 303, 356, 419, 425, 430, 433, 472, 509, 517, 519, 541, 552, 560, 561, 587, 588, 592, 600, 601, 602, 615, 659, 710, 745, 781, 782, 783, 784, 785, 786, 809, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 853, 856, 912, 1035, 1096, 1133, 1141, 1142, 1143, 1156, 1207, 1219], "9876": 14, "54321": 14, "1010101": 14, "123456": [14, 856], "78": 14, "tbl_cell_numeric_align": [14, 15, 32], "right": [14, 15, 20, 21, 23, 32, 40, 115, 116, 138, 139, 140, 141, 184, 185, 187, 188, 203, 204, 231, 265, 295, 357, 414, 415, 416, 441, 487, 488, 489, 490, 549, 561, 564, 565, 566, 567, 568, 570, 571, 572, 576, 585, 619, 674, 689, 690, 692, 693, 732, 733, 745, 782, 783, 785, 786, 790, 791, 809, 827, 853, 913, 976, 977, 978, 998, 1050, 1051, 1052, 1053, 1086, 1112, 1126, 1160, 1219], "thousands_separ": [14, 15, 32], "decimal_separ": [14, 32], "float_precis": [14, 15, 32, 37, 40, 58, 295, 853], "print": [14, 15, 16, 17, 18, 20, 21, 22, 24, 25, 30, 32, 33, 116, 137, 138, 140, 166, 182, 183, 202, 205, 255, 273, 295, 439, 520, 745, 766, 788, 853, 1006, 1198, 1219, 1227], "876": 14, "543": 14, "010": [14, 636, 1177], "101": [14, 32, 365, 636, 1177, 1227], "000": [14, 15, 32, 40, 295, 1227], "123": [14, 595, 601, 616, 641, 735, 856, 1136, 1142, 1157, 1182, 1197, 1219], "456": [14, 15, 365, 856, 922, 1197, 1219], "780": 14, "precis": [15, 16, 37, 40, 48, 49, 58, 117, 201, 233, 234, 253, 295, 364, 635, 853, 856, 921, 1176], "control": [15, 16, 40, 69, 86, 87, 143, 295, 556, 745, 767, 773, 853, 1092, 1219], "number": [15, 16, 17, 18, 19, 22, 30, 37, 38, 40, 45, 58, 60, 70, 79, 89, 98, 104, 106, 108, 110, 113, 115, 116, 118, 120, 124, 125, 126, 127, 129, 133, 134, 136, 143, 145, 146, 148, 149, 156, 158, 168, 169, 171, 172, 182, 190, 201, 202, 205, 206, 217, 218, 235, 241, 242, 246, 249, 260, 264, 267, 277, 279, 289, 295, 320, 327, 333, 345, 356, 357, 359, 373, 376, 381, 383, 393, 407, 408, 410, 414, 415, 416, 420, 422, 428, 436, 450, 452, 460, 461, 470, 477, 480, 481, 486, 491, 495, 498, 545, 549, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 573, 574, 575, 578, 579, 581, 590, 606, 607, 608, 611, 615, 623, 624, 635, 648, 654, 660, 677, 678, 679, 694, 702, 722, 723, 726, 730, 734, 745, 761, 764, 774, 775, 776, 777, 787, 794, 805, 815, 816, 820, 822, 824, 828, 837, 839, 849, 853, 885, 896, 912, 913, 915, 930, 933, 942, 944, 954, 968, 969, 971, 975, 976, 977, 978, 982, 984, 993, 1005, 1022, 1023, 1033, 1040, 1043, 1044, 1049, 1054, 1058, 1061, 1074, 1075, 1086, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1105, 1106, 1107, 1108, 1109, 1110, 1118, 1119, 1122, 1130, 1147, 1148, 1149, 1152, 1156, 1164, 1165, 1176, 1190, 1203, 1208, 1219, 1227], "place": [15, 16, 37, 58, 156, 164, 170, 192, 193, 194, 222, 227, 229, 234, 242, 245, 260, 268, 295, 319, 478, 579, 587, 745, 761, 816, 819, 824, 853, 862, 872, 981, 1041, 1089, 1119, 1128, 1219], "float": [15, 16, 37, 40, 52, 53, 58, 120, 135, 138, 139, 140, 141, 142, 145, 147, 153, 162, 168, 171, 204, 224, 235, 242, 287, 295, 338, 357, 361, 362, 393, 411, 412, 413, 414, 415, 416, 421, 426, 432, 434, 440, 443, 447, 450, 452, 453, 454, 459, 467, 486, 500, 504, 510, 523, 534, 535, 536, 537, 546, 549, 550, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 573, 575, 655, 719, 721, 745, 776, 791, 806, 816, 817, 847, 853, 856, 886, 894, 913, 914, 916, 917, 918, 954, 973, 975, 976, 977, 978, 983, 987, 994, 1005, 1021, 1030, 1031, 1032, 1049, 1063, 1070, 1071, 1077, 1078, 1085, 1086, 1087, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1105, 1106, 1107, 1108, 1110, 1111, 1112, 1114, 1115, 1126, 1130, 1189, 1200, 1208, 1219, 1227], "point": [15, 16, 40, 52, 53, 145, 147, 171, 184, 187, 205, 295, 338, 357, 361, 393, 421, 426, 450, 452, 486, 509, 573, 575, 745, 776, 782, 785, 795, 796, 807, 853, 894, 913, 917, 954, 983, 987, 1005, 1049, 1086, 1108, 1110, 1200, 1219], "standard": [15, 40, 246, 256, 295, 376, 415, 570, 585, 590, 605, 726, 741, 745, 820, 853, 933, 977, 1126, 1130, 1146, 1219, 1227], "behaviour": [15, 79, 87, 165, 295, 592, 600, 601, 615, 655, 745, 771, 853, 1133, 1141, 1142, 1156], "when": [15, 19, 22, 24, 28, 37, 40, 45, 48, 58, 60, 69, 70, 71, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 115, 116, 117, 120, 121, 123, 126, 127, 129, 130, 132, 133, 135, 138, 139, 140, 141, 145, 147, 154, 156, 166, 168, 170, 172, 176, 184, 185, 187, 188, 203, 207, 221, 231, 232, 234, 237, 238, 241, 245, 254, 256, 260, 262, 265, 271, 295, 339, 414, 415, 416, 422, 491, 498, 508, 518, 545, 556, 560, 561, 578, 587, 588, 593, 606, 607, 617, 627, 628, 629, 632, 672, 680, 684, 698, 745, 761, 777, 782, 783, 785, 786, 790, 795, 796, 809, 811, 812, 815, 819, 824, 825, 827, 831, 853, 897, 975, 976, 977, 978, 981, 984, 1054, 1067, 1092, 1096, 1111, 1114, 1118, 1134, 1147, 1148, 1158, 1168, 1169, 1170, 1173, 1196, 1219], "larger": [15, 58, 59, 60, 677, 766, 853], "should": [15, 38, 40, 58, 59, 60, 87, 104, 106, 108, 110, 119, 124, 125, 127, 129, 133, 135, 142, 143, 147, 156, 163, 201, 204, 207, 232, 233, 234, 253, 254, 260, 263, 281, 295, 303, 336, 356, 409, 417, 450, 452, 472, 509, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 576, 585, 659, 694, 696, 707, 710, 722, 723, 735, 745, 761, 770, 775, 790, 791, 796, 813, 817, 819, 824, 826, 853, 856, 890, 912, 970, 1035, 1068, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1105, 1106, 1107, 1112, 1126, 1207, 1219], "ensur": [15, 40, 118, 144, 145, 147, 183, 186, 220, 232, 295, 441, 745, 781, 784, 795, 796, 853, 856, 1200, 1219], "awar": [15, 201, 233, 234, 253, 295, 593, 617, 775, 853, 1134, 1158, 1175], "both": [15, 30, 37, 58, 70, 88, 89, 184, 185, 187, 188, 203, 204, 214, 231, 232, 265, 295, 308, 339, 357, 417, 441, 549, 561, 564, 565, 566, 567, 568, 570, 571, 572, 689, 690, 692, 693, 732, 733, 741, 745, 756, 782, 783, 785, 786, 790, 791, 801, 809, 827, 853, 897, 998, 1008, 1219], "limit": [15, 16, 60, 117, 118, 129, 172, 295, 327, 340, 341, 422, 428, 745, 777, 787, 853, 898, 899, 984, 1219], "represent": [15, 43, 44, 255, 295, 336, 369, 373, 376, 377, 379, 381, 383, 386, 389, 390, 393, 407, 408, 410, 653, 745, 773, 793, 853, 890, 891, 926, 930, 932, 933, 937, 939, 942, 944, 947, 950, 951, 954, 968, 969, 971, 1198, 1202, 1219], "look": [15, 184, 295, 328, 498, 507, 745, 782, 853, 880], "appli": [15, 25, 37, 40, 58, 64, 87, 129, 142, 145, 147, 176, 207, 221, 281, 295, 367, 368, 369, 373, 375, 376, 377, 379, 381, 383, 386, 389, 390, 393, 396, 407, 408, 410, 415, 416, 505, 507, 509, 545, 562, 564, 565, 567, 571, 615, 632, 633, 634, 638, 680, 681, 684, 685, 698, 708, 709, 710, 720, 735, 745, 787, 794, 795, 796, 804, 841, 853, 897, 924, 925, 926, 930, 932, 933, 937, 939, 942, 944, 947, 950, 951, 954, 957, 968, 969, 971, 977, 978, 1068, 1097, 1099, 1100, 1102, 1106, 1156, 1173, 1174, 1175, 1179, 1219], "float64": [15, 37, 40, 58, 107, 115, 145, 166, 168, 176, 236, 257, 270, 295, 311, 312, 313, 314, 315, 316, 334, 342, 343, 344, 358, 393, 417, 450, 452, 551, 583, 584, 651, 652, 696, 718, 721, 736, 745, 772, 810, 830, 853, 856, 954, 1201, 1206, 1219], "doe": [15, 37, 39, 58, 79, 87, 98, 104, 106, 107, 108, 110, 111, 115, 116, 117, 119, 120, 124, 125, 129, 130, 133, 135, 159, 170, 189, 202, 203, 232, 233, 234, 262, 270, 295, 409, 435, 498, 508, 628, 629, 657, 741, 745, 765, 775, 790, 796, 825, 830, 853, 900, 970, 981, 991, 992, 1067, 1121, 1209, 1219], "cover": 15, "nativ": [15, 115, 117, 120, 121, 123, 127, 143, 201, 207, 233, 234, 253, 281, 295, 509, 710, 745, 751, 841, 1068, 1219, 1227], "level": [15, 40, 45, 60, 129, 132, 133, 134, 145, 176, 207, 218, 295, 423, 745, 787, 794, 853], "larg": [15, 16, 19, 79, 117], "maximum": [15, 31, 37, 58, 115, 116, 129, 135, 143, 144, 145, 147, 182, 184, 208, 209, 295, 464, 510, 534, 543, 552, 711, 712, 745, 782, 797, 853, 934, 1027, 1069, 1077, 1083, 1088, 1219], "import": [15, 21, 33, 36, 37, 39, 40, 41, 42, 45, 48, 79, 104, 105, 108, 109, 129, 135, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 157, 162, 163, 165, 182, 184, 202, 204, 213, 220, 222, 254, 256, 257, 264, 266, 295, 358, 363, 364, 365, 366, 369, 371, 372, 373, 375, 376, 377, 381, 383, 384, 385, 388, 389, 390, 391, 392, 393, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 563, 564, 565, 567, 570, 571, 572, 670, 671, 689, 690, 692, 694, 732, 733, 741, 745, 757, 763, 767, 769, 770, 771, 782, 791, 796, 800, 813, 853, 901, 903, 920, 921, 922, 923, 924, 925, 926, 928, 929, 930, 932, 933, 934, 935, 936, 937, 939, 941, 942, 944, 945, 946, 947, 949, 950, 951, 952, 953, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 1002, 1007, 1011, 1012, 1017, 1098, 1124, 1193, 1219, 1227], "pi": [15, 358, 745, 901, 903, 1124, 1193, 1219], "e": [15, 36, 37, 39, 41, 42, 45, 58, 105, 114, 115, 116, 120, 121, 122, 123, 124, 125, 126, 128, 132, 135, 182, 190, 200, 249, 251, 256, 264, 295, 302, 309, 411, 417, 441, 500, 509, 514, 515, 517, 518, 519, 520, 521, 580, 585, 628, 629, 696, 710, 735, 745, 769, 793, 807, 853, 856, 973, 974, 998, 1113, 1126, 1200, 1219, 1227], "const": 15, "15": [15, 40, 137, 144, 184, 194, 207, 231, 295, 356, 359, 373, 381, 385, 392, 406, 545, 561, 571, 604, 681, 732, 745, 782, 809, 853, 912, 915, 953, 967, 1145, 1219], "141592653589793": 15, "718281828459045": [15, 411, 500, 745, 973, 1063, 1219], "align": [15, 20, 21, 40, 79, 87, 295], "numer": [15, 21, 37, 40, 58, 157, 163, 204, 213, 222, 264, 295, 302, 339, 427, 441, 502, 524, 526, 546, 555, 580, 602, 641, 645, 655, 745, 757, 763, 770, 791, 800, 853, 856, 897, 914, 974, 998, 1015, 1113, 1120, 1143, 1182, 1200, 1219, 1227], "cleanli": [15, 182, 295], "line": [15, 25, 40, 115, 116, 120, 129, 182, 196, 198, 295, 600, 1141], "up": [15, 40, 71, 115, 116, 118, 129, 201, 204, 233, 234, 253, 295, 309, 338, 509, 745, 790, 791, 796, 853, 856, 894, 1219], "xx": [15, 80, 82, 144, 147, 856], "yy": [15, 80, 82, 144, 147, 856], "11111111": 15, "44444444444": 15, "100000": [15, 32], "987654321": 15, "23456789": 15, "11": [15, 21, 45, 60, 105, 137, 145, 231, 295, 304, 384, 385, 388, 392, 406, 440, 542, 552, 561, 563, 571, 586, 662, 728, 733, 745, 766, 767, 787, 794, 805, 809, 822, 853, 856, 949, 953, 967, 1068, 1098, 1219], "111": 15, "100": [15, 22, 32, 40, 107, 110, 115, 116, 124, 129, 133, 241, 295, 556, 578, 593, 603, 604, 617, 635, 745, 815, 853, 1092, 1099, 1100, 1102, 1118, 1134, 1144, 1145, 1158, 1176, 1219, 1227], "988": 15, "44": [15, 214, 295, 360, 745, 801, 853], "444": 15, "23": [15, 137, 184, 231, 295, 365, 369, 373, 381, 389, 392, 408, 561, 564, 565, 567, 570, 571, 572, 691, 694, 731, 732, 733, 745, 782, 809, 853, 856, 922, 930, 1227], "789": [15, 856], "fmt": [16, 439, 699, 745, 788, 853], "floatfmt": 16, "mix": [16, 914, 1175, 1219], "how": [16, 39, 40, 79, 87, 107, 110, 118, 127, 134, 165, 203, 222, 264, 265, 295, 336, 359, 391, 392, 406, 440, 468, 469, 470, 541, 555, 569, 603, 604, 632, 634, 691, 735, 745, 771, 790, 827, 853, 890, 915, 952, 953, 967, 1031, 1032, 1033, 1104, 1144, 1145, 1173, 1175, 1219], "full": [16, 48, 79, 84, 87, 115, 116, 119, 129, 130, 131, 135, 184, 185, 187, 188, 231, 295, 561, 632, 633, 634, 638, 745, 782, 783, 785, 786, 795, 796, 809, 853, 856, 1173, 1174, 1175, 1179, 1227], "scientif": 16, "notat": [16, 40, 295], "small": [16, 118, 144, 205, 295, 392, 775, 853, 1227], "2304980958725870923": 16, "1e6": 16, "1e": [16, 138, 139, 140, 141], "230498": 16, "0000e": 16, "230498095872587": 16, "1000000": [16, 404, 965], "00000001": [16, 662, 745], "plai": [17, 676], "sam": 17, "As": [17, 70, 88, 89, 104, 106, 107, 108, 110, 120, 124, 125, 133, 295, 498, 735, 853], "time": [17, 39, 48, 50, 64, 69, 84, 85, 86, 127, 129, 170, 184, 185, 187, 188, 204, 231, 266, 295, 333, 363, 364, 365, 366, 367, 371, 372, 388, 391, 392, 395, 397, 398, 406, 409, 466, 467, 498, 561, 564, 565, 566, 567, 568, 570, 571, 572, 581, 632, 634, 638, 653, 654, 675, 676, 689, 690, 691, 692, 693, 694, 700, 732, 733, 745, 766, 767, 782, 783, 785, 786, 791, 805, 809, 853, 856, 885, 920, 921, 922, 923, 928, 929, 949, 952, 953, 956, 958, 959, 967, 970, 981, 1029, 1031, 1032, 1122, 1173, 1175, 1179, 1202, 1203, 1219, 1227], "goe": 17, "By": [17, 19, 35, 79, 115, 116, 129, 184, 203, 204, 231, 241, 246, 265, 266, 267, 295, 388, 392, 406, 491, 561, 564, 565, 566, 567, 568, 570, 571, 572, 578, 590, 660, 677, 679, 689, 690, 692, 693, 694, 707, 726, 732, 733, 734, 745, 766, 782, 790, 791, 809, 815, 820, 828, 853, 949, 953, 967, 1054, 1118, 1130, 1200, 1208, 1219], "begin": [17, 40, 295, 414, 415, 416, 600, 745, 976, 977, 978, 1141, 1219], "beauti": 17, "friendship": 17, "len_byt": [17, 607, 608, 1148, 1149], "len": [17, 40, 143, 145, 202, 295, 345, 346, 481, 509, 745, 1044, 1219], "u32": [17, 64, 117, 155, 157, 219, 272, 277, 286, 288, 295, 303, 310, 317, 318, 319, 320, 321, 345, 346, 437, 460, 464, 465, 469, 480, 527, 539, 552, 560, 564, 565, 567, 570, 571, 572, 576, 595, 606, 607, 653, 657, 663, 668, 672, 673, 678, 717, 745, 760, 763, 803, 833, 837, 846, 848, 853, 872, 873, 874, 886, 891, 994, 1043, 1088, 1096, 1136, 1147, 1148, 1202, 1205, 1207, 1219], "37": 17, "beaut": 17, "48": [17, 231, 295, 561, 745, 809, 853], "fmt_str_length": 17, "50": [17, 32, 40, 162, 170, 182, 295, 339, 392, 406, 745, 897, 914, 967, 1219], "element": [18, 19, 30, 144, 147, 156, 199, 222, 232, 246, 260, 267, 295, 309, 311, 312, 313, 314, 315, 316, 333, 337, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 361, 362, 418, 419, 423, 435, 446, 460, 468, 469, 471, 472, 473, 480, 481, 487, 488, 489, 490, 501, 502, 509, 541, 542, 552, 555, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 576, 582, 583, 584, 589, 590, 623, 624, 635, 651, 652, 654, 660, 677, 679, 722, 723, 726, 734, 745, 761, 819, 820, 824, 828, 853, 863, 864, 865, 866, 867, 868, 869, 885, 893, 896, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 917, 918, 979, 980, 985, 993, 1006, 1020, 1022, 1023, 1031, 1032, 1034, 1035, 1036, 1043, 1044, 1050, 1051, 1052, 1053, 1064, 1065, 1068, 1082, 1088, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1112, 1123, 1124, 1125, 1129, 1130, 1164, 1165, 1176, 1190, 1193, 1194, 1198, 1203, 1204, 1208, 1219], "empti": [18, 36, 37, 58, 95, 107, 115, 116, 120, 126, 129, 158, 159, 184, 197, 213, 295, 707, 724, 764, 765, 782, 800, 853, 856, 896, 900, 1001, 1219], "alwai": [18, 37, 39, 58, 64, 115, 144, 183, 186, 207, 281, 295, 517, 632, 689, 735, 796, 853, 1068, 1173, 1219, 1226, 1227], "neg": [18, 49, 136, 184, 185, 187, 188, 190, 206, 231, 241, 242, 244, 249, 295, 491, 492, 545, 561, 578, 579, 586, 621, 745, 782, 783, 785, 786, 809, 815, 816, 818, 833, 853, 993, 1023, 1054, 1055, 1118, 1119, 1127, 1162, 1190, 1219], "result": [18, 37, 43, 44, 45, 58, 59, 60, 79, 87, 108, 110, 117, 118, 119, 120, 129, 132, 134, 135, 147, 170, 184, 187, 189, 203, 218, 222, 231, 234, 241, 242, 257, 266, 274, 295, 392, 395, 398, 406, 414, 415, 416, 420, 435, 457, 497, 498, 507, 509, 541, 549, 556, 557, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 577, 578, 579, 622, 623, 634, 655, 680, 681, 684, 685, 689, 690, 691, 692, 693, 694, 709, 718, 721, 722, 723, 736, 745, 762, 782, 783, 785, 786, 790, 795, 796, 805, 809, 813, 815, 816, 834, 853, 862, 913, 953, 956, 959, 967, 976, 977, 978, 981, 992, 1021, 1060, 1068, 1086, 1092, 1093, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1105, 1106, 1107, 1116, 1118, 1119, 1163, 1164, 1175, 1200, 1219, 1226, 1227], "being": [18, 86, 115, 116, 117, 129, 135, 157, 169, 254, 264, 265, 295, 309, 356, 392, 437, 564, 565, 566, 567, 568, 570, 571, 572, 695, 745, 763, 767, 774, 775, 827, 853, 892, 912, 953, 994, 1086, 1219, 1227], "content": [18, 581, 745, 1122, 1219], "final": [18, 40, 79, 134, 295, 414, 415, 416, 745, 775, 853, 976, 977, 978, 1219], "item": [18, 87, 116, 182, 232, 235, 295, 359, 419, 467, 470, 476, 478, 486, 575, 624, 745, 915, 980, 1030, 1033, 1039, 1041, 1049, 1110, 1165, 1219], "num": [18, 40, 259, 295, 441, 745, 998, 1219], "fmt_table_cell_list_len": 18, "10": [18, 21, 22, 32, 36, 37, 39, 40, 41, 42, 45, 60, 64, 79, 87, 111, 118, 129, 137, 145, 147, 159, 170, 181, 182, 184, 190, 192, 194, 195, 200, 217, 221, 222, 223, 227, 229, 231, 237, 249, 270, 274, 278, 280, 282, 283, 284, 285, 286, 287, 288, 295, 304, 308, 317, 318, 319, 321, 339, 347, 350, 359, 363, 365, 371, 384, 385, 391, 392, 406, 409, 435, 436, 440, 446, 456, 461, 470, 477, 492, 495, 501, 517, 519, 528, 542, 545, 556, 561, 586, 636, 648, 662, 674, 680, 689, 692, 695, 698, 700, 702, 707, 709, 730, 733, 745, 766, 767, 782, 787, 789, 794, 804, 805, 809, 811, 821, 822, 830, 834, 838, 840, 842, 843, 844, 845, 846, 847, 848, 853, 856, 897, 915, 920, 922, 928, 952, 967, 970, 973, 993, 1006, 1023, 1033, 1040, 1055, 1058, 1064, 1068, 1082, 1092, 1111, 1114, 1177, 1190, 1219, 1227], "size": [19, 45, 60, 115, 116, 117, 143, 144, 145, 147, 149, 168, 264, 295, 557, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 669, 704, 705, 722, 723, 745, 766, 853, 975, 1093, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1219, 1227], "overwrit": [19, 38, 39, 104, 106, 107, 108, 110, 115, 116, 124, 125, 129, 133, 153, 265, 295, 304, 745, 775, 853], "chunk": [19, 60, 113, 115, 116, 127, 129, 132, 133, 134, 145, 147, 170, 202, 217, 295, 308, 553, 745, 853, 862, 895, 981, 990, 1074, 1089, 1195, 1219], "stream": [19, 41, 42, 58, 59, 60, 85, 86, 123, 156, 183, 186, 203, 260, 262, 295, 761, 766, 767, 773, 775, 781, 784, 790, 795, 796, 800, 805, 817, 819, 824, 825, 853], "engin": [19, 38, 117, 118, 120, 149, 183, 186, 203, 207, 262, 281, 295, 781, 784, 790, 795, 796, 800, 825, 841, 853, 1068, 1219], "determin": [19, 37, 40, 58, 77, 79, 87, 107, 110, 115, 116, 117, 120, 126, 127, 129, 134, 136, 154, 163, 176, 184, 187, 201, 202, 207, 222, 231, 261, 266, 295, 336, 375, 391, 392, 406, 437, 498, 508, 517, 549, 555, 556, 564, 565, 566, 567, 568, 570, 571, 572, 585, 593, 603, 604, 632, 634, 635, 691, 718, 721, 736, 745, 782, 785, 809, 853, 890, 932, 952, 953, 967, 994, 1061, 1067, 1086, 1092, 1126, 1134, 1144, 1145, 1173, 1175, 1176, 1219], "schema": [19, 33, 36, 38, 39, 64, 80, 81, 82, 87, 99, 100, 102, 104, 106, 107, 108, 110, 115, 116, 117, 118, 122, 124, 125, 127, 128, 129, 133, 134, 143, 145, 154, 158, 159, 166, 168, 202, 207, 214, 218, 256, 295, 322, 323, 324, 325, 326, 497, 498, 517, 603, 604, 662, 727, 745, 764, 765, 772, 795, 796, 801, 813, 836, 841, 853, 856, 877, 900, 1144, 1145, 1219], "thread": [19, 37, 58, 86, 113, 115, 116, 118, 149, 295, 309, 472, 509, 745, 767, 853, 1035], "pool": [19, 86, 149, 767, 853], "For": [19, 39, 40, 115, 116, 118, 119, 120, 129, 130, 131, 165, 170, 203, 204, 231, 281, 295, 414, 415, 416, 498, 509, 518, 554, 585, 592, 600, 601, 602, 615, 680, 684, 694, 698, 699, 741, 745, 771, 791, 809, 841, 853, 976, 977, 978, 981, 1008, 1090, 1126, 1133, 1141, 1142, 1143, 1156, 1200, 1219], "some": [19, 35, 40, 70, 89, 107, 115, 116, 117, 120, 129, 153, 165, 295, 741, 771, 853, 1006, 1219, 1227], "dataset": [19, 45, 51, 115, 116, 127, 129, 135, 203, 295, 457, 745, 757, 790, 795, 796, 853, 1021, 1219], "esp": 19, "have": [19, 35, 39, 40, 48, 70, 79, 89, 105, 114, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 145, 147, 170, 201, 203, 225, 231, 233, 234, 253, 295, 356, 414, 415, 416, 509, 518, 552, 556, 561, 602, 745, 769, 790, 800, 809, 817, 833, 853, 856, 912, 914, 976, 977, 978, 981, 991, 1088, 1092, 1175, 1219, 1227], "too": [19, 560, 745, 775, 853], "optimist": 19, "lead": [19, 45, 111, 135, 184, 185, 187, 188, 211, 231, 241, 248, 295, 430, 433, 491, 507, 509, 561, 577, 578, 610, 626, 627, 629, 649, 677, 745, 782, 783, 785, 786, 795, 796, 809, 815, 836, 841, 853, 1054, 1068, 1116, 1118, 1151, 1167, 1168, 1170, 1219], "memori": [19, 60, 87, 104, 105, 108, 109, 110, 115, 116, 117, 120, 121, 127, 129, 132, 133, 134, 153, 170, 207, 234, 243, 281, 295, 541, 553, 580, 745, 766, 853, 981, 1068, 1089, 1120, 1121, 1219], "error": [19, 39, 86, 115, 116, 129, 157, 222, 232, 295, 304, 329, 334, 456, 475, 478, 496, 528, 592, 596, 600, 602, 603, 605, 632, 633, 634, 638, 745, 763, 767, 836, 841, 853, 881, 886, 1038, 1041, 1059, 1133, 1137, 1141, 1143, 1144, 1146, 1173, 1174, 1175, 1179, 1219], "row": [19, 25, 30, 37, 38, 40, 43, 45, 58, 60, 79, 80, 82, 87, 96, 98, 103, 107, 108, 110, 111, 115, 116, 117, 120, 121, 123, 124, 127, 129, 132, 133, 134, 135, 138, 139, 143, 145, 154, 156, 158, 165, 170, 173, 176, 178, 182, 183, 184, 186, 189, 190, 196, 198, 199, 201, 202, 203, 204, 205, 206, 207, 213, 218, 234, 235, 244, 249, 250, 253, 255, 260, 262, 264, 265, 272, 277, 279, 281, 289, 295, 320, 419, 431, 436, 461, 473, 498, 541, 542, 557, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 586, 588, 599, 603, 604, 648, 650, 669, 672, 678, 684, 685, 698, 702, 704, 705, 720, 722, 723, 730, 735, 745, 761, 764, 766, 771, 775, 778, 779, 780, 782, 787, 790, 791, 792, 794, 796, 800, 818, 822, 823, 824, 825, 827, 833, 837, 839, 841, 849, 853, 980, 981, 989, 993, 1036, 1082, 1093, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1127, 1140, 1144, 1145, 1190, 1192, 1219, 1227], "per": [19, 37, 40, 58, 143, 145, 156, 182, 218, 219, 238, 245, 260, 271, 284, 286, 287, 295, 309, 472, 475, 476, 496, 509, 588, 659, 672, 745, 761, 812, 819, 824, 831, 844, 846, 847, 853, 1035, 1038, 1039, 1059, 1207, 1219], "everi": [19, 37, 58, 115, 116, 129, 178, 184, 187, 250, 253, 266, 295, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 392, 406, 419, 431, 464, 465, 470, 473, 476, 477, 487, 492, 495, 599, 650, 680, 681, 684, 685, 745, 775, 780, 782, 785, 823, 853, 904, 905, 906, 907, 908, 909, 910, 911, 912, 953, 967, 980, 989, 991, 1027, 1028, 1033, 1036, 1039, 1040, 1050, 1055, 1058, 1140, 1192, 1219], "process": [19, 37, 58, 59, 60, 115, 116, 117, 129, 149, 295, 766, 853], "liter": [20, 21, 25, 39, 64, 86, 117, 120, 126, 145, 146, 147, 148, 182, 201, 208, 210, 215, 217, 220, 232, 233, 237, 238, 241, 247, 252, 265, 270, 271, 295, 304, 328, 339, 365, 412, 413, 420, 427, 432, 434, 441, 459, 504, 508, 524, 526, 536, 537, 546, 556, 592, 595, 615, 616, 645, 655, 664, 666, 669, 673, 674, 675, 676, 683, 687, 688, 689, 690, 691, 692, 693, 704, 705, 707, 712, 716, 718, 721, 724, 727, 729, 731, 732, 733, 736, 745, 767, 777, 811, 812, 815, 827, 830, 831, 853, 856, 860, 861, 880, 897, 913, 922, 982, 998, 1086, 1092, 1111, 1114, 1118, 1133, 1136, 1156, 1157, 1219, 1226], "left": [20, 21, 40, 66, 79, 138, 139, 140, 141, 184, 185, 187, 188, 203, 204, 231, 265, 295, 357, 414, 415, 416, 440, 441, 549, 561, 564, 565, 566, 567, 568, 570, 571, 572, 576, 609, 653, 674, 680, 681, 684, 685, 689, 690, 692, 693, 698, 720, 732, 733, 735, 745, 782, 783, 785, 786, 790, 791, 809, 827, 853, 913, 976, 977, 978, 998, 1086, 1112, 1150, 1202, 1219], "center": [20, 21, 40, 295, 414, 415, 416, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 745, 976, 977, 978, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1105, 1106, 1107, 1219], "cell": [20, 21, 40, 295], "valueerror": [20, 25], "recognis": [20, 21, 25, 142], "column_abc": 20, "column_xyz": 20, "keyerror": 21, "datetim": [21, 37, 40, 58, 79, 111, 120, 145, 157, 162, 182, 184, 185, 187, 188, 202, 204, 231, 266, 295, 363, 364, 365, 366, 367, 369, 371, 372, 373, 375, 376, 377, 379, 381, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 467, 561, 564, 565, 566, 567, 568, 570, 571, 572, 632, 634, 653, 689, 690, 692, 693, 694, 700, 707, 732, 733, 745, 763, 782, 783, 785, 786, 791, 809, 853, 856, 919, 920, 921, 922, 923, 924, 926, 928, 929, 930, 932, 933, 934, 935, 936, 937, 939, 941, 942, 944, 945, 946, 947, 949, 950, 951, 952, 953, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 1017, 1030, 1031, 1032, 1077, 1078, 1111, 1115, 1173, 1175, 1202, 1219], "date": [21, 40, 48, 79, 115, 116, 118, 120, 126, 129, 135, 145, 157, 162, 182, 184, 185, 187, 188, 202, 204, 231, 295, 364, 365, 366, 369, 372, 375, 376, 377, 383, 384, 385, 388, 389, 390, 391, 392, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 467, 561, 564, 565, 566, 567, 568, 570, 571, 572, 632, 633, 653, 689, 690, 692, 693, 700, 707, 731, 745, 763, 782, 783, 785, 786, 791, 809, 853, 856, 921, 922, 923, 926, 929, 930, 932, 933, 934, 935, 936, 937, 941, 942, 944, 945, 946, 947, 949, 950, 951, 952, 953, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 971, 1017, 1030, 1031, 1032, 1077, 1078, 1111, 1115, 1173, 1174, 1202, 1219], "333": [21, 574, 745, 1109, 1219], "mno": [21, 25], "2023": [21, 40, 111, 137, 202, 295, 365, 694, 707, 856, 922], "29": [21, 145, 363, 384, 920, 945], "2001": [21, 364, 369, 372, 373, 375, 381, 383, 388, 389, 390, 392, 397, 406, 407, 408, 409, 564, 565, 567, 570, 571, 572, 632, 745, 856, 921, 926, 929, 930, 932, 934, 935, 936, 937, 939, 941, 942, 944, 947, 949, 950, 951, 953, 958, 967, 968, 969, 970, 971, 1173], "null": [21, 37, 39, 58, 66, 79, 87, 107, 115, 116, 125, 129, 135, 153, 156, 158, 162, 165, 167, 172, 176, 177, 195, 203, 210, 211, 212, 219, 222, 224, 241, 242, 245, 246, 247, 248, 252, 257, 260, 263, 265, 267, 270, 277, 295, 305, 307, 308, 309, 319, 327, 329, 339, 345, 347, 350, 359, 361, 362, 388, 399, 400, 401, 402, 403, 404, 405, 413, 414, 415, 416, 417, 420, 421, 422, 428, 440, 450, 452, 453, 454, 460, 462, 463, 470, 471, 474, 475, 476, 479, 480, 487, 488, 489, 490, 491, 496, 498, 509, 537, 538, 539, 542, 553, 559, 560, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 578, 579, 580, 582, 587, 591, 592, 594, 595, 596, 597, 598, 600, 601, 602, 603, 605, 606, 607, 612, 613, 614, 621, 623, 624, 625, 636, 641, 642, 643, 644, 653, 663, 664, 665, 666, 674, 675, 676, 678, 683, 696, 707, 712, 716, 722, 723, 727, 729, 735, 745, 761, 764, 771, 777, 789, 790, 803, 813, 815, 816, 819, 824, 826, 827, 830, 832, 837, 853, 860, 861, 863, 872, 881, 896, 897, 915, 917, 918, 960, 961, 962, 963, 964, 965, 966, 974, 976, 977, 978, 982, 984, 991, 997, 1013, 1014, 1022, 1025, 1026, 1033, 1034, 1038, 1043, 1051, 1053, 1054, 1059, 1061, 1068, 1081, 1082, 1095, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1113, 1118, 1119, 1123, 1132, 1133, 1135, 1136, 1137, 1138, 1139, 1141, 1142, 1143, 1144, 1146, 1147, 1148, 1153, 1154, 1155, 1162, 1164, 1165, 1166, 1177, 1182, 1198, 1200, 1201, 1202, 1209, 1219, 1226, 1227], "07": [21, 365, 391, 392, 406, 632, 689, 692, 700, 856, 922, 952, 1173], "05": [21, 135, 138, 139, 140, 141, 145, 157, 204, 266, 295, 365, 366, 391, 393, 395, 398, 399, 689, 692, 763, 791, 853, 856, 922, 923, 924, 925, 952, 953, 956, 957, 959, 960, 967], "visibl": [22, 168, 295, 975, 1219], "eg": [22, 30, 40, 87, 118, 151, 295, 392, 632, 634, 655, 745, 991, 1173, 1175, 1219], "low": [22, 117, 149, 549, 745, 1086, 1219], "rang": [22, 40, 117, 118, 162, 168, 184, 202, 295, 358, 369, 383, 389, 390, 392, 406, 407, 440, 669, 675, 688, 689, 690, 691, 692, 693, 704, 705, 731, 732, 733, 745, 782, 853, 914, 926, 944, 950, 951, 953, 967, 968, 975, 1082, 1219], "98": [22, 194, 295, 333, 430, 433, 587, 635, 654, 745, 1176], "99": [22, 40, 171, 172, 194, 197, 265, 295, 303, 333, 420, 422, 430, 433, 587, 654, 735, 745, 776, 777, 827, 853, 973, 982, 1219], "tbl_col": 22, "95": [22, 303, 745], "96": [22, 303, 745], "97": [22, 194, 295, 303, 745], "move": [23, 234, 295, 414, 415, 416, 564, 565, 567, 571, 745, 976, 977, 978, 1099, 1100, 1102, 1106, 1219], "inlin": [23, 234, 295, 592, 600, 601, 615, 1133, 1141, 1142, 1156], "parenthes": 23, "inform": [24, 28, 38, 84, 119, 127, 130, 131, 134, 138, 140, 161, 162, 295, 457, 585, 592, 600, 601, 615, 745, 805, 853, 891, 1021, 1126, 1133, 1141, 1142, 1156, 1219], "below": [24, 39, 119, 130, 131, 165, 184, 222, 295, 422, 689, 690, 692, 693, 732, 733, 735, 741, 745, 771, 782, 853], "ascii_ful": 25, "ascii_full_condens": 25, "ascii_no_bord": 25, "ascii_borders_onli": 25, "ascii_borders_only_condens": 25, "ascii_horizontal_onli": 25, "ascii_markdown": 25, "utf8_ful": [25, 79, 111], "utf8_no_bord": 25, "utf8_borders_onli": 25, "utf8_horizontal_onli": 25, "noth": [25, 600, 605, 1141, 1146], "rounded_corn": 25, "border": 25, "includ": [25, 35, 37, 39, 40, 58, 84, 117, 119, 130, 131, 145, 156, 162, 168, 220, 234, 260, 261, 264, 265, 295, 357, 393, 437, 441, 549, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 622, 623, 627, 628, 680, 684, 722, 723, 745, 761, 824, 827, 853, 856, 913, 914, 954, 975, 994, 998, 1086, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1163, 1164, 1168, 1209, 1219], "divid": [25, 357, 392, 406, 414, 415, 416, 457, 549, 745, 913, 953, 967, 976, 977, 978, 1021, 1086, 1219], "same": [25, 39, 40, 68, 70, 79, 85, 86, 87, 88, 89, 121, 129, 138, 139, 140, 141, 143, 151, 183, 203, 207, 222, 234, 245, 262, 270, 271, 274, 281, 295, 301, 308, 325, 361, 362, 430, 433, 497, 513, 516, 541, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 588, 606, 644, 745, 766, 767, 781, 790, 795, 796, 819, 825, 830, 831, 834, 853, 858, 863, 878, 913, 917, 918, 922, 1060, 1068, 1086, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1105, 1106, 1107, 1147, 1210, 1219], "dens": [25, 182, 295, 552, 745, 1088, 1219], "space": [25, 184, 295, 782, 853], "horizont": [25, 87, 176, 192, 208, 209, 210, 211, 215, 216, 247, 248, 264, 295, 664, 666, 675, 676, 680, 681, 683, 684, 685, 687, 695, 698, 712, 716, 720, 729], "markdown": 25, "compat": [25, 40, 45, 60, 295, 592, 594, 595, 600, 601, 602, 615, 616, 853, 856, 1133, 1135, 1136, 1141, 1142, 1143, 1156, 1157], "No": [25, 639, 1180], "round": [25, 40, 81, 111, 117, 295, 338, 344, 426, 574, 651, 745, 894, 987, 1109, 1219], "corner": [25, 40, 111, 295], "op": [25, 147, 295, 555, 745, 853, 1175, 1219], "one": [25, 37, 38, 40, 58, 69, 79, 96, 104, 106, 107, 108, 109, 110, 115, 116, 120, 124, 125, 126, 129, 146, 147, 148, 151, 172, 173, 182, 183, 184, 185, 187, 188, 201, 213, 222, 231, 232, 233, 239, 241, 256, 259, 275, 295, 303, 357, 422, 430, 433, 491, 498, 502, 561, 578, 587, 601, 617, 710, 725, 735, 741, 745, 777, 778, 781, 782, 783, 785, 786, 800, 809, 814, 815, 832, 835, 853, 862, 913, 984, 1017, 1054, 1061, 1065, 1086, 1118, 1142, 1158, 1183, 1219], "more": [25, 40, 43, 45, 60, 69, 79, 87, 88, 89, 103, 104, 105, 106, 107, 108, 109, 110, 117, 118, 119, 120, 124, 125, 126, 127, 130, 131, 138, 140, 145, 147, 151, 161, 162, 200, 201, 205, 207, 213, 218, 232, 233, 235, 256, 262, 281, 295, 306, 309, 326, 457, 486, 499, 502, 507, 509, 540, 575, 585, 601, 606, 632, 633, 634, 656, 725, 735, 745, 800, 825, 853, 856, 863, 879, 891, 914, 1017, 1021, 1049, 1062, 1068, 1110, 1126, 1142, 1147, 1173, 1174, 1175, 1204, 1219, 1227], "semigraph": 25, "box": [25, 207, 295], "draw": [25, 30, 144, 1227], "found": [25, 37, 40, 58, 66, 91, 100, 102, 107, 111, 166, 295, 576, 605, 630, 631, 632, 634, 745, 853, 1112, 1146, 1171, 1172, 1173, 1175, 1219, 1226], "unicod": 25, "block": [25, 86, 183, 186, 262, 295, 735, 767, 781, 784, 807, 825, 833, 841, 853, 1111, 1114, 1219], "http": [25, 40, 41, 42, 105, 117, 118, 153, 161, 295, 600, 602, 1141, 1143], "en": [25, 40, 295], "wikipedia": 25, "org": [25, 41, 42, 105, 117, 118, 153, 161, 295], "wiki": 25, "drawing_charact": 25, "box_draw": 25, "tbl_format": 25, "tbl_hide_column_data_typ": 25, "tbl_hide_dataframe_shap": 25, "hide": [26, 27, 28, 29, 40, 295], "etc": [26, 39, 40, 115, 119, 121, 123, 130, 131, 132, 295, 745, 856, 1111, 1114, 1219], "between": [29, 87, 142, 143, 145, 147, 161, 224, 287, 295, 334, 359, 360, 441, 470, 478, 487, 488, 489, 490, 542, 549, 550, 568, 591, 670, 671, 677, 679, 719, 722, 723, 745, 806, 847, 853, 886, 891, 915, 916, 998, 1033, 1041, 1050, 1051, 1052, 1053, 1082, 1086, 1087, 1103, 1132, 1219], "set_tbl_column_data_type_inlin": 29, "max": [30, 40, 45, 60, 64, 149, 162, 172, 183, 209, 222, 231, 295, 340, 347, 352, 422, 498, 541, 552, 556, 561, 564, 577, 624, 712, 725, 745, 777, 781, 809, 853, 898, 904, 908, 914, 984, 1061, 1088, 1099, 1116, 1165, 1219], "tbl_row": 30, "also": [32, 37, 40, 58, 69, 70, 107, 117, 120, 126, 129, 143, 144, 145, 146, 147, 151, 166, 183, 184, 185, 187, 188, 214, 218, 231, 233, 237, 245, 265, 270, 295, 347, 350, 388, 391, 441, 509, 552, 556, 564, 565, 566, 567, 568, 570, 571, 572, 588, 627, 628, 680, 681, 684, 685, 689, 698, 700, 720, 735, 744, 745, 751, 781, 782, 783, 785, 786, 801, 809, 811, 819, 827, 830, 832, 853, 856, 952, 998, 1088, 1092, 1135, 1136, 1168, 1219], "char": [32, 601, 1142], "omit": [32, 107, 111, 143, 145, 147, 151, 218, 234, 295, 732, 733, 856], "set_decimal_separ": 32, "x": [32, 66, 67, 71, 79, 87, 105, 111, 115, 116, 118, 129, 143, 145, 153, 168, 192, 196, 198, 203, 213, 222, 233, 234, 264, 295, 302, 304, 306, 358, 412, 413, 427, 432, 434, 435, 459, 466, 478, 502, 504, 506, 507, 509, 524, 526, 529, 530, 531, 532, 533, 536, 537, 540, 546, 547, 555, 556, 560, 582, 585, 623, 645, 646, 653, 655, 662, 664, 666, 670, 671, 680, 681, 683, 698, 707, 709, 712, 716, 720, 729, 735, 745, 790, 796, 800, 818, 853, 856, 891, 984, 1019, 1068, 1092, 1123, 1126, 1164, 1202, 1219, 1226], "1234567": 32, "987654": [32, 856], "10101": 32, "y": [32, 71, 79, 87, 105, 111, 143, 145, 153, 168, 196, 198, 203, 213, 222, 233, 234, 264, 295, 302, 304, 306, 395, 398, 412, 413, 432, 434, 459, 466, 478, 504, 506, 509, 529, 530, 531, 532, 533, 536, 537, 540, 547, 555, 556, 560, 632, 633, 634, 646, 655, 662, 664, 666, 670, 671, 683, 694, 707, 712, 716, 729, 745, 790, 800, 818, 853, 856, 891, 956, 959, 1092, 1173, 1174, 1175, 1219], "1234": [32, 574, 745, 1109, 1219], "7654321": 32, "234": 32, "567": 32, "987": 32, "654": 32, "00": [32, 40, 145, 184, 204, 266, 295, 363, 364, 366, 371, 373, 377, 381, 384, 385, 388, 391, 392, 393, 395, 398, 399, 400, 401, 402, 403, 404, 405, 406, 409, 564, 565, 567, 570, 571, 572, 632, 634, 638, 692, 694, 732, 733, 745, 782, 791, 853, 856, 920, 921, 923, 924, 925, 928, 929, 930, 936, 937, 942, 945, 946, 947, 949, 952, 953, 957, 958, 960, 961, 962, 963, 964, 965, 966, 967, 970, 1173, 1175, 1179], "321": [32, 1227], "strip": [33, 610, 620, 627, 628, 629, 630, 631, 1151, 1161, 1168, 1169, 1170], "trail": [33, 182, 295, 620, 626, 627, 628, 1161, 1167, 1168, 1169], "zero": [33, 40, 104, 105, 114, 115, 116, 121, 123, 127, 144, 153, 172, 201, 232, 251, 257, 295, 422, 498, 502, 576, 585, 641, 655, 745, 764, 777, 853, 896, 984, 1061, 1126, 1182, 1195, 1200, 1201, 1219], "enabl": [33, 34, 70, 88, 89, 138, 139, 140, 141, 150, 237, 270, 295, 305, 307, 556, 577, 593, 617, 659, 741, 745, 766, 811, 830, 853, 860, 861, 1092, 1116, 1134, 1158, 1207, 1219], "d": [33, 36, 37, 39, 40, 41, 42, 45, 107, 135, 182, 184, 189, 190, 194, 203, 249, 251, 264, 268, 278, 280, 282, 283, 284, 285, 286, 287, 288, 295, 302, 304, 372, 395, 398, 441, 545, 580, 595, 601, 623, 632, 633, 634, 674, 694, 700, 745, 782, 790, 838, 840, 842, 843, 844, 845, 846, 847, 848, 853, 891, 929, 956, 959, 998, 1136, 1142, 1164, 1173, 1174, 1175, 1219], "01": [33, 79, 145, 157, 162, 182, 184, 231, 266, 295, 363, 364, 365, 366, 372, 373, 376, 377, 381, 383, 384, 385, 388, 390, 391, 392, 393, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 561, 564, 565, 567, 570, 571, 572, 632, 633, 634, 638, 689, 690, 692, 694, 745, 763, 782, 809, 853, 856, 921, 922, 923, 924, 925, 929, 930, 936, 937, 942, 945, 946, 947, 949, 952, 953, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 970, 1173, 1174, 1175, 1179], "6789": 33, "scale": [33, 49, 168, 295, 509, 545, 635, 745, 975, 1176, 1219], "trim_decimal_zero": 33, "01000": 33, "67890": 33, "addit": [34, 39, 40, 107, 119, 120, 130, 131, 143, 163, 165, 169, 183, 186, 220, 237, 238, 239, 245, 263, 270, 271, 274, 295, 302, 371, 417, 420, 541, 588, 592, 600, 601, 615, 672, 674, 675, 676, 696, 724, 727, 745, 770, 774, 781, 784, 811, 812, 814, 819, 826, 830, 831, 834, 853, 920, 928, 982, 1133, 1141, 1142, 1156, 1219], "verbos": [34, 138, 140, 151, 601, 1142], "debug": [34, 766, 775, 795, 796, 853, 1227], "log": [34, 81, 333, 411, 502, 526, 546, 654, 745, 885, 973, 1203, 1219], "do_polars_oper": 34, "if_set": 35, "env_onli": 35, "dict": [35, 39, 40, 45, 67, 80, 82, 84, 104, 106, 107, 108, 109, 110, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 145, 175, 201, 220, 226, 232, 233, 234, 236, 252, 253, 261, 295, 508, 560, 745, 807, 810, 853, 1067, 1219], "show": [35, 40, 68, 162, 165, 182, 205, 219, 295, 437, 745, 771, 805, 817, 853, 994, 1219], "variabl": [35, 61, 66, 127, 134, 146, 149, 213, 254, 295, 800, 853, 1196, 1219, 1226], "chang": [35, 79, 86, 115, 116, 117, 135, 264, 265, 266, 295, 309, 356, 357, 359, 392, 437, 508, 509, 542, 549, 564, 565, 566, 567, 568, 570, 571, 572, 745, 767, 827, 853, 891, 892, 912, 913, 953, 994, 1067, 1082, 1086, 1121, 1219], "restrict": [35, 624, 1165], "dictionari": [35, 40, 71, 104, 106, 107, 108, 110, 115, 116, 117, 118, 122, 124, 125, 128, 129, 133, 201, 220, 232, 233, 234, 252, 253, 295, 508, 745, 853, 1067, 1219], "those": [35, 40, 115, 120, 234, 265, 295, 552, 600, 710, 745, 827, 853, 856, 1088, 1141, 1219], "been": [35, 40, 153, 154, 174, 177, 185, 186, 187, 188, 193, 228, 250, 276, 295, 309, 351, 352, 353, 354, 355, 444, 448, 451, 456, 468, 481, 496, 505, 506, 508, 509, 547, 552, 562, 564, 565, 566, 567, 568, 570, 571, 572, 594, 604, 608, 609, 610, 611, 614, 619, 620, 626, 646, 649, 650, 667, 686, 687, 708, 745, 783, 784, 785, 786, 795, 823, 836, 853, 863, 908, 909, 910, 911, 1003, 1009, 1031, 1044, 1059, 1067, 1088, 1097, 1113, 1115, 1135, 1145, 1149, 1150, 1151, 1152, 1155, 1160, 1161, 1167, 1191, 1192, 1219], "set_fmt_float": 35, "via": [35, 114, 115, 116, 117, 120, 121, 122, 123, 124, 125, 126, 128, 129, 132, 133, 134, 201, 233, 295, 309, 509, 602, 745, 769, 853, 1143], "set_stat": 35, "all_stat": 35, "binaryio": [36, 41, 42, 114, 115, 120, 121, 122, 123, 126, 127, 128, 295], "bytesio": [36, 37, 40, 41, 42, 45, 114, 115, 116, 120, 121, 122, 123, 124, 125, 126, 127, 128, 295, 769, 853], "compress": [36, 41, 42, 45, 59, 60, 295, 853], "avrocompress": [36, 295], "uncompress": [36, 41, 42, 45, 60, 121, 132, 295, 853], "write": [36, 37, 38, 39, 40, 41, 42, 43, 45, 58, 59, 60, 116, 121, 151, 295, 339, 522, 745, 793, 817, 853, 897, 1219], "apach": [36, 41, 42, 45, 114, 117, 118, 131, 295, 757], "avro": [36, 114, 295, 757], "writeabl": [36, 37, 41, 42, 43, 44, 45, 295], "like": [36, 37, 39, 41, 42, 43, 44, 45, 86, 105, 114, 115, 116, 117, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 184, 196, 198, 203, 256, 295, 363, 472, 521, 552, 600, 628, 629, 659, 741, 745, 767, 769, 782, 853, 920, 1035, 1088, 1141, 1207, 1219], "object": [36, 37, 39, 40, 41, 42, 43, 44, 45, 69, 71, 87, 105, 106, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 143, 145, 147, 153, 183, 184, 186, 187, 204, 205, 231, 234, 256, 257, 295, 689, 690, 692, 693, 707, 732, 733, 757, 769, 782, 783, 785, 786, 791, 809, 853, 856, 887, 919, 1024, 1131, 1185, 1195, 1219], "snappi": [36, 45, 60, 295, 853], "deflat": [36, 295], "pathlib": [36, 37, 41, 42, 45, 129, 295], "foo": [36, 37, 39, 41, 42, 43, 44, 45, 68, 157, 160, 161, 163, 164, 165, 166, 167, 170, 173, 176, 179, 180, 181, 189, 190, 191, 192, 194, 195, 197, 203, 207, 208, 209, 210, 211, 212, 215, 216, 219, 222, 224, 226, 227, 229, 232, 235, 236, 237, 240, 244, 246, 247, 248, 249, 251, 253, 254, 255, 256, 257, 258, 261, 262, 263, 267, 268, 269, 273, 295, 335, 357, 388, 431, 436, 439, 461, 513, 516, 517, 518, 519, 520, 521, 549, 557, 591, 595, 597, 599, 601, 602, 618, 622, 624, 627, 628, 629, 630, 631, 637, 640, 648, 668, 677, 679, 697, 701, 702, 706, 711, 713, 714, 715, 717, 719, 724, 726, 730, 734, 735, 741, 745, 763, 768, 770, 771, 772, 778, 788, 789, 790, 803, 807, 810, 811, 825, 826, 829, 832, 853, 856, 888, 913, 949, 1041, 1086, 1093, 1136, 1138, 1140, 1142, 1143, 1159, 1165, 1171, 1172, 1178, 1181, 1219], "bar": [36, 37, 39, 41, 42, 43, 44, 45, 68, 157, 160, 161, 163, 164, 165, 166, 167, 170, 173, 176, 179, 180, 181, 190, 192, 194, 195, 197, 203, 207, 208, 209, 210, 211, 212, 215, 216, 219, 222, 224, 226, 227, 229, 232, 235, 236, 237, 244, 246, 247, 248, 249, 251, 253, 254, 255, 256, 257, 258, 262, 263, 267, 268, 273, 295, 335, 439, 513, 514, 515, 516, 517, 518, 519, 520, 521, 585, 595, 597, 599, 601, 602, 618, 622, 624, 630, 631, 668, 677, 679, 697, 702, 706, 711, 713, 714, 715, 717, 724, 726, 730, 734, 735, 741, 745, 763, 768, 770, 771, 772, 778, 788, 789, 790, 803, 807, 810, 811, 825, 826, 829, 853, 856, 888, 1041, 1126, 1136, 1138, 1140, 1142, 1143, 1159, 1165, 1171, 1172, 1219], "ham": [36, 37, 39, 41, 42, 45, 157, 160, 161, 163, 164, 165, 166, 167, 173, 180, 189, 190, 192, 203, 208, 210, 212, 215, 219, 224, 226, 229, 232, 235, 236, 237, 244, 246, 247, 249, 254, 255, 256, 257, 258, 262, 267, 268, 295, 335, 520, 763, 768, 770, 771, 772, 778, 790, 803, 807, 810, 811, 825, 832, 853, 888], "dirpath": [36, 37, 41, 42, 45, 129, 295], "new_fil": [36, 37, 41, 42, 45, 295], "include_bom": [37, 58, 295, 853], "include_head": [37, 40, 58, 116, 261, 295, 853], "line_termin": [37, 58, 295, 853], "quote_char": [37, 58, 115, 116, 129, 295, 853], "batch_siz": [37, 58, 115, 116, 117, 133, 135, 295, 853], "1024": [37, 45, 58, 60, 115, 116, 117, 133, 295, 853], "datetime_format": [37, 58, 295, 853], "date_format": [37, 58, 295, 853], "time_format": [37, 58, 295, 853], "null_valu": [37, 58, 115, 116, 129, 295, 853], "quote_styl": [37, 58, 295, 853], "csvquotestyl": [37, 58, 295, 853], "textiowrapp": [37, 295], "comma": [37, 295], "csv": [37, 58, 59, 60, 115, 116, 120, 129, 295, 757, 853], "If": [37, 38, 39, 40, 41, 42, 43, 44, 45, 58, 60, 64, 70, 84, 86, 87, 104, 105, 106, 107, 108, 109, 110, 115, 116, 117, 119, 120, 121, 123, 124, 125, 126, 127, 129, 130, 132, 133, 134, 135, 138, 139, 140, 141, 146, 153, 154, 156, 165, 170, 182, 184, 185, 187, 188, 190, 199, 200, 201, 204, 206, 207, 211, 218, 222, 231, 233, 234, 235, 241, 244, 248, 249, 253, 254, 256, 260, 261, 262, 264, 265, 295, 305, 307, 309, 365, 384, 385, 423, 437, 457, 486, 491, 492, 498, 507, 509, 520, 541, 549, 552, 554, 556, 557, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 575, 576, 578, 581, 585, 586, 591, 601, 602, 603, 604, 610, 620, 621, 622, 623, 624, 626, 627, 628, 629, 632, 633, 634, 638, 641, 659, 663, 665, 667, 669, 673, 677, 678, 680, 689, 690, 692, 693, 694, 697, 698, 704, 705, 706, 707, 710, 718, 721, 722, 723, 727, 732, 733, 735, 736, 745, 761, 766, 767, 771, 773, 782, 783, 785, 786, 790, 791, 796, 800, 807, 809, 813, 815, 818, 824, 825, 827, 836, 841, 853, 856, 860, 861, 863, 897, 913, 922, 945, 946, 981, 991, 993, 994, 1020, 1021, 1023, 1049, 1054, 1055, 1061, 1068, 1086, 1088, 1090, 1092, 1093, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1110, 1112, 1116, 1118, 1122, 1126, 1127, 1132, 1142, 1143, 1144, 1145, 1151, 1161, 1162, 1163, 1164, 1165, 1167, 1168, 1169, 1170, 1173, 1174, 1175, 1179, 1182, 1190, 1195, 1200, 1207, 1209, 1219, 1226], "instead": [37, 43, 44, 64, 68, 79, 86, 87, 115, 116, 117, 120, 126, 127, 129, 135, 145, 182, 184, 200, 201, 207, 218, 220, 232, 233, 234, 237, 238, 241, 242, 257, 270, 271, 295, 319, 340, 341, 357, 370, 374, 378, 380, 382, 387, 391, 394, 406, 417, 491, 507, 549, 578, 579, 606, 607, 610, 620, 626, 627, 628, 629, 630, 631, 632, 634, 641, 669, 673, 689, 690, 691, 692, 693, 694, 697, 704, 705, 706, 718, 721, 727, 732, 733, 736, 745, 767, 776, 782, 811, 812, 813, 815, 816, 827, 830, 831, 853, 856, 872, 898, 899, 913, 927, 931, 938, 940, 943, 948, 952, 955, 967, 999, 1005, 1008, 1015, 1017, 1019, 1054, 1086, 1111, 1114, 1118, 1119, 1147, 1148, 1151, 1161, 1167, 1168, 1169, 1170, 1173, 1175, 1182, 1201, 1219, 1226], "whether": [37, 58, 108, 110, 147, 150, 156, 167, 177, 200, 239, 260, 295, 305, 307, 375, 393, 462, 463, 514, 515, 577, 745, 761, 795, 796, 814, 819, 824, 853, 856, 860, 861, 889, 892, 932, 954, 974, 1025, 1026, 1113, 1219, 1226], "utf": [37, 58, 78, 295, 853], "bom": [37, 58, 295, 853], "header": [37, 40, 45, 58, 60, 111, 115, 116, 120, 129, 166, 222, 261, 295, 853], "field": [37, 39, 58, 71, 100, 102, 107, 256, 263, 295, 498, 559, 601, 602, 603, 623, 624, 644, 680, 681, 684, 685, 709, 727, 745, 826, 853, 913, 1061, 1086, 1095, 1143, 1162, 1164, 1165, 1186, 1188, 1219], "symbol": [37, 58, 115, 116, 129, 295, 745, 853], "end": [37, 40, 58, 115, 116, 127, 129, 184, 295, 328, 331, 332, 363, 392, 417, 441, 492, 592, 598, 601, 612, 621, 625, 628, 631, 669, 689, 690, 692, 693, 696, 704, 705, 732, 733, 735, 745, 782, 787, 794, 805, 853, 856, 883, 920, 953, 998, 1055, 1139, 1142, 1153, 1162, 1166, 1219], "byte": [37, 45, 58, 60, 115, 116, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 168, 295, 606, 608, 853, 975, 1147, 1149, 1219], "quot": [37, 38, 58, 115, 116, 129, 295, 853], "specifi": [37, 40, 58, 79, 91, 100, 102, 120, 126, 145, 156, 157, 163, 168, 169, 172, 183, 184, 185, 186, 187, 188, 203, 220, 231, 232, 234, 237, 238, 239, 241, 245, 260, 263, 270, 271, 274, 295, 339, 414, 415, 416, 417, 422, 541, 555, 556, 564, 565, 566, 567, 568, 570, 571, 572, 578, 588, 672, 674, 675, 676, 689, 690, 692, 693, 696, 724, 727, 732, 733, 745, 761, 763, 770, 774, 777, 781, 782, 783, 784, 785, 786, 790, 809, 811, 812, 814, 815, 819, 824, 826, 830, 831, 834, 853, 897, 975, 976, 977, 978, 984, 1092, 1118, 1219], "defin": [37, 40, 48, 58, 117, 142, 143, 145, 154, 157, 165, 169, 184, 185, 187, 188, 207, 218, 221, 231, 265, 276, 281, 295, 309, 441, 475, 496, 509, 545, 549, 560, 561, 564, 565, 566, 567, 568, 570, 571, 572, 667, 689, 690, 692, 693, 707, 710, 727, 732, 733, 745, 763, 771, 774, 782, 783, 785, 786, 804, 809, 827, 836, 841, 853, 856, 863, 998, 1038, 1068, 1086, 1096, 1219], "chrono": [37, 58, 295, 395, 398, 632, 633, 634, 638, 853, 956, 959, 1173, 1174, 1175, 1179], "rust": [37, 45, 58, 97, 117, 121, 123, 127, 207, 281, 295, 602, 853, 1068, 1143, 1219], "crate": [37, 58, 295, 592, 594, 595, 600, 601, 602, 615, 616, 632, 633, 634, 638, 853, 856, 1133, 1135, 1136, 1141, 1142, 1143, 1156, 1157, 1173, 1174, 1175, 1179], "fraction": [37, 58, 138, 139, 140, 141, 235, 295, 393, 486, 542, 575, 632, 634, 745, 853, 954, 1049, 1082, 1110, 1173, 1175, 1219], "second": [37, 58, 138, 139, 140, 141, 144, 184, 204, 231, 266, 295, 388, 392, 405, 406, 561, 564, 565, 566, 567, 568, 570, 571, 572, 632, 634, 689, 690, 691, 692, 693, 694, 731, 732, 733, 735, 745, 782, 791, 809, 853, 856, 949, 953, 966, 967, 1173, 1175, 1227], "infer": [37, 58, 71, 104, 106, 107, 108, 109, 110, 115, 116, 117, 120, 124, 125, 127, 129, 133, 134, 154, 207, 295, 406, 557, 603, 604, 632, 633, 634, 635, 638, 721, 745, 853, 953, 967, 1093, 1144, 1145, 1173, 1174, 1175, 1176, 1179, 1219], "timeunit": [37, 48, 50, 58, 295, 364, 365, 397, 409, 634, 689, 690, 691, 692, 693, 694, 853, 856, 921, 922, 958, 970, 1175], "frame": [37, 38, 40, 58, 64, 65, 66, 67, 68, 69, 79, 86, 87, 107, 116, 120, 126, 138, 139, 145, 157, 158, 201, 202, 207, 214, 218, 221, 232, 233, 234, 257, 264, 265, 295, 763, 764, 801, 804, 827, 853, 856, 896, 1219, 1226, 1227], "repres": [37, 40, 58, 62, 77, 104, 106, 108, 109, 110, 117, 120, 246, 267, 273, 295, 450, 452, 507, 590, 660, 663, 677, 679, 694, 696, 707, 709, 710, 722, 723, 726, 734, 741, 745, 820, 828, 853, 1111, 1115, 1130, 1208, 1219], "necessari": [37, 58, 70, 89, 120, 256, 295, 853], "non_numer": [37, 58, 295, 853], "never": [37, 58, 117, 162, 203, 232, 295, 790, 853], "strategi": [37, 58, 79, 87, 115, 142, 143, 144, 145, 147, 172, 184, 187, 203, 204, 217, 265, 295, 309, 422, 498, 509, 745, 777, 782, 785, 790, 791, 827, 853, 984, 1061, 1219], "put": [37, 58, 295, 853], "around": [37, 58, 295, 853], "thei": [37, 40, 58, 70, 86, 87, 88, 89, 107, 129, 151, 205, 234, 295, 617, 628, 629, 745, 767, 853, 856], "record": [37, 42, 58, 123, 135, 204, 256, 295, 791, 853], "termin": [37, 58, 295, 853], "indistinguish": [37, 58, 295, 853], "even": [37, 58, 115, 295, 545, 549, 745, 853, 1086, 1219], "invalid": [37, 58, 115, 116, 129, 295, 603, 605, 636, 655, 745, 853, 1144, 1146, 1177], "g": [37, 58, 114, 115, 116, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 132, 135, 153, 200, 256, 264, 295, 302, 309, 417, 509, 580, 696, 745, 769, 807, 853, 974, 1113, 1200, 1219, 1227], "pars": [37, 58, 64, 115, 116, 120, 125, 129, 132, 133, 156, 183, 186, 237, 238, 241, 245, 260, 270, 271, 274, 295, 339, 441, 508, 541, 556, 588, 603, 604, 614, 635, 636, 664, 666, 672, 674, 675, 676, 683, 687, 700, 712, 716, 724, 725, 727, 729, 735, 745, 761, 781, 784, 811, 812, 815, 819, 824, 830, 831, 834, 853, 897, 998, 1092, 1118, 1144, 1145, 1155, 1175, 1176, 1177, 1219], "valid": [37, 40, 48, 58, 64, 117, 121, 123, 127, 147, 151, 168, 203, 295, 356, 592, 594, 595, 600, 601, 602, 605, 615, 616, 735, 745, 790, 853, 856, 912, 975, 991, 1133, 1135, 1136, 1141, 1142, 1143, 1146, 1156, 1157, 1219], "integ": [37, 40, 54, 55, 56, 57, 58, 73, 74, 75, 76, 136, 143, 145, 146, 148, 165, 184, 231, 254, 295, 306, 338, 393, 426, 427, 540, 549, 554, 561, 564, 565, 566, 567, 568, 569, 570, 571, 572, 614, 636, 662, 669, 700, 704, 705, 721, 745, 771, 782, 809, 853, 856, 894, 954, 987, 1008, 1086, 1090, 1104, 1111, 1115, 1155, 1177, 1219, 1226, 1227], "aren": [37, 58, 295, 853], "t": [37, 39, 58, 66, 67, 87, 115, 120, 126, 129, 184, 207, 221, 262, 264, 295, 309, 356, 363, 371, 391, 411, 414, 415, 416, 472, 509, 541, 545, 600, 629, 632, 634, 735, 745, 782, 804, 825, 853, 856, 912, 952, 973, 974, 976, 977, 978, 1035, 1068, 1113, 1141, 1169, 1170, 1173, 1175, 1200, 1209, 1219], "strictli": [37, 58, 70, 89, 295, 775, 853], "table_nam": [38, 40, 295], "connect": [38, 115, 117, 118, 121, 123, 127, 132, 134, 135, 295, 758], "if_table_exist": [38, 295], "dbwritemod": [38, 295], "fail": [38, 39, 105, 119, 121, 125, 127, 130, 134, 138, 139, 153, 262, 295, 320, 396, 498, 632, 633, 634, 638, 745, 825, 853, 1068, 1173, 1174, 1175, 1179, 1219], "dbwriteengin": [38, 295], "sqlalchemi": [38, 117, 137, 295], "databas": [38, 117, 118, 295, 757], "qualifi": [38, 295], "creat": [38, 40, 70, 89, 104, 108, 110, 117, 118, 130, 131, 143, 144, 145, 146, 147, 148, 158, 159, 184, 185, 188, 219, 222, 231, 266, 270, 295, 365, 392, 406, 498, 553, 561, 564, 565, 567, 570, 571, 572, 621, 675, 688, 689, 690, 691, 692, 693, 694, 731, 732, 733, 741, 745, 764, 765, 773, 782, 783, 786, 809, 830, 853, 896, 900, 913, 922, 953, 967, 1079, 1086, 1089, 1162, 1200, 1219, 1226, 1227], "append": [38, 39, 145, 170, 203, 204, 295, 553, 735, 745, 790, 791, 853, 981, 1219], "your": [38, 40, 70, 79, 89, 115, 116, 117, 120, 135, 201, 207, 233, 234, 237, 253, 270, 274, 281, 295, 309, 509, 602, 632, 633, 634, 641, 710, 745, 787, 794, 796, 811, 830, 834, 841, 853, 1068, 1143, 1173, 1174, 1175, 1182, 1219, 1227], "special": [38, 115, 116, 129, 295, 563, 601, 745, 863, 1068, 1098, 1142, 1219], "uri": [38, 39, 117, 118, 119, 130, 131, 295], "postgresql": [38, 117, 118, 295, 541, 745], "user": [38, 117, 118, 154, 207, 221, 276, 281, 295, 309, 507, 509, 545, 577, 667, 710, 745, 804, 836, 841, 853, 863, 1068, 1116, 1219], "pass": [38, 39, 40, 45, 67, 79, 106, 117, 118, 120, 127, 129, 134, 135, 138, 140, 143, 145, 147, 156, 161, 163, 183, 184, 187, 190, 206, 220, 221, 231, 237, 241, 245, 249, 260, 266, 270, 274, 295, 309, 372, 388, 391, 420, 439, 491, 508, 509, 541, 545, 556, 561, 564, 565, 566, 567, 568, 570, 571, 572, 578, 588, 627, 628, 629, 663, 672, 678, 689, 700, 727, 735, 741, 745, 761, 770, 781, 782, 783, 785, 786, 788, 795, 796, 804, 809, 811, 815, 817, 819, 824, 830, 834, 841, 853, 863, 929, 952, 982, 993, 1023, 1054, 1067, 1068, 1092, 1118, 1168, 1169, 1170, 1190, 1219], "server": [38, 117, 118, 295], "port": [38, 115, 117, 118, 121, 123, 132, 295], "sqlite": [38, 117, 295], "db": [38, 118, 295], "replac": [38, 39, 115, 116, 129, 171, 172, 228, 229, 261, 270, 271, 295, 365, 391, 507, 508, 616, 617, 745, 776, 830, 831, 853, 922, 952, 1067, 1111, 1114, 1115, 1157, 1158, 1219], "insert": [38, 115, 116, 121, 123, 127, 129, 132, 133, 134, 193, 194, 227, 261, 263, 295, 576, 591, 641, 745, 826, 853, 1112, 1132, 1182, 1219], "mode": [38, 39, 58, 59, 60, 64, 138, 140, 222, 295, 601, 718, 721, 736, 745, 766, 853, 1142, 1219, 1226], "new": [38, 39, 40, 120, 129, 151, 178, 192, 193, 194, 207, 218, 219, 226, 227, 250, 261, 263, 264, 265, 270, 271, 295, 304, 365, 419, 431, 440, 506, 529, 556, 615, 616, 623, 624, 642, 644, 650, 741, 745, 757, 780, 807, 823, 826, 827, 830, 831, 836, 841, 853, 859, 922, 980, 989, 1079, 1091, 1092, 1156, 1157, 1164, 1165, 1183, 1186, 1192, 1197, 1219, 1226], "alreadi": [38, 39, 295, 356, 472, 659, 745, 912, 1035, 1207, 1219], "adbc": [38, 117, 118, 295], "affect": [38, 138, 139, 140, 141, 295], "driver": [38, 117, 118, 295], "provid": [38, 40, 67, 115, 116, 118, 119, 127, 129, 130, 131, 134, 145, 147, 173, 199, 295, 329, 330, 417, 437, 498, 507, 509, 596, 597, 600, 603, 605, 628, 629, 630, 631, 700, 727, 745, 757, 778, 853, 881, 882, 994, 1020, 1068, 1137, 1138, 1141, 1144, 1146, 1219, 1226, 1227], "otherwis": [38, 84, 117, 120, 144, 149, 207, 214, 234, 237, 281, 295, 329, 339, 357, 414, 415, 416, 498, 509, 517, 545, 549, 554, 565, 566, 567, 568, 570, 572, 592, 596, 663, 678, 710, 735, 745, 801, 811, 841, 853, 881, 897, 913, 976, 977, 978, 1061, 1068, 1086, 1090, 1111, 1114, 1133, 1137, 1219], "deltalak": [39, 119, 130, 137, 295], "deltat": [39, 295], "ignor": [39, 144, 145, 147, 210, 211, 247, 248, 265, 295, 305, 307, 359, 391, 414, 415, 416, 470, 534, 535, 591, 663, 665, 745, 860, 861, 915, 952, 976, 977, 978, 1033, 1077, 1078, 1132, 1219], "overwrite_schema": [39, 295], "storage_opt": [39, 115, 119, 121, 123, 127, 130, 131, 132, 134, 295], "delta_write_opt": [39, 295], "merg": [39, 214, 295, 801, 853], "delta_merge_opt": [39, 295], "tablemerg": [39, 295], "delta": [39, 50, 119, 130, 246, 267, 295, 570, 572, 590, 660, 677, 679, 722, 723, 726, 734, 745, 757, 820, 828, 853, 1105, 1107, 1130, 1208, 1219], "handl": [39, 87, 111, 115, 116, 129, 135, 295, 359, 470, 641, 745, 766, 853, 915, 1033, 1182, 1219], "throw": [39, 157, 295, 334, 603, 605, 745, 763, 853, 886, 1144, 1146, 1219], "add": [39, 40, 116, 170, 184, 187, 207, 270, 271, 272, 295, 357, 530, 531, 547, 549, 646, 694, 698, 735, 745, 782, 785, 790, 830, 831, 832, 833, 853, 981, 1219], "anyth": [39, 232, 295], "updat": [39, 162, 295, 853], "extra": [39, 45, 60, 115, 116, 119, 120, 121, 123, 129, 130, 131, 132, 170, 184, 295, 745, 782, 853, 981, 1219], "storag": [39, 115, 119, 121, 123, 127, 130, 131, 132, 134, 295], "backend": [39, 117, 118, 119, 130, 131, 295], "cloud": [39, 117, 119, 127, 130, 131, 134, 135, 295], "configur": [39, 119, 130, 131, 151, 295], "authent": [39, 119, 130, 131, 295], "see": [39, 40, 41, 42, 48, 117, 118, 119, 120, 127, 130, 131, 134, 138, 139, 140, 141, 145, 147, 161, 184, 203, 221, 222, 295, 339, 422, 457, 507, 585, 592, 600, 601, 615, 689, 690, 692, 693, 720, 732, 733, 741, 745, 766, 782, 853, 856, 891, 897, 1021, 1126, 1133, 1141, 1142, 1156, 1219, 1227], "here": [39, 40, 45, 104, 106, 107, 108, 110, 117, 118, 119, 124, 125, 127, 130, 131, 133, 134, 143, 145, 147, 295, 509, 602, 605, 745, 853, 1146], "gc": [39, 119, 130, 131, 295], "azur": [39, 119, 127, 130, 131, 134, 295], "keyword": [39, 67, 119, 127, 130, 161, 221, 232, 237, 238, 270, 271, 274, 295, 545, 724, 727, 735, 745, 804, 811, 812, 830, 831, 834, 853, 1219], "argument": [39, 45, 89, 115, 119, 127, 129, 130, 161, 163, 169, 183, 184, 185, 186, 187, 188, 208, 210, 215, 220, 221, 222, 231, 237, 238, 239, 245, 247, 257, 263, 266, 270, 271, 274, 295, 392, 406, 417, 441, 541, 545, 561, 564, 565, 566, 567, 568, 570, 571, 572, 588, 627, 628, 629, 663, 670, 671, 672, 674, 675, 676, 678, 696, 724, 727, 735, 745, 770, 774, 781, 782, 783, 784, 785, 786, 804, 809, 811, 812, 814, 819, 826, 830, 831, 834, 853, 953, 967, 998, 1168, 1169, 1170, 1201, 1219], "while": [39, 86, 116, 119, 120, 130, 145, 147, 151, 201, 213, 261, 265, 295, 607, 767, 800, 827, 853, 991, 1148, 1219], "lake": [39, 119, 130, 295, 757], "typeerror": [39, 295], "unsupport": [39, 295], "arrowinvaliderror": [39, 295], "could": [39, 77, 92, 157, 295, 334, 680, 684, 694, 698, 745, 763, 771, 853, 886, 991, 1219], "primit": [39, 295, 446, 745, 1200, 1219], "tablenotfounderror": [39, 295], "doesn": [39, 115, 129, 184, 295, 411, 745, 782, 853, 973, 1209, 1219], "action": [39, 295], "trigger": [39, 257, 295, 745, 1201, 1219], "categor": [39, 51, 70, 88, 89, 105, 138, 139, 140, 141, 203, 254, 295, 335, 336, 357, 549, 556, 653, 745, 856, 887, 888, 889, 890, 891, 892, 913, 1086, 1092, 1202, 1219], "protocol": [39, 105, 118, 153, 295], "nullabl": [39, 295], "To": [39, 86, 171, 208, 210, 215, 247, 295, 339, 361, 362, 422, 592, 600, 601, 615, 628, 629, 630, 631, 639, 745, 776, 853, 897, 917, 918, 991, 1133, 1141, 1142, 1156, 1180, 1200, 1219], "pyarrow": [39, 45, 104, 105, 109, 115, 118, 119, 121, 123, 127, 130, 135, 137, 251, 256, 257, 295, 758, 1195, 1199, 1200, 1201, 1219], "ha": [39, 40, 79, 86, 117, 120, 129, 153, 154, 174, 177, 184, 185, 186, 187, 188, 193, 228, 231, 250, 266, 276, 295, 309, 333, 351, 352, 353, 354, 355, 356, 444, 448, 451, 456, 468, 481, 496, 505, 506, 508, 518, 547, 561, 562, 564, 565, 566, 567, 568, 570, 571, 572, 594, 604, 608, 609, 610, 611, 614, 619, 620, 626, 646, 649, 650, 654, 667, 686, 687, 697, 706, 708, 741, 745, 767, 782, 783, 784, 785, 786, 795, 809, 823, 836, 841, 853, 863, 885, 896, 908, 909, 910, 911, 912, 914, 991, 1003, 1005, 1009, 1031, 1044, 1059, 1067, 1097, 1113, 1115, 1135, 1145, 1149, 1150, 1151, 1152, 1155, 1160, 1161, 1167, 1191, 1192, 1203, 1219], "last": [39, 138, 139, 140, 141, 156, 190, 204, 206, 222, 234, 245, 249, 260, 262, 289, 295, 319, 356, 369, 384, 389, 407, 448, 449, 456, 476, 495, 498, 528, 530, 531, 532, 533, 547, 587, 624, 646, 648, 730, 745, 761, 791, 819, 822, 824, 825, 849, 853, 856, 872, 912, 926, 945, 950, 968, 993, 1009, 1010, 1023, 1039, 1058, 1165, 1190, 1219], "filesystem": [39, 119, 130, 131, 295], "table_path": [39, 119, 130, 131, 295], "match": [39, 40, 48, 87, 98, 104, 106, 107, 108, 110, 124, 125, 133, 138, 139, 140, 141, 172, 203, 204, 232, 265, 295, 515, 556, 569, 592, 593, 594, 595, 598, 600, 601, 603, 605, 615, 616, 617, 625, 632, 633, 634, 735, 745, 777, 790, 791, 827, 853, 856, 1008, 1017, 1092, 1104, 1133, 1134, 1135, 1136, 1139, 1141, 1142, 1144, 1146, 1156, 1157, 1158, 1166, 1173, 1174, 1175, 1219], "version": [39, 84, 89, 119, 120, 130, 137, 153, 154, 174, 177, 184, 185, 186, 187, 188, 189, 193, 208, 210, 215, 228, 242, 247, 250, 276, 295, 309, 340, 341, 351, 352, 353, 354, 355, 370, 374, 378, 380, 382, 384, 385, 387, 391, 394, 406, 435, 444, 448, 451, 456, 468, 481, 496, 505, 506, 508, 547, 562, 579, 593, 594, 604, 608, 609, 610, 611, 614, 619, 620, 626, 632, 634, 646, 649, 650, 667, 686, 687, 689, 691, 708, 720, 745, 782, 783, 784, 785, 786, 795, 816, 823, 836, 853, 863, 898, 899, 908, 909, 910, 911, 913, 927, 931, 938, 940, 943, 945, 946, 948, 952, 953, 955, 967, 992, 999, 1003, 1005, 1008, 1009, 1015, 1017, 1019, 1031, 1044, 1059, 1067, 1086, 1097, 1113, 1115, 1119, 1134, 1135, 1145, 1149, 1150, 1151, 1152, 1155, 1160, 1161, 1167, 1173, 1175, 1191, 1192, 1209, 1219], "old": [39, 226, 295, 556, 745, 807, 853, 1092, 1219], "existing_table_path": [39, 295], "store": [39, 115, 127, 131, 170, 201, 233, 295, 335, 888, 981, 1219], "bucket": [39, 119, 130, 131, 134, 295, 392, 406, 437, 745, 953, 967, 994, 1219], "prefix": [39, 151, 295, 304, 332, 506, 529, 531, 532, 533, 625, 629, 630, 641, 646, 745, 856, 884, 1166, 1171, 1182], "aws_region": [39, 130, 134, 295], "the_aws_region": [39, 295], "aws_access_key_id": [39, 119, 130, 134, 295], "the_aws_access_key_id": [39, 119, 130, 131, 295], "aws_secret_access_kei": [39, 119, 130, 134, 295], "the_aws_secret_access_kei": [39, 119, 130, 131, 295], "pa": [39, 104, 135, 295], "check": [39, 48, 115, 116, 129, 138, 139, 140, 141, 150, 167, 177, 184, 185, 187, 188, 197, 199, 203, 231, 295, 328, 331, 332, 441, 446, 467, 561, 592, 598, 625, 745, 782, 783, 785, 786, 790, 795, 796, 809, 853, 880, 883, 884, 974, 999, 1001, 1005, 1006, 1008, 1015, 1016, 1017, 1019, 1020, 1030, 1113, 1133, 1139, 1166, 1219], "doc": [39, 41, 42, 118, 138, 140, 161, 295], "evolut": [39, 295], "yet": [39, 295], "packag": [39, 117, 120, 295], "therefor": [39, 105, 168, 295, 509, 735, 745, 975, 1219], "effect": [39, 40, 176, 184, 187, 256, 295, 371, 509, 689, 690, 745, 782, 785, 833, 853, 920, 928], "predic": [39, 58, 59, 60, 85, 86, 129, 132, 133, 134, 135, 173, 199, 232, 295, 423, 661, 698, 735, 745, 766, 767, 773, 775, 778, 795, 796, 805, 807, 817, 833, 853, 985, 1111, 1114, 1219], "source_alia": [39, 295], "target_alia": [39, 295], "when_matched_update_al": [39, 295], "when_not_matched_insert_al": [39, 295], "execut": [39, 65, 66, 68, 70, 87, 117, 205, 295, 472, 659, 745, 762, 795, 796, 805, 853, 1035, 1207, 1219, 1226], "workbook": [40, 120, 295], "worksheet": [40, 120, 126, 295], "posit": [40, 163, 169, 183, 186, 220, 237, 238, 239, 241, 245, 263, 270, 271, 274, 295, 414, 415, 416, 417, 491, 541, 549, 578, 588, 602, 614, 636, 670, 671, 672, 674, 675, 676, 696, 724, 727, 745, 770, 774, 781, 784, 811, 812, 814, 815, 819, 826, 830, 831, 834, 853, 976, 977, 978, 1054, 1086, 1118, 1143, 1155, 1177, 1219], "tupl": [40, 118, 120, 126, 154, 201, 207, 232, 233, 234, 240, 273, 295, 557, 745, 805, 817, 853, 856, 1093, 1219], "a1": [40, 80, 82, 295], "table_styl": [40, 295], "column_format": [40, 295], "columnformatdict": [40, 295], "dtype_format": [40, 295], "oneormoredatatyp": [40, 143, 295, 1017, 1219], "conditional_format": [40, 295], "conditionalformatdict": [40, 295], "header_format": [40, 295], "column_tot": [40, 295], "columntotalsdefinit": [40, 295], "column_width": [40, 295], "columnwidthsdefinit": [40, 295], "row_tot": [40, 295], "rowtotalsdefinit": [40, 295], "row_height": [40, 295], "sparklin": [40, 295], "sequenc": [40, 71, 79, 104, 106, 107, 108, 110, 115, 116, 117, 120, 124, 125, 126, 129, 133, 143, 144, 145, 156, 162, 169, 170, 203, 204, 213, 218, 220, 221, 222, 234, 245, 254, 260, 264, 265, 266, 295, 357, 446, 498, 505, 507, 545, 549, 556, 588, 630, 631, 644, 667, 672, 680, 681, 684, 685, 698, 700, 708, 709, 710, 720, 725, 745, 761, 774, 790, 791, 800, 804, 819, 824, 827, 853, 913, 914, 981, 1061, 1086, 1092, 1111, 1115, 1186, 1219], "formula": [40, 295, 411, 745, 973, 1219], "autofilt": [40, 295], "autofit": [40, 295], "hidden_column": [40, 295], "selectortyp": [40, 295, 856], "hide_gridlin": [40, 295], "sheet_zoom": [40, 295], "freeze_pan": [40, 295], "excel": [40, 120, 295], "open": [40, 114, 115, 116, 120, 121, 122, 123, 124, 125, 126, 127, 128, 132, 134, 295, 769, 853], "xlsxwriter": [40, 137, 295], "close": [40, 117, 184, 185, 187, 188, 231, 295, 357, 441, 502, 549, 561, 564, 565, 566, 567, 568, 570, 571, 572, 585, 689, 690, 692, 693, 732, 733, 745, 782, 783, 785, 786, 809, 853, 913, 998, 1086, 1126, 1219], "xlsx": [40, 120, 295], "work": [40, 49, 51, 105, 116, 135, 227, 238, 271, 295, 305, 307, 309, 326, 338, 339, 417, 426, 472, 499, 509, 541, 560, 606, 607, 656, 745, 812, 831, 853, 856, 860, 861, 879, 894, 897, 987, 1035, 1062, 1147, 1148, 1204, 1219], "directori": [40, 45, 127, 295], "sheet1": [40, 295], "medium": [40, 295], "kei": [40, 79, 84, 87, 127, 131, 134, 184, 201, 203, 204, 214, 220, 222, 226, 230, 233, 234, 265, 295, 509, 556, 727, 745, 775, 782, 790, 791, 801, 807, 808, 827, 853, 1092, 1219], "follow": [40, 45, 84, 115, 116, 119, 129, 130, 131, 138, 184, 204, 207, 221, 231, 266, 295, 388, 392, 406, 545, 552, 561, 564, 565, 566, 567, 568, 569, 570, 571, 572, 644, 655, 689, 690, 692, 693, 710, 732, 733, 735, 737, 738, 740, 745, 746, 747, 750, 752, 753, 754, 782, 791, 804, 809, 853, 949, 953, 967, 1088, 1111, 1114, 1211, 1213, 1215, 1219, 1220, 1223, 1224, 1225, 1227], "first_column": [40, 295], "last_column": [40, 295], "banded_column": [40, 295], "banded_row": [40, 295], "sheet": [40, 120, 126, 295], "chart": [40, 295, 805, 853], "subsequ": [40, 69, 225, 257, 295, 498, 735, 773, 853], "colnam": [40, 129, 145, 166, 295, 735, 772, 853], "given": [40, 64, 65, 79, 104, 106, 107, 108, 110, 115, 116, 117, 118, 120, 124, 125, 126, 129, 133, 134, 140, 141, 142, 143, 145, 146, 147, 148, 154, 156, 168, 169, 171, 184, 185, 187, 188, 199, 207, 220, 221, 231, 232, 234, 241, 242, 245, 260, 265, 295, 339, 363, 366, 395, 397, 398, 411, 437, 441, 467, 491, 498, 500, 509, 541, 545, 552, 555, 557, 561, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 576, 578, 579, 601, 602, 612, 613, 632, 634, 641, 644, 667, 696, 708, 709, 710, 721, 722, 723, 745, 761, 774, 782, 783, 785, 786, 795, 796, 804, 809, 815, 816, 819, 824, 827, 836, 841, 853, 856, 863, 897, 920, 923, 956, 958, 959, 973, 975, 994, 998, 1020, 1030, 1054, 1061, 1063, 1066, 1068, 1079, 1088, 1093, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1112, 1118, 1119, 1142, 1143, 1153, 1154, 1173, 1175, 1182, 1206, 1210, 1219, 1226, 1227], "dd": [40, 295], "mm": [40, 295], "yyyi": [40, 295], "overridden": [40, 104, 106, 108, 110, 124, 125, 149, 295, 853], "basi": [40, 145, 295], "param": [40, 104, 106, 107, 108, 110, 115, 116, 124, 125, 129, 144, 145, 147, 232, 295, 853], "It": [40, 70, 89, 162, 214, 221, 281, 295, 517, 560, 741, 745, 795, 796, 801, 841, 853, 1111, 1114, 1219], "float_dtyp": [40, 295], "simplifi": [40, 58, 59, 60, 85, 86, 295, 766, 767, 773, 775, 805, 817, 853], "uniform": [40, 295, 549, 745, 1086, 1219], "condit": [40, 165, 173, 232, 295, 598, 625, 673, 698, 735, 771, 778, 853], "suppli": [40, 104, 106, 107, 108, 110, 117, 124, 125, 133, 173, 232, 295, 545, 745, 778, 853], "typenam": [40, 295], "3_color_scal": [40, 295], "data_bar": [40, 295], "make": [40, 71, 87, 104, 109, 115, 116, 121, 123, 127, 132, 214, 218, 225, 266, 295, 415, 416, 437, 532, 533, 541, 555, 623, 745, 801, 853, 977, 978, 994, 1164, 1219, 1227], "icon": [40, 295], "multipl": [40, 67, 85, 86, 87, 115, 116, 120, 126, 129, 132, 133, 134, 143, 147, 156, 163, 168, 170, 173, 183, 184, 192, 202, 220, 222, 234, 237, 239, 245, 260, 265, 270, 274, 295, 475, 496, 514, 518, 525, 526, 541, 556, 557, 560, 564, 565, 566, 567, 568, 570, 571, 572, 588, 672, 684, 685, 698, 708, 709, 711, 715, 720, 725, 728, 735, 741, 745, 761, 766, 767, 770, 778, 781, 782, 811, 814, 819, 824, 827, 830, 834, 841, 853, 862, 975, 981, 1038, 1059, 1073, 1092, 1093, 1219], "singl": [40, 65, 79, 86, 87, 115, 116, 117, 118, 120, 127, 129, 134, 143, 157, 163, 164, 165, 170, 179, 189, 199, 203, 207, 220, 232, 234, 245, 295, 309, 339, 388, 423, 430, 433, 435, 468, 469, 475, 496, 507, 509, 553, 556, 557, 588, 591, 661, 667, 672, 675, 676, 705, 709, 710, 725, 733, 745, 763, 766, 770, 771, 790, 819, 853, 897, 949, 981, 992, 1031, 1032, 1038, 1089, 1092, 1093, 1132, 1195, 1219], "across": [40, 79, 189, 209, 211, 216, 248, 295, 435, 664, 666, 680, 681, 683, 687, 712, 716, 729, 745, 992, 1219], "heatmap": [40, 295], "min": [40, 45, 60, 162, 172, 216, 222, 231, 295, 341, 348, 353, 422, 541, 552, 561, 567, 716, 724, 745, 777, 809, 853, 899, 905, 909, 914, 984, 1088, 1102, 1219, 1227], "entir": [40, 295, 766, 853], "made": [40, 117, 295, 1200, 1219], "abov": [40, 138, 222, 295, 735], "than": [40, 58, 59, 60, 103, 108, 110, 115, 116, 117, 120, 126, 129, 135, 145, 147, 158, 183, 186, 201, 204, 207, 220, 232, 233, 235, 264, 281, 295, 432, 434, 459, 486, 504, 509, 520, 549, 560, 575, 585, 606, 612, 613, 624, 641, 677, 689, 710, 745, 766, 781, 784, 791, 841, 853, 1049, 1068, 1086, 1096, 1110, 1126, 1147, 1153, 1154, 1165, 1182, 1219, 1227], "bold": [40, 295], "font_color": [40, 295], "702963": [40, 295], "total": [40, 168, 277, 295, 370, 374, 378, 380, 382, 387, 394, 399, 400, 401, 402, 403, 404, 405, 460, 480, 678, 745, 837, 927, 931, 938, 940, 943, 948, 955, 960, 961, 962, 963, 964, 965, 966, 975, 1022, 1043, 1219], "export": [40, 201, 202, 233, 234, 253, 256, 295, 741], "associ": [40, 65, 67, 79, 118, 144, 234, 295], "sum": [40, 64, 168, 176, 183, 184, 199, 222, 231, 248, 274, 295, 349, 350, 355, 411, 423, 498, 509, 517, 519, 520, 521, 556, 561, 571, 661, 663, 680, 682, 683, 684, 686, 687, 698, 710, 720, 729, 745, 766, 767, 769, 773, 775, 781, 782, 803, 805, 809, 813, 817, 834, 853, 856, 906, 907, 911, 973, 975, 1106, 1219], "must": [40, 105, 106, 119, 130, 131, 135, 162, 169, 184, 185, 187, 188, 204, 214, 231, 232, 295, 357, 498, 507, 549, 556, 561, 564, 565, 566, 567, 568, 570, 571, 572, 735, 745, 774, 782, 783, 785, 786, 791, 795, 796, 801, 809, 853, 913, 914, 1086, 1092, 1219], "funcnam": [40, 295], "averag": [40, 295, 414, 415, 416, 552, 745, 976, 977, 978, 1088, 1219], "count_num": [40, 295], "count": [40, 64, 115, 116, 121, 123, 127, 129, 132, 133, 134, 135, 155, 162, 184, 204, 218, 219, 222, 231, 261, 265, 266, 272, 281, 286, 295, 310, 346, 351, 388, 437, 460, 468, 469, 480, 509, 517, 519, 527, 539, 561, 564, 565, 566, 567, 568, 570, 571, 572, 594, 595, 657, 659, 668, 717, 745, 760, 782, 791, 803, 809, 833, 841, 846, 853, 914, 949, 994, 1022, 1031, 1032, 1043, 1075, 1081, 1135, 1136, 1205, 1207, 1219], "std_dev": [40, 295], "var": [40, 148, 295, 572, 745, 853, 1219], "pixel": [40, 295], "unit": [40, 48, 50, 138, 139, 140, 141, 145, 147, 168, 295, 364, 365, 372, 397, 409, 503, 518, 632, 634, 658, 689, 690, 691, 692, 693, 694, 700, 745, 805, 853, 856, 921, 922, 929, 958, 970, 975, 1066, 1173, 1175, 1206, 1219, 1227], "hand": [40, 115, 116, 129, 295, 487, 488, 489, 490, 1050, 1051, 1052, 1053], "side": [40, 184, 185, 187, 188, 231, 295, 441, 487, 488, 489, 490, 561, 564, 565, 566, 567, 568, 570, 571, 572, 576, 689, 690, 692, 693, 732, 733, 745, 782, 783, 785, 786, 809, 853, 998, 1050, 1051, 1052, 1053, 1112, 1219], "call": [40, 68, 70, 89, 116, 117, 138, 139, 140, 141, 145, 147, 151, 183, 184, 187, 205, 207, 231, 294, 295, 309, 347, 350, 456, 509, 528, 530, 531, 532, 533, 547, 581, 646, 741, 745, 758, 781, 782, 783, 785, 786, 809, 852, 853, 856, 863, 1068, 1122, 1219], "ad": [40, 107, 120, 184, 187, 261, 265, 270, 271, 295, 308, 420, 680, 681, 684, 685, 745, 782, 785, 827, 830, 831, 853, 913, 982, 1086, 1219], "wise": [40, 79, 117, 176, 295, 311, 312, 313, 314, 315, 316, 342, 343, 344, 418, 501, 582, 583, 584, 651, 652, 684, 685, 698, 720, 745, 864, 865, 866, 867, 868, 869, 901, 902, 903, 979, 1064, 1065, 1123, 1124, 1125, 1193, 1194, 1219], "particip": [40, 295], "distinct": [40, 147, 220, 295, 326, 444, 445, 448, 449, 499, 552, 694, 745, 879, 1003, 1004, 1009, 1010, 1062, 1088, 1219, 1227], "referenc": [40, 295, 644], "differ": [40, 115, 135, 138, 140, 170, 184, 189, 201, 231, 233, 234, 253, 261, 295, 359, 369, 388, 389, 391, 407, 413, 435, 470, 487, 489, 498, 509, 534, 535, 537, 556, 632, 657, 697, 700, 706, 745, 773, 782, 809, 853, 856, 891, 915, 926, 949, 950, 952, 968, 974, 981, 992, 1033, 1050, 1052, 1068, 1077, 1078, 1092, 1113, 1173, 1219], "row_index": [40, 295], "height": [40, 165, 295], "intersect": [40, 295, 488, 856, 1051], "bodi": [40, 295], "start": [40, 114, 115, 116, 117, 118, 121, 123, 126, 127, 129, 132, 133, 134, 149, 183, 184, 186, 187, 205, 244, 266, 272, 295, 328, 331, 332, 369, 383, 389, 392, 406, 407, 417, 441, 492, 564, 565, 567, 570, 571, 572, 586, 592, 598, 601, 613, 621, 625, 629, 630, 641, 669, 680, 684, 689, 690, 692, 693, 696, 698, 704, 705, 732, 733, 735, 745, 781, 782, 784, 785, 805, 818, 833, 853, 856, 884, 921, 923, 926, 929, 930, 937, 939, 942, 944, 947, 950, 953, 958, 967, 968, 998, 1055, 1127, 1139, 1142, 1154, 1162, 1166, 1182, 1219, 1227], "unless": [40, 79, 106, 257, 295, 627, 628, 721, 853, 1168, 1201, 1209, 1219], "marker": [40, 295], "compliant": [40, 295], "case": [40, 70, 79, 86, 104, 106, 107, 108, 110, 117, 124, 125, 133, 134, 149, 154, 170, 184, 185, 187, 188, 201, 207, 231, 233, 234, 253, 295, 363, 506, 507, 517, 518, 529, 561, 592, 593, 601, 615, 617, 745, 767, 782, 783, 785, 786, 809, 853, 856, 920, 981, 1133, 1134, 1142, 1156, 1158, 1219], "three": [40, 259, 295, 357, 549, 576, 745, 913, 1061, 1086, 1219], "avail": [40, 113, 117, 118, 119, 130, 131, 143, 151, 222, 294, 295, 552, 737, 738, 740, 744, 745, 746, 747, 750, 751, 752, 753, 754, 757, 758, 775, 852, 853, 856, 914, 1088, 1211, 1213, 1215, 1219, 1220, 1223, 1224, 1225], "insert_befor": [40, 295], "insert_aft": [40, 295], "respect": [40, 295, 593, 617, 856, 1134, 1158], "direct": [40, 118, 127, 131, 134, 138, 241, 264, 295, 491, 578, 745, 815, 853, 1054, 1118, 1219], "far": [40, 295], "strongli": [40, 149, 207, 232, 281, 295, 509, 745, 1068, 1219], "advis": [40, 70, 89, 205, 295], "structur": [40, 95, 99, 101, 170, 221, 234, 256, 295, 545, 745, 804, 853, 981, 1219], "wherev": [40, 207, 281, 295, 509, 745, 1068, 1219], "possibl": [40, 115, 156, 183, 186, 201, 207, 233, 260, 262, 281, 295, 503, 509, 517, 563, 624, 658, 745, 761, 781, 784, 819, 824, 825, 853, 1068, 1098, 1165, 1219], "simpl": [40, 147, 218, 295], "colx": [40, 69, 295, 532, 533, 856, 1227], "coli": [40, 295, 532, 533, 856, 1227], "after": [40, 69, 87, 107, 114, 115, 116, 121, 123, 127, 129, 132, 133, 134, 170, 263, 294, 295, 417, 508, 541, 552, 641, 745, 826, 853, 981, 1067, 1088, 1182, 1219], "befor": [40, 115, 117, 120, 129, 135, 138, 139, 140, 141, 149, 151, 170, 184, 187, 204, 263, 295, 349, 350, 356, 508, 541, 542, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 641, 647, 722, 723, 745, 782, 785, 788, 791, 826, 853, 906, 907, 912, 981, 1067, 1082, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1182, 1189, 1219], "most": [40, 66, 104, 115, 116, 118, 129, 138, 139, 140, 141, 295, 518, 525, 542, 624, 745, 1073, 1082, 1165, 1219, 1226], "mandatori": [40, 295], "return_dtyp": [40, 154, 207, 295, 309, 505, 507, 508, 509, 556, 667, 708, 709, 710, 745, 863, 1067, 1068, 1092, 1219], "latter": [40, 170, 295, 981, 1219], "appropri": [40, 135, 256, 295, 552, 745, 1088, 1219], "pure": [40, 295, 1200, 1219], "actual": [40, 107, 145, 147, 234, 295, 1121, 1219], "indic": [40, 114, 115, 116, 117, 121, 123, 127, 129, 134, 142, 143, 147, 184, 185, 187, 188, 231, 234, 239, 241, 254, 295, 320, 430, 437, 442, 443, 444, 445, 447, 448, 449, 450, 452, 453, 454, 475, 491, 496, 513, 516, 561, 564, 565, 566, 567, 568, 570, 571, 572, 576, 578, 582, 649, 672, 673, 745, 782, 783, 785, 786, 809, 814, 815, 853, 856, 988, 994, 1002, 1003, 1004, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1038, 1054, 1059, 1111, 1112, 1115, 1118, 1123, 1191, 1196, 1219, 1227], "calcul": [40, 79, 184, 246, 267, 295, 359, 414, 415, 416, 457, 470, 487, 503, 569, 585, 590, 658, 660, 677, 679, 722, 723, 726, 734, 745, 782, 820, 828, 853, 915, 976, 977, 978, 1021, 1033, 1050, 1104, 1126, 1130, 1208, 1219], "individu": [40, 60, 145, 151, 231, 256, 295, 509, 601, 745, 766, 809, 853, 895, 1142, 1219], "gridlin": [40, 295], "zoom": [40, 295], "freez": [40, 295], "pane": [40, 295], "top": [40, 156, 260, 295, 761, 824, 853], "index": [40, 105, 109, 112, 137, 153, 174, 180, 184, 185, 187, 188, 193, 194, 199, 201, 204, 222, 228, 229, 231, 232, 233, 241, 244, 256, 258, 265, 266, 272, 295, 303, 317, 318, 319, 321, 388, 430, 433, 464, 465, 475, 476, 491, 492, 496, 498, 561, 564, 565, 566, 567, 568, 570, 571, 572, 576, 578, 586, 600, 621, 649, 745, 782, 783, 785, 786, 791, 809, 815, 818, 827, 833, 853, 870, 871, 872, 873, 874, 949, 988, 1020, 1027, 1028, 1038, 1039, 1054, 1055, 1059, 1061, 1079, 1111, 1112, 1115, 1118, 1127, 1141, 1162, 1191, 1219], "thu": [40, 170, 295, 677, 981, 1219], "altern": [40, 295, 741], "a2": [40, 80, 82, 295], "occur": [40, 85, 86, 295, 468, 469, 525, 552, 745, 766, 767, 773, 775, 805, 817, 853, 1031, 1032, 1073, 1088, 1219], "equival": [40, 104, 106, 107, 108, 110, 119, 124, 125, 133, 184, 199, 218, 295, 302, 306, 412, 413, 427, 432, 434, 459, 504, 524, 526, 536, 537, 540, 546, 607, 645, 655, 662, 745, 782, 853, 1020, 1148, 1178, 1180, 1181, 1219], "top_row": [40, 295], "top_col": [40, 295], "base": [40, 46, 165, 173, 184, 185, 187, 188, 231, 295, 363, 371, 411, 414, 415, 416, 437, 500, 501, 549, 556, 561, 614, 636, 745, 771, 778, 782, 783, 785, 786, 809, 853, 856, 920, 928, 973, 976, 977, 978, 994, 1063, 1064, 1086, 1092, 1155, 1177, 1210, 1219, 1227], "scroll": [40, 295], "region": [40, 131, 295], "initit": [40, 295], "5th": [40, 295], "properti": [40, 153, 160, 166, 175, 191, 236, 240, 269, 295, 768, 772, 810, 829, 853, 856, 1227], "readthedoc": [40, 295], "io": [40, 131, 295, 769, 813, 853], "html": [40, 41, 42, 105, 117, 153, 161, 295], "definit": [40, 143, 295, 457, 745, 1021, 1219], "take": [40, 120, 126, 145, 151, 176, 178, 184, 187, 211, 214, 221, 222, 250, 256, 295, 388, 430, 431, 475, 588, 650, 689, 690, 695, 697, 706, 745, 780, 782, 785, 801, 823, 853, 949, 988, 989, 1038, 1192, 1210, 1219], "care": [40, 295, 309, 509, 577, 745, 1116, 1219], "rel": [40, 118, 119, 130, 131, 138, 139, 140, 141, 295, 388, 414, 415, 416, 566, 568, 570, 572, 745, 949, 976, 977, 978, 1219], "working_with_conditional_format": [40, 295], "similarli": [40, 107, 184, 204, 231, 266, 295, 388, 392, 406, 561, 564, 565, 566, 567, 568, 570, 571, 572, 689, 690, 692, 693, 732, 733, 745, 782, 791, 809, 853, 949, 953, 967], "well": [40, 115, 116, 117, 129, 222, 295, 441, 745, 998, 1219], "adjac": [40, 295], "two": [40, 69, 70, 88, 89, 106, 108, 110, 118, 176, 213, 214, 222, 259, 275, 281, 295, 303, 360, 365, 430, 433, 498, 549, 587, 670, 671, 677, 679, 722, 723, 745, 800, 801, 835, 841, 853, 916, 922, 1061, 1086, 1219], "help": [40, 138, 139, 140, 141, 295, 775, 853], "where": [40, 64, 79, 117, 118, 144, 165, 170, 184, 201, 213, 233, 246, 265, 267, 295, 320, 408, 411, 413, 537, 555, 576, 585, 588, 590, 617, 660, 673, 677, 679, 722, 723, 726, 734, 735, 745, 771, 782, 800, 820, 827, 828, 853, 873, 969, 973, 981, 1112, 1126, 1130, 1158, 1208, 1210, 1219, 1226], "working_with_sparklin": [40, 295], "inject": [40, 79, 295], "locat": [40, 170, 228, 229, 258, 263, 295, 576, 745, 826, 853, 981, 988, 1111, 1112, 1115, 1191, 1219], "syntax": [40, 173, 207, 218, 295, 592, 600, 601, 615, 741, 778, 817, 853, 1133, 1141, 1142, 1156, 1219], "correctli": [40, 120, 295], "microsoft": [40, 295], "com": [40, 118, 295, 414, 415, 416, 600, 601, 602, 745, 976, 977, 978, 1141, 1142, 1143, 1219], "u": [40, 48, 50, 67, 134, 295, 364, 365, 372, 397, 409, 632, 634, 689, 690, 691, 692, 693, 694, 700, 856, 921, 922, 929, 958, 970, 1173, 1175], "offic": [40, 295], "f5ed2452": [40, 295], "2337": [40, 295], "4f71": [40, 295], "bed3": [40, 295], "c8ae6d2b276": [40, 295], "instanti": [40, 117, 237, 270, 295, 811, 830, 853], "basic": [40, 295, 1227], "random": [40, 41, 136, 143, 145, 147, 189, 235, 295, 435, 486, 552, 575, 581, 659, 745, 757, 992, 1049, 1088, 1110, 1122, 1207, 1219], "dtm": [40, 295, 365, 856, 922], "500": [40, 265, 295, 775, 827, 853, 937, 939, 947, 1099, 1100, 1102, 1219], "val": [40, 230, 295, 509, 545, 653, 735, 745, 808, 853], "10_000": [40, 295], "20_000": [40, 295], "30_000": [40, 295], "increas": [40, 79, 115, 127, 134, 295, 356, 745, 912, 1219], "b4": [40, 295], "light": [40, 295], "twice": [40, 120, 295], "titl": [40, 64, 295], "explicit": [40, 117, 129, 143, 265, 295, 720, 827, 853], "integr": [40, 295, 1227], "multi_fram": [40, 295], "wb": [40, 295], "coordin": [40, 295], "advanc": [40, 120, 222, 295, 498, 1061, 1227], "min_color": [40, 295], "76933c": [40, 295], "mid_color": [40, 295], "c4d79b": [40, 295], "max_color": [40, 295], "ebf1d": [40, 295], "data_bar_2010": [40, 295], "bar_color": [40, 295], "9bbb59": [40, 295], "bar_negative_color_sam": [40, 295], "bar_negative_border_color_sam": [40, 295], "white": [40, 295], "w": [40, 66, 67, 184, 187, 234, 295, 595, 600, 602, 664, 666, 782, 785, 853, 856, 1136, 1141, 1143, 1169], "get_worksheet_by_nam": [40, 295], "fmt_titl": [40, 295], "add_format": [40, 295], "4f6228": [40, 295], "font_siz": [40, 295], "12": [40, 79, 111, 144, 145, 184, 200, 204, 231, 242, 266, 295, 304, 340, 341, 349, 363, 365, 369, 373, 381, 383, 384, 385, 388, 389, 390, 392, 406, 407, 408, 456, 506, 542, 547, 551, 561, 571, 579, 580, 595, 609, 619, 635, 646, 681, 688, 689, 690, 691, 692, 693, 709, 732, 733, 745, 782, 787, 791, 794, 809, 816, 817, 822, 853, 856, 898, 899, 920, 922, 944, 953, 967, 1068, 1108, 1119, 1136, 1150, 1160, 1176, 1219, 1227], "ital": [40, 295], "customis": [40, 295], "trend": [40, 295], "win_loss": [40, 295], "subtl": [40, 295], "tone": [40, 295], "hidden": [40, 295], "id": [40, 87, 131, 261, 281, 295, 560, 615, 616, 657, 745, 841, 1096, 1205, 1219, 1227], "q1": [40, 295], "55": [40, 81, 295], "20": [40, 145, 170, 192, 194, 214, 221, 223, 227, 229, 295, 317, 318, 319, 359, 392, 406, 435, 440, 545, 564, 565, 567, 700, 707, 732, 745, 801, 804, 853, 856, 915, 953, 967, 1219], "35": [40, 295, 359, 745, 915, 1219], "q2": [40, 295], "30": [40, 170, 184, 192, 221, 227, 229, 252, 270, 295, 317, 318, 319, 359, 365, 373, 381, 383, 384, 390, 391, 392, 399, 406, 407, 435, 580, 707, 732, 745, 782, 804, 830, 853, 856, 915, 922, 945, 952, 953, 960, 967, 1219, 1227], "60": [40, 170, 295, 393, 405, 571, 632, 745, 950, 954, 966, 1173], "q3": [40, 295], "40": [40, 137, 170, 221, 295, 392, 406, 435, 635, 745, 804, 853, 933, 967, 1176], "80": [40, 295], "q4": [40, 295], "75": [40, 162, 295, 306, 540, 549, 564, 565, 566, 567, 570, 571, 572, 710, 745, 914, 994, 1086, 1219, 1227], "account": [40, 111, 118, 131, 295, 388, 414, 415, 416, 745, 949, 976, 977, 978, 1219], "flavour": [40, 117, 295], "integer_dtyp": [40, 237, 295, 811, 853, 856], "0_": [40, 295], "just": [40, 129, 213, 295, 800, 853], "unifi": [40, 295, 856], "2_color_scal": [40, 295], "95b3d7": [40, 295], "ffffff": [40, 295], "standardis": [40, 295], "z": [40, 66, 71, 87, 111, 143, 145, 168, 196, 198, 203, 213, 233, 234, 264, 295, 302, 304, 306, 435, 466, 506, 509, 529, 530, 531, 532, 533, 540, 547, 555, 556, 593, 601, 617, 632, 634, 646, 664, 666, 683, 712, 716, 721, 729, 745, 790, 800, 818, 853, 856, 984, 1092, 1134, 1142, 1158, 1173, 1175, 1219, 1226], "score": [40, 295], "conjunct": [40, 88, 120, 126, 295], "a123": [40, 295], "b345": [40, 295], "c567": [40, 295], "d789": [40, 295], "e101": [40, 295], "45": [40, 137, 231, 295, 365, 373, 381, 392, 406, 561, 571, 595, 601, 643, 670, 671, 707, 732, 745, 809, 853, 856, 922, 953, 967, 1136, 1142, 1227], "85": [40, 295, 1227], "font": [40, 295], "consola": [40, 295], "stdev": [40, 295], "ipccompress": [41, 42, 295], "arrow": [41, 42, 59, 104, 105, 117, 118, 121, 123, 132, 201, 233, 234, 251, 253, 295, 853, 1195, 1200, 1219], "ipc": [41, 42, 59, 121, 122, 123, 132, 135, 295, 757, 853], "binari": [41, 117, 120, 295, 328, 330, 331, 332, 856, 880, 883, 884], "feather": [41, 121, 132, 295, 757], "access": [41, 80, 81, 82, 83, 127, 131, 134, 153, 201, 232, 233, 295, 602, 832, 853, 1143, 1227], "python": [41, 42, 63, 105, 115, 116, 117, 137, 138, 140, 153, 201, 207, 233, 234, 253, 281, 295, 309, 365, 505, 507, 509, 602, 689, 690, 692, 693, 732, 733, 735, 745, 751, 841, 863, 922, 934, 935, 936, 941, 1068, 1143, 1199, 1219], "lz4": [41, 42, 45, 59, 60, 295, 853], "zstd": [41, 42, 45, 59, 60, 295, 853], "batch": [42, 113, 116, 117, 123, 133, 135, 295, 766, 795, 796, 853], "pretti": [43, 295], "row_ori": [43, 295], "iobas": [43, 44, 124, 125, 295, 522, 769, 813, 853], "serial": [43, 44, 295, 769, 853], "orient": [43, 80, 82, 108, 110, 295, 853], "slower": [43, 108, 110, 120, 183, 186, 207, 220, 266, 281, 295, 509, 710, 745, 781, 784, 841, 853, 1068, 1219], "common": [43, 79, 85, 86, 87, 265, 295, 506, 529, 745, 751, 766, 767, 773, 775, 805, 817, 827, 853], "write_ndjson": [43, 295], "bit_set": [43, 295, 813, 853], "newlin": [44, 125, 133, 295], "delimit": [44, 58, 125, 133, 222, 254, 295, 591, 853, 1132, 1196, 1219], "parquetcompress": [45, 295], "compression_level": [45, 60, 295, 853], "statist": [45, 60, 115, 116, 127, 134, 162, 295, 415, 416, 457, 564, 565, 566, 567, 568, 569, 570, 571, 572, 585, 745, 853, 914, 977, 978, 1021, 1104, 1126, 1219], "row_group_s": [45, 60, 295, 853], "data_page_s": [45, 295], "use_pyarrow": [45, 115, 121, 123, 127, 256, 295, 1199, 1200, 1219], "pyarrow_opt": [45, 119, 127, 130, 295], "parquet": [45, 60, 127, 128, 134, 295, 757, 853], "gzip": [45, 60, 295, 853], "lzo": [45, 60, 295, 853], "brotli": [45, 60, 295, 853], "choos": [45, 59, 60, 184, 222, 295, 782, 853], "good": [45, 59, 60, 201, 295, 853], "perform": [45, 59, 60, 79, 95, 105, 115, 116, 117, 121, 127, 129, 132, 133, 134, 153, 156, 183, 184, 185, 186, 187, 188, 204, 207, 208, 210, 215, 225, 231, 234, 247, 260, 281, 295, 309, 498, 509, 541, 561, 593, 606, 607, 617, 632, 633, 634, 745, 761, 782, 783, 785, 786, 791, 809, 819, 824, 833, 853, 1068, 1134, 1147, 1148, 1158, 1173, 1174, 1175, 1219], "fast": [45, 59, 60, 146, 148, 295, 420, 577, 745, 853, 982, 1116, 1219, 1227], "decompress": [45, 59, 60, 295, 853], "backward": [45, 60, 172, 204, 295, 327, 385, 422, 745, 777, 791, 853, 946, 984, 1219], "guarante": [45, 60, 105, 115, 116, 162, 189, 262, 295, 435, 745, 775, 825, 853, 991, 992, 1219], "deal": [45, 60, 201, 295, 305, 307, 391, 392, 406, 552, 632, 634, 663, 665, 691, 745, 853, 860, 861, 952, 953, 967, 1088, 1173, 1175, 1219], "older": [45, 60, 295, 853], "reader": [45, 60, 113, 115, 116, 121, 123, 127, 295, 758, 853], "higher": [45, 60, 224, 287, 295, 550, 568, 719, 745, 806, 847, 853, 1087, 1103, 1219], "mean": [45, 60, 115, 116, 121, 127, 129, 162, 172, 183, 184, 204, 211, 222, 231, 266, 274, 295, 388, 392, 406, 419, 422, 561, 564, 565, 566, 567, 568, 570, 571, 572, 585, 600, 689, 690, 692, 693, 694, 732, 733, 735, 745, 777, 781, 782, 791, 795, 796, 809, 834, 853, 914, 949, 953, 967, 980, 984, 991, 1100, 1126, 1141, 1219], "smaller": [45, 60, 168, 295, 775, 853, 975, 1219], "disk": [45, 58, 59, 60, 121, 295, 817, 853], "22": [45, 60, 144, 295, 369, 389, 392, 406, 408, 409, 563, 564, 565, 567, 570, 571, 572, 632, 745, 853, 856, 953, 967, 970, 1098, 1173, 1219, 1227], "comput": [45, 60, 85, 87, 92, 168, 183, 204, 257, 262, 274, 287, 295, 301, 311, 312, 313, 314, 315, 316, 322, 323, 324, 337, 342, 343, 344, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 360, 411, 418, 457, 482, 483, 484, 487, 488, 489, 490, 500, 501, 502, 525, 541, 542, 548, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 582, 583, 584, 585, 589, 651, 652, 659, 664, 666, 670, 671, 672, 677, 679, 695, 722, 723, 735, 745, 766, 781, 788, 790, 791, 825, 832, 834, 847, 853, 858, 864, 865, 866, 867, 868, 869, 875, 876, 877, 893, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 916, 973, 975, 979, 1021, 1045, 1046, 1047, 1050, 1051, 1052, 1053, 1063, 1064, 1065, 1073, 1082, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1123, 1124, 1125, 1126, 1129, 1193, 1194, 1201, 1207, 1219], "512": [45, 117, 201, 295, 546, 745, 1082, 1219], "page": [45, 60, 121, 127, 132, 134, 295, 745, 757, 853, 1219], "implement": [45, 105, 117, 153, 189, 207, 281, 295, 435, 456, 509, 528, 530, 531, 532, 533, 547, 646, 710, 745, 841, 992, 1068, 1111, 1114, 1219], "At": [45, 295], "moment": [45, 161, 295, 457, 585, 745, 1021, 1126, 1219], "write_t": [45, 295], "partition_col": [45, 118, 295], "write_to_dataset": [45, 295], "similar": [45, 149, 176, 204, 241, 295, 395, 398, 491, 541, 560, 578, 678, 735, 745, 775, 791, 815, 853, 956, 959, 1054, 1096, 1118, 1219], "spark": [45, 295], "partit": [45, 118, 119, 127, 130, 134, 135, 202, 220, 295], "we": [45, 114, 115, 116, 117, 120, 121, 122, 123, 124, 125, 126, 128, 129, 162, 184, 204, 231, 266, 295, 388, 392, 406, 437, 472, 498, 507, 509, 561, 564, 565, 566, 567, 568, 570, 571, 572, 602, 614, 636, 689, 690, 692, 693, 707, 732, 733, 735, 745, 769, 782, 791, 795, 796, 809, 853, 863, 949, 953, 967, 994, 1035, 1068, 1143, 1155, 1177, 1219], "use_pyarrow_write_to_dataset": [45, 295], "first": [45, 79, 115, 116, 120, 124, 129, 133, 138, 139, 140, 141, 144, 154, 182, 184, 187, 190, 204, 206, 207, 217, 221, 222, 249, 254, 255, 261, 262, 266, 279, 295, 319, 321, 356, 359, 385, 388, 392, 436, 444, 445, 461, 470, 472, 476, 477, 498, 508, 518, 545, 576, 588, 600, 603, 605, 615, 616, 674, 680, 698, 702, 735, 745, 766, 782, 785, 787, 791, 794, 804, 825, 832, 839, 853, 856, 872, 912, 914, 915, 946, 949, 953, 993, 1003, 1004, 1023, 1033, 1035, 1039, 1040, 1061, 1067, 1112, 1141, 1143, 1144, 1146, 1156, 1157, 1190, 1198, 1219, 1227], "watermark": [45, 295], "partitioned_object": [45, 295], "calendar": [47, 48, 184, 204, 231, 266, 295, 376, 388, 392, 406, 410, 561, 564, 565, 566, 567, 568, 570, 571, 572, 689, 690, 692, 693, 694, 732, 733, 745, 782, 791, 809, 853, 933, 949, 953, 967, 971], "time_unit": [48, 50, 364, 365, 372, 397, 409, 634, 689, 690, 691, 692, 693, 694, 700, 856, 921, 922, 929, 958, 970, 1175], "time_zon": [48, 366, 391, 634, 689, 690, 691, 692, 693, 856, 920, 923, 928, 952, 1175], "timezon": [48, 856], "m": [48, 50, 67, 203, 295, 363, 364, 365, 371, 372, 395, 397, 398, 409, 600, 632, 633, 634, 638, 689, 690, 691, 692, 693, 694, 700, 790, 853, 856, 920, 921, 922, 928, 929, 956, 958, 959, 970, 1141, 1173, 1174, 1175, 1179], "zone": [48, 363, 366, 391, 634, 689, 690, 691, 692, 693, 856, 920, 923, 952, 1175], "zoneinfo": [48, 856], "run": [48, 58, 59, 60, 85, 86, 146, 148, 183, 186, 205, 207, 222, 238, 262, 271, 281, 295, 309, 356, 472, 509, 559, 560, 607, 724, 745, 766, 767, 773, 775, 781, 784, 795, 796, 800, 805, 812, 817, 825, 831, 853, 856, 912, 1035, 1068, 1095, 1096, 1148, 1219, 1226, 1227], "available_timezon": [48, 856], "128": [49, 81, 1082, 1219], "bit": [49, 52, 53, 54, 55, 56, 57, 73, 74, 75, 76, 554, 592, 745, 1090, 1133, 1219], "experiment": [49, 51, 86, 135, 264, 265, 295, 356, 392, 437, 509, 564, 565, 566, 567, 568, 570, 571, 572, 745, 767, 827, 853, 892, 912, 953, 994, 1086, 1219], "progress": [49, 51], "expect": [49, 51, 96, 98, 103, 115, 117, 129, 498, 509, 707, 745, 793, 795, 796, 853], "categori": [51, 70, 89, 254, 295, 335, 336, 357, 437, 549, 745, 888, 890, 913, 994, 1086, 1219], "32": [52, 55, 74, 81, 199, 231, 295, 526, 561, 580, 745, 809, 853, 916, 950, 1082, 1103, 1219], "sign": [54, 55, 56, 57, 388, 554, 641, 745, 856, 949, 1008, 1090, 1182, 1219], "maintain_ord": [58, 59, 60, 156, 183, 186, 220, 222, 260, 262, 266, 275, 278, 280, 282, 283, 284, 285, 286, 287, 288, 295, 303, 326, 430, 433, 499, 509, 656, 745, 761, 767, 773, 775, 781, 784, 805, 817, 819, 824, 825, 835, 838, 840, 842, 843, 844, 845, 846, 847, 848, 853, 879, 1062, 1204, 1219], "type_coercion": [58, 59, 60, 85, 86, 766, 767, 773, 775, 805, 817, 853], "predicate_pushdown": [58, 59, 60, 85, 86, 766, 767, 773, 775, 795, 796, 805, 817, 853], "projection_pushdown": [58, 59, 60, 85, 86, 766, 767, 773, 775, 795, 796, 805, 817, 853], "simplify_express": [58, 59, 60, 85, 86, 766, 767, 773, 775, 805, 817, 853], "slice_pushdown": [58, 59, 60, 85, 86, 766, 767, 773, 775, 795, 796, 805, 817, 853], "no_optim": [58, 59, 60, 85, 86, 766, 767, 775, 795, 796, 805, 853], "evalu": [58, 59, 60, 171, 173, 204, 295, 306, 320, 356, 439, 462, 463, 498, 540, 663, 665, 669, 673, 689, 690, 692, 693, 695, 704, 705, 718, 721, 727, 732, 733, 735, 736, 745, 766, 778, 788, 790, 791, 853, 873, 912, 1025, 1026, 1210, 1219], "queri": [58, 59, 60, 64, 66, 85, 86, 117, 118, 121, 129, 132, 133, 134, 170, 205, 221, 295, 507, 509, 605, 745, 766, 767, 773, 775, 787, 794, 805, 817, 833, 836, 841, 853, 981, 1068, 1146, 1219, 1226], "ram": [58, 59, 60, 853], "maintain": [58, 59, 60, 156, 260, 295, 326, 499, 576, 656, 745, 761, 819, 824, 853, 879, 1062, 1112, 1204, 1219], "slightli": [58, 59, 60, 120, 853], "faster": [58, 59, 60, 117, 170, 256, 264, 295, 309, 509, 657, 745, 853, 863, 981, 1068, 1219], "coercion": [58, 59, 60, 85, 86, 555, 745, 766, 767, 773, 775, 805, 817, 853], "optim": [58, 59, 60, 85, 86, 127, 129, 132, 133, 134, 201, 205, 221, 225, 233, 262, 295, 766, 767, 773, 775, 795, 796, 805, 817, 825, 833, 841, 853, 893, 1111, 1219], "pushdown": [58, 59, 60, 85, 86, 766, 767, 773, 775, 795, 796, 805, 807, 817, 833, 853, 1111, 1114, 1219], "project": [58, 59, 60, 85, 86, 129, 131, 132, 133, 134, 309, 587, 588, 745, 766, 767, 773, 775, 795, 796, 805, 807, 813, 817, 853], "slice": [58, 59, 60, 80, 85, 86, 168, 190, 202, 249, 295, 477, 495, 509, 517, 519, 562, 564, 565, 566, 567, 568, 570, 571, 572, 745, 766, 767, 773, 775, 795, 796, 805, 817, 853, 975, 993, 1040, 1058, 1097, 1099, 1100, 1101, 1102, 1103, 1105, 1106, 1107, 1190, 1219], "off": [58, 59, 60, 85, 86, 115, 116, 129, 766, 767, 773, 775, 795, 796, 805, 853], "certain": [58, 59, 60, 86, 94, 119, 130, 193, 194, 266, 295, 628, 629, 766, 767, 805, 853, 1219], "lf": [58, 59, 60, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 787, 788, 789, 790, 792, 793, 794, 796, 797, 798, 799, 800, 802, 803, 804, 805, 806, 807, 808, 810, 811, 813, 815, 817, 818, 819, 820, 821, 822, 824, 825, 827, 828, 829, 830, 832, 833, 837, 853, 1226, 1227], "scan_csv": [58, 59, 60, 115, 116, 853], "my_larger_than_ram_fil": [58, 59, 60, 853], "data_pagesize_limit": [60, 853], "reduc": [60, 115, 116, 127, 129, 132, 133, 134, 282, 283, 285, 288, 580, 681, 698, 745, 842, 843, 845, 848, 853, 1070, 1085, 1120, 1189, 1219], "pressur": [60, 115, 116, 127, 129, 133, 134, 580, 745, 853, 1120, 1219], "improv": [60, 121, 132, 853], "speed": [60, 309, 509, 745, 853, 1227], "integer_list": 61, "float_list": 61, "wrap": [63, 111, 441, 745], "arbitrari": [63, 145, 856], "eager": [64, 65, 66, 67, 68, 69, 184, 222, 264, 295, 364, 366, 369, 372, 377, 384, 385, 388, 389, 391, 392, 397, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 564, 565, 567, 570, 571, 572, 669, 673, 689, 690, 692, 693, 700, 704, 705, 718, 721, 727, 732, 733, 736, 744, 745, 782, 796, 853, 920, 921, 923, 926, 928, 929, 930, 936, 937, 939, 942, 944, 945, 946, 947, 949, 950, 951, 952, 953, 958, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 1226], "against": [64, 117, 472, 853, 1035, 1226, 1227], "eagerli": [64, 498], "unset": [64, 144, 391, 498, 952], "init": [64, 151], "eager_execut": [64, 1226], "itself": [64, 143, 509, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 722, 723, 745, 793, 853, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1219, 1226], "impact": [64, 184, 187, 295, 782, 785, 853, 1226], "declar": [64, 104, 106, 107, 108, 110, 117, 124, 125, 133, 295, 853], "godfath": 64, "1972": 64, "6_000_000": 64, "134_821_952": 64, "dark": 64, "knight": 64, "2008": 64, "185_000_000": 64, "533_316_061": 64, "schindler": 64, "1993": 64, "22_000_000": 64, "96_067_179": 64, "pulp": 64, "fiction": 64, "1994": 64, "8_000_000": 64, "107_930_000": 64, "shawshank": 64, "redempt": 64, "25_000_000": 64, "28_341_469": 64, "release_year": 64, "budget": 64, "gross": 64, "imdb_scor": 64, "ctx": [64, 65, 66, 67, 68, 69], "film": 64, "1990": 64, "BY": [64, 66], "desc": [64, 66], "AS": [64, 725, 1226], "decad": 64, "total_gross": 64, "n_film": 64, "2000": [64, 375, 377, 384, 385, 388, 393, 856, 932, 945, 946, 949, 954], "533316061": 64, "232338648": 64, "1970": [64, 135], "134821952": 64, "register_glob": [65, 67, 69, 1226], "register_mani": [65, 66, 69], "unregist": [65, 66, 67, 1226], "frame_data": [65, 68], "collect": [65, 66, 69, 82, 85, 86, 129, 130, 131, 135, 145, 147, 163, 165, 205, 222, 251, 262, 263, 295, 417, 446, 509, 675, 696, 700, 727, 745, 760, 761, 763, 767, 769, 770, 771, 774, 775, 776, 777, 778, 779, 780, 781, 782, 787, 789, 790, 791, 792, 794, 796, 797, 798, 799, 800, 801, 802, 803, 804, 806, 807, 808, 809, 811, 813, 815, 818, 819, 820, 821, 822, 824, 825, 826, 827, 828, 830, 832, 833, 834, 835, 837, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 853, 856, 1006, 1219, 1226, 1227], "global": [66, 70, 88, 89, 136, 145, 150, 256, 295, 556, 745, 889, 891, 1092, 1219, 1226], "scope": [66, 69, 151, 756, 856, 1226], "map": [66, 67, 71, 106, 107, 115, 116, 117, 118, 121, 122, 127, 128, 129, 132, 157, 166, 175, 201, 207, 226, 232, 233, 234, 252, 295, 304, 392, 406, 506, 507, 508, 509, 528, 541, 556, 560, 659, 709, 745, 763, 772, 807, 853, 856, 914, 953, 967, 1067, 1068, 1092, 1096, 1207, 1219, 1226], "recent": [66, 138, 139, 140, 141, 542, 745, 1082, 1219, 1226], "df1": [66, 68, 69, 79, 87, 138, 139, 167, 170, 214, 257, 268, 295, 801, 853], "df2": [66, 68, 69, 79, 87, 138, 139, 167, 170, 257, 268, 295], "join": [66, 70, 79, 85, 86, 87, 89, 204, 265, 295, 440, 541, 745, 766, 767, 773, 775, 791, 805, 817, 827, 832, 853], "named_fram": [67, 1226], "lf1": [67, 69], "o": [67, 121, 132, 333, 356, 599, 654, 745, 885, 912, 1140, 1168, 1203, 1219], "lf2": [67, 69, 853], "p": [67, 81, 221, 295, 545, 727, 745, 804, 853], "q": [67, 234, 295, 727], "r": [67, 115, 116, 129, 545, 595, 599, 600, 601, 602, 615, 745, 856, 1136, 1140, 1141, 1142, 1143, 1156], "lf3": [67, 853], "lf4": [67, 853], "either": [67, 71, 145, 199, 203, 204, 205, 208, 210, 215, 220, 231, 232, 247, 256, 295, 549, 556, 561, 632, 663, 672, 678, 727, 745, 790, 791, 793, 809, 853, 856, 1086, 1092, 1173, 1219, 1227], "tbl1": [67, 69], "tbl2": [67, 69], "tbl3": 67, "tbl4": 67, "statement": [68, 735], "hello_world": 68, "baz": [68, 194, 195, 222, 263, 295, 602, 622, 624, 741, 789, 826, 853, 856, 1143, 1165], "hello_data": 68, "foo_bar": [68, 513, 516, 622, 707], "registr": [69, 757], "lifetim": [69, 151, 756], "context": [69, 70, 88, 89, 149, 218, 295, 303, 309, 423, 472, 507, 509, 517, 587, 588, 659, 667, 678, 697, 700, 706, 710, 721, 724, 744, 745, 756, 757, 832, 853, 1035, 1207, 1219, 1226], "manag": [69, 70, 88, 89, 756, 757, 1226], "often": [69, 151, 184, 185, 187, 188, 231, 295, 468, 469, 555, 561, 745, 782, 783, 785, 786, 809, 853, 1031, 1032], "want": [69, 86, 107, 170, 207, 218, 295, 423, 507, 509, 560, 564, 565, 566, 567, 568, 570, 571, 572, 593, 606, 617, 680, 689, 698, 718, 721, 736, 745, 767, 787, 794, 853, 856, 981, 1068, 1096, 1134, 1147, 1158, 1219], "df0": [69, 214, 295, 801, 853], "exit": [69, 70, 88, 151, 1226], "construct": [69, 70, 88, 89, 104, 106, 107, 108, 109, 110, 117, 295, 429, 718, 721, 736, 741, 745, 769, 853, 889, 1219], "persist": [69, 853], "through": [69, 105, 117, 741, 856, 1219], "tbl0": 69, "remain": [69, 115, 116, 129, 165, 168, 173, 295, 361, 362, 423, 471, 556, 623, 624, 745, 771, 778, 795, 796, 853, 917, 918, 975, 985, 1034, 1092, 1164, 1165, 1219], "text": [69, 117, 606, 607, 615, 616, 618, 725, 1147, 1148, 1159, 1227], "misc": 69, "testing1234": 69, "test1": 69, "test2": 69, "test3": 69, "disabl": [70, 88, 89, 201, 295, 766, 853], "cach": [70, 85, 86, 88, 89, 121, 129, 132, 134, 138, 139, 140, 141, 150, 556, 564, 565, 566, 567, 568, 570, 571, 572, 632, 633, 634, 638, 745, 756, 766, 767, 773, 775, 805, 817, 853, 889, 1092, 1173, 1174, 1175, 1179, 1219], "under": [70, 80, 81, 82, 83, 88, 89, 737, 738, 740, 741, 746, 747, 750, 752, 753, 754, 1211, 1213, 1215, 1220, 1223, 1224, 1225], "equal": [70, 89, 115, 116, 117, 129, 138, 139, 140, 141, 156, 177, 184, 187, 204, 214, 260, 295, 357, 406, 412, 413, 432, 459, 498, 537, 549, 555, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 612, 613, 641, 722, 723, 735, 741, 745, 761, 782, 785, 791, 801, 819, 824, 853, 913, 953, 1061, 1086, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1105, 1106, 1107, 1113, 1153, 1154, 1182, 1219, 1227], "concaten": [70, 87, 88, 89, 176, 221, 295, 545, 675, 676, 745, 804, 853, 895, 1074, 1219], "introduc": [70, 89, 632, 633, 634, 1173, 1174, 1175], "overhead": [70, 89, 129, 132, 133, 134], "amount": [70, 89, 309, 509, 694, 745], "depend": [70, 84, 89, 117, 137, 464, 465, 509, 517, 549, 552, 694, 697, 700, 706, 745, 1027, 1028, 1086, 1088, 1219, 1227], "nest": [70, 111, 127, 168, 295, 757, 975, 1219, 1226, 1227], "clear": [70, 88, 159, 295, 765, 853, 900, 1219], "outermost": 70, "s1": [70, 88, 89, 140, 141, 176, 295, 974, 1020, 1061, 1201, 1210, 1219], "color": [70, 88, 89, 281, 328, 330, 331, 332, 659, 745, 841, 1207, 1219], "red": [70, 88, 89, 281, 659, 745, 841, 1207, 1219], "green": [70, 88, 89, 281, 659, 745, 841, 1207, 1219], "blue": [70, 88, 89, 328, 330, 331, 332, 659, 745, 1207, 1219], "concat": [70, 88, 89, 116, 895, 1074, 1219], "cat": [70, 88, 89, 357, 549, 592, 595, 637, 640, 653, 676, 740, 745, 856, 913, 994, 1086, 1133, 1136, 1178, 1181, 1215, 1219], "decor": [70, 80, 81, 82, 83, 145, 147, 207, 295, 509, 745, 756, 757, 1068, 1219], "dure": [70, 115, 116, 129, 151, 170, 295, 981, 1219], "afterward": [70, 735], "construct_categor": 70, "schemadict": [71, 104, 106, 107, 108, 109, 110, 115, 117, 118, 120, 126, 129, 295, 727, 795, 796, 836, 841, 853], "composit": [71, 144, 1227], "initi": [71, 151, 680, 684, 698, 735], "dai": [72, 184, 187, 202, 204, 231, 266, 295, 384, 385, 388, 389, 392, 399, 406, 408, 561, 564, 565, 566, 567, 568, 570, 571, 572, 688, 689, 690, 691, 692, 693, 694, 732, 733, 745, 782, 785, 791, 809, 853, 856, 945, 946, 949, 950, 953, 960, 967, 969], "unsign": [73, 74, 75, 76, 554, 745, 856, 1008, 1090, 1219], "static": [77, 836, 841], "frametyp": [79, 1226], "joinstrategi": [79, 203, 295, 790, 853], "outer": [79, 87, 203, 265, 295, 790, 827, 853], "descend": [79, 156, 239, 245, 260, 295, 319, 493, 552, 577, 587, 588, 659, 672, 745, 761, 814, 819, 824, 853, 872, 1016, 1056, 1088, 1116, 1128, 1207, 1219], "fill": [79, 87, 158, 171, 172, 241, 242, 264, 295, 327, 347, 350, 421, 422, 428, 440, 564, 565, 567, 571, 578, 579, 609, 619, 699, 718, 721, 736, 745, 776, 777, 815, 816, 832, 853, 983, 984, 997, 1079, 1099, 1100, 1102, 1105, 1106, 1107, 1118, 1119, 1150, 1160, 1219], "sort": [79, 80, 138, 139, 144, 156, 184, 185, 187, 188, 204, 214, 221, 222, 231, 239, 260, 266, 279, 289, 295, 319, 336, 423, 509, 541, 561, 564, 565, 566, 567, 568, 570, 571, 572, 577, 588, 659, 661, 672, 710, 745, 761, 773, 782, 783, 785, 786, 791, 801, 804, 805, 809, 814, 817, 824, 839, 849, 853, 856, 872, 890, 1016, 1116, 1204, 1207, 1219, 1227], "origin": [79, 115, 116, 129, 165, 173, 262, 295, 361, 362, 391, 392, 406, 423, 456, 471, 508, 528, 541, 554, 555, 556, 557, 594, 595, 600, 605, 670, 671, 745, 771, 778, 825, 853, 913, 917, 918, 952, 953, 967, 985, 1034, 1067, 1086, 1092, 1093, 1135, 1136, 1141, 1146, 1219], "In": [79, 86, 117, 119, 130, 131, 134, 145, 147, 151, 168, 170, 184, 185, 187, 188, 207, 218, 231, 256, 295, 509, 561, 689, 745, 767, 782, 783, 785, 786, 809, 853, 975, 981, 1089, 1219], "duplic": [79, 93, 196, 203, 204, 262, 265, 295, 304, 442, 456, 528, 549, 745, 790, 791, 825, 827, 853, 1000, 1086, 1219], "suitabl": [79, 87, 117, 143, 207, 295, 509, 576, 745, 1068, 1112, 1219, 1227], "get": [79, 86, 112, 122, 128, 135, 149, 156, 160, 166, 175, 179, 181, 184, 185, 187, 188, 190, 191, 196, 198, 199, 206, 209, 216, 217, 222, 231, 232, 236, 240, 244, 249, 260, 269, 279, 289, 295, 303, 317, 318, 319, 321, 326, 335, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 372, 424, 430, 436, 455, 458, 461, 474, 479, 499, 510, 511, 512, 517, 519, 523, 534, 535, 543, 544, 550, 559, 561, 586, 590, 647, 648, 656, 660, 697, 702, 706, 710, 711, 712, 713, 714, 715, 716, 726, 730, 734, 745, 761, 767, 768, 772, 779, 782, 783, 785, 786, 787, 792, 794, 809, 810, 818, 822, 824, 829, 839, 849, 853, 870, 871, 872, 873, 874, 879, 888, 895, 904, 905, 906, 907, 908, 909, 910, 911, 929, 990, 993, 998, 1000, 1018, 1023, 1037, 1042, 1062, 1069, 1071, 1072, 1074, 1077, 1078, 1083, 1084, 1087, 1095, 1127, 1130, 1190, 1195, 1196, 1204, 1208, 1209, 1219], "speedup": [79, 201, 207, 295, 509, 745, 1068, 1219], "receiv": [79, 117, 129, 207, 221, 281, 295, 509, 545, 745, 804, 853, 1227], "now": [79, 231, 295, 406, 809, 853, 953, 967, 1175], "One": [79, 162, 218, 222, 295, 306, 540, 725, 745, 856, 914, 1219], "whose": [79, 204, 222, 295, 417, 696, 745, 791, 853, 856], "uniqu": [79, 142, 143, 144, 147, 155, 198, 203, 218, 222, 234, 286, 295, 310, 321, 357, 455, 527, 549, 632, 633, 634, 638, 657, 659, 668, 717, 745, 760, 790, 846, 853, 874, 913, 914, 1018, 1075, 1086, 1173, 1174, 1175, 1179, 1205, 1207, 1219], "post": 79, "constrain": [79, 165, 295, 771, 853], "newli": 79, "boolean": [79, 156, 173, 176, 205, 245, 260, 295, 305, 306, 307, 328, 331, 332, 375, 423, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 462, 463, 467, 538, 540, 543, 544, 588, 603, 661, 662, 672, 673, 727, 735, 745, 761, 765, 778, 793, 819, 824, 853, 856, 860, 861, 873, 880, 882, 932, 985, 998, 999, 1000, 1002, 1003, 1004, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1018, 1025, 1026, 1030, 1080, 1083, 1084, 1114, 1133, 1200, 1210, 1219], "know": [79, 117, 222, 295, 498, 1209, 1219], "2022": [79, 157, 162, 182, 295, 365, 373, 381, 392, 406, 632, 689, 690, 692, 694, 700, 763, 853, 856, 922, 933, 953, 967, 1173], "df3": [79, 295], "set_tbl_format": 79, "09": [79, 145, 231, 295, 365, 384, 385, 561, 635, 689, 733, 745, 809, 853, 856, 1176], "02": [79, 157, 182, 184, 231, 266, 295, 364, 365, 372, 384, 385, 388, 391, 397, 400, 403, 405, 409, 561, 564, 565, 567, 570, 571, 572, 573, 632, 633, 634, 638, 689, 690, 692, 694, 745, 763, 782, 809, 853, 856, 921, 922, 924, 925, 929, 930, 936, 937, 942, 945, 946, 947, 952, 953, 957, 958, 961, 964, 966, 967, 1061, 1173, 1174, 1175, 1179], "03": [79, 111, 157, 184, 231, 266, 295, 364, 365, 366, 372, 384, 385, 388, 391, 392, 393, 395, 397, 398, 399, 400, 403, 405, 406, 409, 561, 564, 565, 567, 570, 571, 572, 633, 638, 689, 690, 692, 694, 745, 763, 782, 809, 853, 921, 922, 923, 929, 930, 936, 937, 945, 946, 947, 952, 953, 956, 958, 959, 960, 961, 964, 966, 1174, 1179], "af1": 79, "af2": 79, "af3": 79, "keep": [79, 115, 116, 129, 262, 265, 266, 295, 456, 508, 521, 529, 556, 674, 745, 825, 827, 853, 1067, 1092, 1219], "easili": [79, 117, 237, 270, 274, 295, 727, 811, 830, 834, 853], "dot": [79, 745, 817, 853, 1219], "product": [79, 161, 203, 295, 349, 354, 360, 745, 775, 790, 853, 906, 910, 916, 1219], "fill_nul": [79, 171, 295, 745, 776, 832, 853, 1219], "sum_horizont": [79, 247, 295, 728], "167": 79, "47": 79, "callabl": [80, 81, 82, 83, 129, 154, 176, 207, 221, 276, 281, 295, 309, 498, 505, 506, 507, 509, 529, 545, 562, 563, 667, 680, 681, 684, 685, 698, 708, 709, 710, 720, 745, 795, 796, 804, 836, 841, 853, 863, 1061, 1068, 1097, 1098, 1219], "by_first_letter_of_column_nam": 80, "f": [80, 116, 182, 202, 251, 261, 264, 295, 302, 498, 580, 599, 632, 634, 667, 675, 708, 745, 1061, 1140, 1173, 1175], "fromkei": [80, 82], "by_first_letter_of_column_valu": 80, "starts_with": [80, 328, 331, 592, 598, 856, 1139], "to_seri": [80, 179, 295, 632, 673, 721, 1173], "xy": [80, 82], "yz": [80, 82], "b1": [80, 82], "b2": [80, 82], "pow_n": 81, "powersofn": 81, "next": [81, 184, 204, 231, 266, 295, 327, 388, 392, 406, 552, 561, 564, 565, 566, 567, 568, 570, 571, 572, 689, 690, 692, 693, 732, 733, 745, 782, 791, 809, 853, 949, 953, 967, 1088, 1219], "ceil": [81, 745, 1219], "previou": [81, 151, 530, 531, 542, 547, 644, 646, 745, 1082, 1219], "floor": [81, 745, 1219], "nearest": [81, 204, 224, 287, 295, 338, 426, 440, 550, 568, 719, 745, 791, 806, 847, 853, 894, 987, 997, 1087, 1103, 1219], "24": [81, 168, 184, 204, 207, 231, 266, 295, 349, 356, 369, 388, 389, 392, 400, 406, 408, 526, 561, 564, 565, 566, 567, 568, 570, 571, 572, 689, 690, 692, 693, 694, 732, 733, 745, 782, 791, 809, 853, 912, 949, 953, 961, 967, 1020, 1219], "001": [81, 377, 401, 402, 404, 641, 694, 962, 963, 965, 1182], "next_pow2": 81, "prev_pow2": 81, "nearest_pow2": 81, "split_by_column_dtyp": 82, "collect_al": [82, 86, 766, 767, 853], "31": [83, 145, 365, 369, 373, 381, 384, 388, 399, 632, 688, 691, 700, 707, 856, 920, 922, 926, 945, 960, 1173, 1227], "42": [83, 189, 214, 231, 295, 561, 745, 801, 809, 853, 992, 1219], "961": 83, "1764": 83, "4160": 83, "build": [84, 105, 856, 1227], "wa": [84, 138, 556, 617, 745, 1092, 1158, 1219], "compil": [84, 464, 465, 1027, 1028], "gate": 84, "info": [84, 119, 130, 131, 137], "host": [84, 115, 121, 123, 132, 134], "git": 84, "lazy_fram": [85, 86], "iter": [85, 86, 87, 104, 117, 146, 148, 156, 173, 183, 184, 185, 186, 187, 188, 200, 201, 202, 231, 232, 233, 234, 237, 238, 239, 245, 260, 261, 270, 271, 273, 274, 295, 356, 541, 588, 664, 666, 672, 674, 675, 676, 683, 687, 712, 716, 724, 727, 729, 735, 741, 745, 761, 778, 781, 782, 783, 784, 785, 786, 809, 811, 812, 814, 819, 824, 830, 831, 834, 853, 912, 1219, 1227], "comm_subplan_elim": [85, 86, 766, 767, 773, 775, 805, 817, 853], "comm_subexpr_elim": [85, 86, 766, 767, 773, 775, 805, 817, 853], "graph": [85, 205, 295, 766, 788, 832, 853], "parallel": [85, 87, 113, 118, 127, 134, 184, 187, 204, 205, 221, 238, 271, 295, 356, 472, 659, 735, 745, 757, 782, 785, 790, 791, 812, 831, 841, 853, 912, 1035, 1207, 1219], "threadpool": [85, 149], "Will": [85, 86, 766, 767, 773, 775, 805, 817, 853, 1219], "try": [85, 86, 99, 101, 115, 116, 121, 127, 129, 132, 134, 766, 767, 773, 775, 805, 817, 853], "branch": [85, 86, 766, 767, 773, 775, 805, 817, 853], "subplan": [85, 86, 766, 767, 773, 775, 805, 817, 853], "union": [85, 86, 87, 490, 766, 767, 773, 775, 805, 817, 853, 856, 1053], "subexpress": [85, 86, 766, 767, 773, 775, 805, 817, 853], "reus": [85, 86, 766, 767, 773, 775, 805, 817, 853], "part": [85, 86, 104, 120, 145, 601, 623, 624, 767, 773, 775, 805, 817, 832, 853, 1142, 1164, 1165], "fashion": [85, 86, 203, 295, 767, 773, 775, 805, 817, 853], "alpha": [85, 86, 309, 414, 415, 416, 745, 766, 767, 773, 775, 805, 817, 853, 976, 977, 978, 1219], "gevent": [86, 137, 767, 853], "_geventdataframeresult": [86, 767, 853], "await": [86, 767, 853], "asynchron": [86, 767, 853], "them": [86, 104, 106, 107, 108, 110, 124, 125, 126, 127, 129, 133, 134, 169, 170, 184, 204, 214, 231, 266, 295, 441, 478, 534, 535, 541, 561, 675, 689, 690, 692, 693, 732, 733, 745, 767, 774, 782, 791, 801, 809, 853, 856, 981, 1041, 1077, 1078, 1219], "schedul": [86, 767, 853], "insid": [86, 767, 853], "almost": [86, 207, 281, 295, 632, 633, 634, 767, 853, 1068, 1173, 1174, 1175, 1219], "instantli": [86, 767, 853], "asyncio": [86, 767, 853], "releas": [86, 309, 509, 745, 767, 853, 1227], "greenlet": [86, 767, 853], "task": [86, 767, 853], "wrapper": [86, 767, 853], "event": [86, 767, 853], "asyncresult": [86, 767, 853], "timeout": [86, 767, 853], "break": [86, 135, 264, 265, 295, 309, 356, 357, 392, 437, 564, 565, 566, 567, 568, 570, 571, 572, 745, 767, 827, 853, 892, 912, 913, 953, 994, 1086, 1219], "collect_async": [86, 853], "set_except": [86, 767, 853], "futur": [86, 153, 162, 208, 210, 215, 247, 295, 689, 767, 853, 1209, 1219], "rerais": [86, 767, 853], "polarstyp": 87, "concatmethod": 87, "vertic": [87, 170, 208, 210, 215, 247, 264, 268, 295, 591, 1132], "rechunk": [87, 104, 109, 115, 116, 121, 123, 127, 129, 132, 133, 134, 170, 295, 745, 895, 981, 1074, 1219], "combin": [87, 99, 101, 173, 184, 189, 204, 231, 266, 295, 306, 320, 406, 540, 556, 561, 610, 620, 626, 627, 628, 629, 689, 690, 692, 693, 732, 733, 735, 745, 782, 791, 809, 817, 853, 953, 967, 1092, 1151, 1161, 1167, 1168, 1169, 1170, 1219], "vertical_relax": 87, "diagon": [87, 261, 295], "diagonal_relax": 87, "vstack": [87, 170, 295], "addition": [87, 232, 295], "coerc": [87, 555, 745], "supertyp": [87, 172, 295, 308, 745, 777, 853], "mismatch": [87, 99, 125, 138, 140], "find": [87, 174, 180, 295, 576, 593, 745, 1112, 1134, 1219], "miss": [87, 115, 116, 129, 171, 295, 327, 414, 415, 416, 428, 450, 452, 498, 745, 776, 853, 976, 977, 978, 1209, 1219], "stack": [87, 192, 268, 295], "don": [87, 184, 207, 262, 264, 295, 309, 356, 472, 509, 541, 745, 782, 825, 853, 856, 912, 974, 1035, 1068, 1113, 1209, 1219], "auto": [87, 104, 106, 107, 108, 110, 124, 125, 127, 133, 134, 261, 295, 406, 853, 953, 967, 1227], "logic": [87, 207, 281, 295, 305, 307, 509, 653, 663, 665, 710, 745, 769, 790, 813, 841, 853, 860, 861, 1068, 1202, 1219], "align_fram": 87, "pattern": [87, 115, 116, 129, 132, 133, 134, 201, 295, 515, 592, 593, 594, 595, 600, 601, 602, 615, 616, 617, 841, 856, 1111, 1114, 1133, 1134, 1135, 1136, 1141, 1142, 1143, 1156, 1157, 1158, 1219], "collis": 87, "need": [87, 111, 115, 116, 118, 184, 185, 187, 188, 231, 234, 243, 256, 295, 498, 561, 580, 635, 694, 718, 721, 736, 745, 782, 783, 785, 786, 809, 853, 1120, 1176, 1219, 1227], "sure": [87, 104, 109, 115, 116, 121, 123, 127, 184, 185, 187, 188, 225, 231, 295, 561, 745, 782, 783, 785, 786, 809, 853], "contigu": [87, 104, 109, 115, 116, 121, 123, 127, 129, 132, 133, 134, 225, 295], "relev": 87, "df_h1": 87, "l1": 87, "l2": 87, "df_h2": 87, "r1": 87, "r2": 87, "r3": 87, "df_d1": 87, "df_d2": 87, "df_a1": 87, "df_a2": 87, "df_a3": 87, "enable_string_cach": 88, "stringcach": [88, 89, 203, 295, 757, 889, 891], "reliabl": [88, 89], "wai": [88, 89, 104, 106, 107, 108, 110, 124, 125, 133, 183, 202, 221, 245, 274, 295, 541, 545, 588, 600, 741, 745, 781, 804, 819, 834, 841, 853, 1141], "until": [88, 205, 295, 612, 613, 641, 1153, 1154, 1182], "deprec": [89, 90, 154, 174, 177, 184, 185, 186, 187, 188, 193, 208, 210, 215, 228, 242, 247, 250, 276, 295, 309, 340, 341, 351, 352, 353, 354, 355, 370, 374, 378, 380, 382, 387, 391, 394, 406, 444, 448, 451, 456, 468, 481, 496, 505, 506, 508, 547, 562, 579, 594, 604, 608, 609, 610, 611, 614, 619, 620, 626, 632, 634, 646, 649, 650, 667, 686, 687, 689, 691, 708, 745, 782, 783, 784, 785, 786, 795, 816, 823, 836, 853, 863, 898, 899, 908, 909, 910, 911, 913, 927, 931, 938, 940, 943, 948, 952, 953, 955, 967, 999, 1003, 1005, 1008, 1009, 1015, 1017, 1019, 1031, 1044, 1059, 1067, 1086, 1097, 1113, 1115, 1119, 1135, 1145, 1149, 1150, 1151, 1152, 1155, 1160, 1161, 1167, 1173, 1175, 1191, 1192, 1209, 1219], "sinc": [89, 119, 130, 154, 156, 174, 177, 184, 185, 186, 187, 188, 193, 208, 210, 215, 228, 242, 247, 250, 260, 276, 295, 309, 340, 341, 351, 352, 353, 354, 355, 370, 372, 374, 378, 380, 382, 387, 391, 394, 406, 444, 448, 451, 456, 468, 481, 496, 505, 506, 508, 547, 562, 579, 594, 604, 608, 609, 610, 611, 614, 619, 620, 626, 632, 634, 646, 649, 650, 667, 686, 687, 689, 691, 700, 708, 745, 761, 782, 783, 784, 785, 786, 795, 816, 819, 823, 824, 836, 853, 863, 898, 899, 908, 909, 910, 911, 913, 927, 929, 931, 938, 940, 943, 948, 952, 953, 955, 967, 999, 1003, 1005, 1008, 1009, 1015, 1017, 1019, 1031, 1044, 1059, 1067, 1086, 1097, 1113, 1115, 1119, 1135, 1145, 1149, 1150, 1151, 1152, 1155, 1160, 1161, 1167, 1173, 1175, 1191, 1192, 1209, 1219], "19": [89, 120, 137, 154, 174, 177, 184, 185, 186, 187, 188, 193, 204, 208, 210, 215, 228, 231, 242, 247, 250, 276, 295, 309, 340, 341, 351, 352, 353, 354, 355, 370, 374, 378, 380, 382, 387, 391, 392, 394, 406, 444, 448, 451, 456, 468, 481, 496, 505, 506, 508, 547, 561, 562, 565, 567, 579, 594, 604, 608, 609, 610, 611, 614, 619, 620, 626, 632, 634, 635, 646, 649, 650, 667, 686, 687, 689, 691, 708, 745, 782, 783, 784, 785, 786, 791, 795, 809, 816, 823, 836, 853, 863, 898, 899, 908, 909, 910, 911, 913, 927, 931, 938, 940, 943, 948, 952, 953, 955, 967, 999, 1003, 1005, 1008, 1009, 1015, 1017, 1019, 1031, 1044, 1059, 1067, 1086, 1097, 1113, 1115, 1119, 1135, 1145, 1149, 1150, 1151, 1152, 1155, 1160, 1161, 1167, 1173, 1175, 1176, 1191, 1192, 1209, 1219], "longer": [89, 115, 129], "accept": [89, 114, 115, 116, 119, 121, 123, 127, 156, 183, 186, 237, 238, 241, 245, 260, 270, 271, 274, 295, 302, 339, 417, 441, 508, 541, 556, 588, 662, 664, 666, 672, 674, 675, 676, 683, 687, 696, 712, 716, 724, 727, 729, 735, 745, 761, 781, 784, 811, 812, 815, 819, 824, 830, 831, 834, 853, 897, 998, 1092, 1118, 1219], "disable_string_cach": 89, "finish": [92, 170, 295, 981, 1219], "least": [96, 145, 542, 745, 1082, 1219], "unexpect": [97, 295, 507, 509, 745, 1068, 1219], "caus": [97, 105, 115, 116, 129, 138, 153, 170, 295, 981, 1219], "panic": 97, "incompat": 101, "arrai": [104, 108, 115, 116, 127, 168, 251, 256, 257, 295, 322, 323, 324, 325, 326, 340, 341, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 466, 482, 483, 484, 485, 494, 497, 501, 564, 565, 567, 571, 577, 695, 745, 853, 875, 876, 877, 878, 879, 898, 899, 904, 905, 906, 907, 908, 909, 910, 911, 916, 975, 1029, 1045, 1046, 1047, 1048, 1056, 1057, 1060, 1064, 1065, 1099, 1100, 1102, 1105, 1106, 1107, 1116, 1121, 1195, 1200, 1201, 1209, 1219], "chunkedarrai": [104, 217, 295], "recordbatch": [104, 202, 295], "schemadefinit": [104, 106, 107, 108, 110, 124, 125, 133, 295, 853], "schema_overrid": [104, 106, 107, 108, 109, 110, 117, 118, 120, 124, 125, 126, 202, 256, 295, 853, 856, 879], "copi": [104, 105, 153, 158, 159, 202, 251, 257, 270, 295, 420, 745, 764, 765, 830, 853, 896, 900, 982, 1195, 1200, 1201, 1219], "closest": 104, "pair": [104, 106, 107, 108, 110, 124, 125, 133, 144, 226, 295, 807, 853, 1227], "sever": [104, 106, 107, 108, 110, 124, 125, 133, 295, 853, 1227], "form": [104, 106, 107, 108, 110, 124, 125, 133, 201, 233, 264, 295, 542, 745, 853, 1082, 1219], "dimens": [104, 106, 108, 110, 124, 125, 133, 295, 557, 745, 853, 1093, 1219], "supportsinterchang": 105, "allow_copi": [105, 153], "interchang": [105, 153], "__dataframe__": 105, "convers": [105, 120, 153, 201, 202, 233, 234, 253, 256, 257, 295, 632, 633, 634, 638, 757, 991, 1173, 1174, 1175, 1179, 1199, 1200, 1201, 1219], "detail": [105, 117, 118, 138, 140, 153, 295, 853, 1227], "latest": [105, 119, 130, 153, 391, 392, 406, 428, 518, 632, 634, 691, 745, 952, 953, 967, 1173, 1175], "from_panda": 105, "from_arrow": 105, "effici": [105, 117, 120, 200, 202, 295], "reli": 105, "becaus": [105, 125, 168, 184, 187, 205, 207, 264, 281, 295, 472, 782, 785, 841, 853, 863, 975, 1035, 1068, 1219], "convert": [105, 109, 119, 120, 126, 130, 153, 252, 253, 254, 255, 256, 259, 295, 325, 358, 366, 395, 398, 497, 498, 506, 529, 551, 602, 614, 632, 633, 634, 635, 636, 638, 643, 745, 853, 878, 891, 923, 956, 959, 1060, 1061, 1143, 1155, 1173, 1174, 1175, 1176, 1177, 1179, 1188, 1198, 1199, 1200, 1201, 1209, 1219], "panda": [105, 109, 137, 184, 257, 295, 384, 385, 653, 745, 782, 853, 945, 946, 1201, 1202, 1219], "pd": [105, 109, 653, 745, 1201, 1202, 1219], "df_pd": 105, "dfi": [105, 153], "clone": [106, 107, 108, 109, 110, 158, 256, 257, 295, 764, 853, 896, 1199, 1200, 1201, 1209, 1219], "dimension": [106, 108, 110, 256, 295, 853, 1219], "infer_schema_length": [107, 110, 115, 116, 120, 124, 129, 133, 295, 603, 604, 853, 1144, 1145], "NOT": [107, 200, 295, 498, 516, 1226], "typic": [107, 117, 134, 207, 295, 371, 856, 928, 1068, 1219], "clearer": 107, "partial": [107, 115, 129, 295, 853], "mani": [107, 110, 117, 118, 170, 295, 603, 604, 617, 981, 1144, 1145, 1158, 1219], "scan": [107, 110, 115, 116, 129, 130, 131, 132, 133, 134, 135, 184, 185, 187, 188, 231, 295, 561, 745, 775, 782, 783, 785, 786, 787, 794, 809, 853], "slow": [107, 110, 115, 116, 129, 309, 356, 509, 563, 745, 841, 912, 1098, 1219], "present": [107, 145, 446, 508, 628, 629, 745, 775, 853, 1067, 1209, 1219], "np": [108, 173, 256, 295, 430, 649, 745, 778, 853, 988, 1002, 1007, 1011, 1012, 1191, 1219], "ndarrai": [108, 173, 256, 295, 430, 649, 745, 778, 853, 988, 1111, 1112, 1115, 1191, 1200, 1219], "numpi": [108, 137, 161, 201, 233, 234, 253, 256, 257, 295, 534, 535, 563, 745, 853, 1002, 1007, 1011, 1012, 1077, 1078, 1098, 1200, 1201, 1209, 1219], "columnar": [108, 110, 201, 233, 295], "interpret": [108, 110, 115, 116, 129, 295, 853], "yield": [108, 110, 115, 116, 117, 129, 168, 170, 261, 295, 541, 745, 853, 975, 981, 1219], "conclus": [108, 110, 295, 853], "nan_to_nul": [109, 295, 853, 1219], "include_index": 109, "instal": [109, 115, 116, 118, 121, 123, 161, 256, 257, 295, 817, 853, 1201, 1219], "nan": [109, 145, 153, 171, 257, 295, 361, 362, 412, 413, 421, 432, 434, 440, 450, 452, 453, 454, 459, 504, 510, 523, 534, 535, 536, 537, 563, 655, 677, 745, 776, 853, 865, 869, 917, 918, 983, 1011, 1012, 1077, 1078, 1098, 1200, 1201, 1219, 1227], "pd_df": 109, "pd_seri": 109, "tbl": [111, 113, 116], "reconstruct": 111, "repr": [111, 145, 147], "trim": 111, "whitespac": [111, 610, 620, 626, 627, 628, 629, 1151, 1161, 1167, 1168, 1169, 1170], "prompt": 111, "extract": [111, 367, 369, 370, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 386, 387, 389, 390, 393, 394, 396, 399, 400, 401, 402, 403, 404, 405, 407, 408, 410, 545, 601, 602, 603, 604, 605, 623, 745, 924, 925, 926, 927, 930, 931, 933, 937, 938, 939, 940, 942, 943, 944, 947, 948, 950, 951, 954, 955, 957, 960, 961, 962, 963, 964, 965, 966, 968, 969, 971, 1142, 1143, 1144, 1145, 1146], "to_init_repr": [111, 295, 1219], "truncat": [111, 115, 129, 182, 184, 187, 201, 233, 234, 253, 295, 782, 785, 805, 853], "identifi": [111, 213, 220, 262, 295, 800, 825, 853], "compound": [111, 234, 295, 856], "neither": [111, 120, 126, 235, 295, 498, 1061], "source_ac": 111, "source_cha": 111, "ident": [111, 158, 159, 295, 395, 559, 560, 745, 764, 765, 853, 896, 900, 956, 1095, 1096, 1219], "timestamp": [111, 184, 187, 295, 391, 392, 406, 700, 782, 785, 853, 952, 953, 967], "tor_id": 111, "nnel_id": 111, "\u03bc": [111, 145, 184, 201, 204, 231, 233, 234, 253, 266, 295, 363, 364, 365, 366, 371, 373, 377, 381, 384, 385, 388, 391, 392, 393, 395, 398, 399, 400, 401, 402, 403, 404, 405, 406, 409, 561, 564, 565, 567, 570, 571, 572, 632, 634, 692, 694, 700, 745, 782, 791, 809, 853, 856, 920, 921, 922, 923, 924, 925, 928, 929, 930, 936, 937, 942, 945, 946, 947, 949, 952, 953, 957, 958, 960, 961, 962, 963, 964, 965, 966, 967, 970, 1173, 1175], "asia": [111, 856, 924, 925, 957], "tokyo": [111, 856], "123456780": 111, "9876543210": 111, "56": [111, 651, 745], "59": [111, 144, 365, 373, 381, 393, 691, 731, 732, 733, 856, 922, 942, 954], "663053": 111, "jst": [111, 856], "803065983": 111, "2055938745": 111, "38": [111, 145], "18": [111, 214, 231, 295, 350, 392, 406, 409, 440, 456, 528, 561, 745, 801, 805, 809, 853, 856, 970, 1175], "050545": 111, "source_actor_id": 111, "source_channel_id": 111, "to_list": [111, 231, 295, 1133, 1219], "datatypeclass": 112, "uint32": [112, 137, 157, 168, 295, 319, 345, 430, 433, 460, 464, 465, 480, 555, 594, 595, 606, 607, 649, 653, 678, 745, 763, 853, 856, 873, 886, 974, 975, 1008, 1027, 1028, 1043, 1113, 1135, 1136, 1147, 1148, 1202, 1219], "regular": [112, 201, 232, 233, 266, 295, 417, 592, 594, 595, 600, 601, 602, 615, 616, 696, 745, 856, 1133, 1135, 1136, 1141, 1142, 1143, 1156, 1157], "uint64": [112, 189, 295, 435, 464, 465, 554, 745, 992, 1027, 1028, 1090, 1219], "bigidx": 112, "read": [113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 170, 295, 429, 507, 735, 745, 769, 775, 853, 981, 1219], "over": [113, 115, 116, 117, 119, 129, 145, 154, 170, 200, 201, 202, 207, 232, 233, 234, 261, 273, 276, 281, 295, 309, 356, 422, 506, 507, 509, 517, 519, 520, 521, 529, 552, 564, 565, 566, 567, 568, 570, 571, 572, 667, 680, 681, 684, 685, 698, 708, 709, 710, 720, 745, 836, 841, 856, 863, 912, 981, 1068, 1099, 1100, 1102, 1106, 1219], "fetch": [113, 129, 205, 295, 764, 766, 787, 794, 853], "ideal": 113, "read_csv_batch": [113, 758], "tpch": [113, 116], "tables_scale_100": [113, 116], "lineitem": [113, 116, 118], "try_parse_d": [113, 115, 116, 129], "n_row": [114, 115, 116, 121, 123, 127, 129, 132, 133, 134, 202, 295, 775, 853], "handler": [114, 115, 116, 120, 121, 122, 123, 124, 125, 126, 128, 769, 853], "builtin": [114, 115, 116, 120, 121, 122, 123, 124, 125, 126, 128, 769, 853], "stop": [114, 115, 116, 121, 123, 127, 129, 132, 133, 134, 564, 565, 567, 570, 571, 572, 745, 921, 923, 929, 930, 937, 939, 942, 947, 953, 958], "textio": 115, "has_head": [115, 116, 120, 129], "new_column": [115, 116, 120, 129, 227, 228, 295], "comment_prefix": [115, 116, 129], "skip_row": [115, 116, 129], "missing_utf8_is_empty_str": [115, 116, 129], "ignore_error": [115, 116, 125, 129], "n_thread": [115, 116], "8192": 115, "csvencod": [115, 116, 129], "low_memori": [115, 116, 127, 129, 133, 134], "skip_rows_after_head": [115, 116, 129], "row_count_nam": [115, 116, 121, 123, 127, 129, 132, 133, 134], "row_count_offset": [115, 116, 121, 123, 127, 129, 132, 133, 134], "sample_s": [115, 116], "eol_char": [115, 116, 129], "raise_if_empti": [115, 116, 120, 126, 129], "truncate_ragged_lin": [115, 129], "fsspec": [115, 116, 121, 123, 127, 130, 131, 132, 134, 137], "remot": [115, 116, 121, 123], "autogener": [115, 116, 129], "column_x": [115, 116, 129], "enumer": [115, 116, 129, 202, 295], "shorter": [115, 116, 129, 498], "comment": [115, 116, 129], "instanc": [115, 116, 127, 129, 134, 145, 147, 151, 157, 170, 176, 295, 334, 518, 564, 565, 566, 567, 568, 570, 571, 572, 680, 684, 698, 741, 745, 763, 796, 833, 853, 886, 981, 1219], "escap": [115, 116, 129], "complet": [115, 117, 129, 1200, 1219], "wherea": [115, 117, 129, 231, 295, 392, 406, 534, 535, 561, 745, 787, 794, 809, 853, 953, 967, 1077, 1078, 1219], "would": [115, 116, 129, 319, 476, 509, 517, 552, 672, 745, 872, 1039, 1088, 1200, 1219], "prefer": [115, 116, 119, 129, 148, 170, 201, 207, 232, 233, 281, 295, 417, 509, 745, 853, 981, 1068, 1219, 1227], "treat": [115, 116, 129, 592, 595, 615, 616, 735, 1133, 1136, 1156, 1157], "10000": [115, 202, 295], "might": [115, 116, 129, 149, 156, 256, 260, 295, 309, 509, 657, 745, 761, 819, 824, 853, 1201, 1219], "issu": [115, 116, 120, 129, 349, 350, 647, 745, 906, 907, 1189, 1219], "iso8601": [115, 116, 129], "succe": [115, 116, 129], "cpu": [115, 116], "system": [115, 116], "wrongli": 115, "done": [115, 116, 129, 135, 151, 155, 157, 204, 295, 308, 310, 334, 541, 668, 745, 760, 763, 791, 853, 886, 1219], "buffer": [115, 116, 117, 168, 201, 295, 975, 1219], "modifi": [115, 116, 129, 149, 151, 170, 192, 200, 201, 268, 295, 320, 391, 409, 592, 600, 601, 615, 745, 862, 952, 970, 981, 1133, 1141, 1142, 1156, 1178, 1180, 1181, 1219], "upper": [115, 116, 117, 168, 184, 187, 295, 339, 340, 437, 441, 498, 658, 669, 689, 690, 692, 693, 704, 705, 732, 733, 745, 782, 785, 853, 897, 898, 975, 994, 998, 1066, 1206, 1219], "bound": [115, 116, 168, 184, 187, 295, 339, 340, 341, 441, 475, 476, 496, 498, 503, 658, 669, 689, 690, 692, 693, 704, 705, 732, 733, 745, 782, 785, 853, 897, 898, 899, 975, 998, 1038, 1039, 1059, 1066, 1185, 1206, 1219], "lossi": [115, 116, 129], "decod": [115, 116, 603], "expens": [115, 116, 127, 129, 133, 134, 146, 148, 184, 185, 187, 188, 201, 207, 231, 232, 233, 234, 261, 262, 295, 309, 509, 561, 745, 782, 783, 785, 786, 809, 825, 853, 981, 1068, 1219, 1227], "aggreg": [115, 116, 127, 176, 183, 184, 186, 187, 208, 210, 212, 215, 218, 222, 223, 224, 231, 246, 247, 264, 267, 274, 275, 278, 280, 295, 303, 423, 438, 505, 507, 509, 541, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 663, 664, 665, 666, 680, 681, 682, 683, 684, 685, 686, 687, 698, 703, 711, 712, 715, 716, 720, 728, 729, 745, 782, 783, 785, 786, 796, 797, 798, 799, 802, 803, 806, 809, 820, 821, 828, 834, 835, 838, 840, 853, 995, 1097, 1098, 1099, 1100, 1102, 1105, 1106, 1107, 1219], "parser": 115, "regard": [115, 677], "sens": [115, 121, 123, 132, 214, 266, 295, 541, 745, 801, 853], "particular": [115, 121, 123, 132, 168, 295, 975, 1219], "usernam": [115, 118, 121, 123, 132], "password": [115, 118, 121, 123, 132], "skip": [115, 116, 120, 127, 129, 134, 264, 295, 863, 1068, 1219], "offset": [115, 116, 120, 121, 123, 127, 129, 132, 133, 134, 184, 185, 187, 188, 231, 244, 266, 272, 295, 363, 371, 384, 385, 388, 392, 406, 492, 561, 586, 621, 745, 782, 783, 785, 786, 809, 818, 833, 853, 920, 928, 945, 946, 949, 953, 967, 1055, 1127, 1162, 1175, 1219], "row_count": [115, 116, 121, 123, 127, 129, 132, 133, 134], "sampl": [115, 116, 281, 295, 585, 745, 841, 1126, 1219], "estim": [115, 116, 155, 168, 295, 310, 415, 416, 457, 668, 745, 760, 853, 975, 977, 978, 1021, 1219], "alloc": [115, 116, 168, 225, 295, 745, 975, 1219], "encount": [115, 116, 129, 184, 187, 295, 534, 535, 603, 605, 677, 680, 698, 745, 782, 785, 853, 1077, 1078, 1144, 1146, 1219], "window": [115, 116, 129, 184, 185, 187, 188, 231, 295, 356, 392, 406, 414, 415, 416, 507, 509, 541, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 675, 722, 723, 745, 782, 783, 785, 786, 809, 853, 912, 953, 967, 976, 977, 978, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1219], "rn": [115, 116, 129], "go": [115, 116, 129, 256, 295, 598, 1139], "nodataerror": [115, 116, 120, 126, 129, 757], "lazili": [115, 116, 129, 130, 131, 132, 133, 134, 767, 853], "glob": [115, 116, 129, 132, 133, 134], "continu": [115, 127, 357, 549, 585, 745, 913, 1086, 1126, 1219], "benchmark": [115, 127], "50000": 116, "batchedcsvread": [116, 757], "upon": 116, "creation": 116, "gather": [116, 178, 250, 295, 431, 496, 649, 650, 745, 780, 823, 853, 989, 1059, 1191, 1192, 1219], "next_batch": 116, "big": 116, "interest": 116, "seen_group": 116, "big_fil": 116, "df_current_batch": 116, "partition_df": 116, "partition_bi": [116, 202, 295], "as_dict": [116, 220, 295], "fh": 116, "write_csv": [116, 129, 295], "els": [116, 735], "connectionorcursor": 117, "iter_batch": 117, "cursor": 117, "client": 117, "odbc": 117, "establish": 117, "resultset": 117, "manner": 117, "veri": [117, 201, 261, 295, 509, 745, 841], "poor": 117, "trip": 117, "still": [117, 118], "intern": [117, 136, 201, 295], "exact": [117, 143, 145, 147, 243, 295, 630, 631, 632, 633, 634, 655, 745, 1173, 1174, 1175], "incom": 117, "execute_opt": 117, "read_arrow_batches_from_odbc": 117, "read_database_uri": 117, "wide": [117, 182, 213, 264, 295, 800, 853], "snowflak": [117, 118], "variou": [117, 295, 745, 853, 856, 1219], "facil": 117, "initialis": [117, 151, 853, 1226], "flight": 117, "flightsql": 117, "flight_sql": 117, "about": [117, 585, 592, 600, 601, 615, 745, 1126, 1133, 1141, 1142, 1156, 1219, 1227], "notabl": 117, "dremio": 117, "influxdb": 117, "notic": [117, 295, 853, 1219], "dbapi2": 117, "connectorx": [117, 118, 137], "optimis": [117, 207, 234, 281, 295, 853, 1068, 1114, 1219, 1227], "translat": 117, "conn": 117, "url": [117, 127, 134, 600, 602, 1141, 1143], "test_data": 117, "user_conn": 117, "normalised_scor": 117, "uint8": [117, 142, 144, 157, 255, 256, 264, 295, 349, 350, 556, 647, 662, 745, 763, 853, 856, 906, 907, 1092, 1189, 1219, 1227], "parameteris": 117, "metric": 117, "alchemy_conn": 117, "qmark": 117, "variad": 117, "1000": [117, 120, 168, 255, 295, 377, 401, 962, 1198, 1219, 1227], "localhost": 117, "5432": 117, "uid": 117, "usr": 117, "pwd": 117, "max_text_s": 117, "max_binary_s": 117, "do_someth": 117, "partition_on": 118, "partition_rang": 118, "partition_num": 118, "dbreadengin": 118, "raw": 118, "warehous": 118, "role": 118, "transfer": 118, "document": [118, 120, 395, 398, 605, 632, 633, 634, 638, 741, 891, 956, 959, 1146, 1173, 1174, 1175, 1179], "redshift": 118, "mysql": 118, "mariadb": 118, "clickhous": 118, "oracl": 118, "bigqueri": 118, "pleas": [118, 184, 295, 689, 694, 782, 853], "github": 118, "sfu": 118, "connector": 118, "destin": 118, "develop": [118, 145, 147], "read_databas": 118, "explicitli": [118, 143, 145, 151, 727, 756], "test_tabl": 118, "compani": 118, "testdb": 118, "public": [118, 295, 745, 757, 853, 1219], "myrol": 118, "delta_table_opt": [119, 130], "root": [119, 130, 337, 456, 506, 519, 528, 529, 530, 531, 532, 533, 547, 589, 646, 744, 745, 893, 1129, 1219], "absolut": [119, 130, 131, 138, 139, 140, 141, 301, 414, 415, 416, 745, 858, 976, 977, 978, 1219], "avoid": [119, 233, 295, 304, 745], "year": [119, 130, 184, 204, 231, 266, 295, 375, 376, 388, 389, 392, 406, 407, 561, 564, 565, 566, 567, 568, 570, 571, 572, 688, 689, 690, 691, 692, 693, 732, 733, 745, 782, 791, 809, 853, 932, 933, 949, 950, 953, 967, 968], "2021": [119, 130, 157, 162, 182, 184, 266, 295, 632, 707, 763, 782, 853, 856, 924, 925, 933, 957, 1017, 1173, 1219], "aw": [119, 127, 130, 134], "googl": [119, 130, 131], "service_account": [119, 130], "service_account_json_absolute_path": [119, 130], "az": [119, 130, 131], "adl": [119, 130, 131], "abf": [119, 130, 131], "azure_storage_account_nam": [119, 130, 131], "azure_storage_account_kei": [119, 130, 131], "without_fil": [119, 130, 131], "track": [119, 130, 131, 207, 295, 498, 1226], "sheet_id": [120, 126], "sheet_nam": [120, 126], "xlsx2csv": [120, 137], "openpyxl": [120, 137], "pyxlsb": [120, 137], "xlsx2csv_option": 120, "read_csv_opt": 120, "noreturn": [120, 126], "spreadsheet": [120, 126, 222, 295, 757], "xlsb": 120, "sheetnam": [120, 126], "nor": [120, 126, 235, 295], "fastest": 120, "read_csv": [120, 129], "refin": 120, "significantli": [120, 207, 281, 295, 1068, 1219, 1227], "potenti": [120, 129, 132, 133, 201, 232, 234, 295, 528], "unabl": 120, "julian": 120, "skip_empty_lin": 120, "influenc": [120, 775, 796, 853], "pipelin": 120, "correct": [120, 126, 415, 416, 457, 565, 566, 567, 568, 569, 570, 572, 585, 745, 795, 796, 853, 977, 978, 1021, 1104, 1126, 1219], "known": [120, 145, 498, 564, 565, 566, 567, 568, 570, 571, 572, 745, 836, 841, 1061], "better": [120, 207, 256, 281, 295, 509, 607, 745, 841, 1111, 1114, 1148, 1219], "detect": 120, "memory_map": [121, 127, 132], "greatli": [121, 132], "repeat": [121, 132, 553, 555, 718, 736, 745], "give": [121, 123, 127, 132, 133, 213, 262, 295, 372, 457, 555, 655, 745, 757, 800, 825, 853, 929, 1021, 1219], "That": [121, 795, 796, 853], "filenam": 121, "my_fil": 121, "write_ipc": [121, 295], "read_ndjson": 124, "openoffic": 126, "od": 126, "parallelstrategi": [127, 134], "use_statist": [127, 134], "hive_partit": [127, 134], "retri": [127, 134], "row_group": [127, 134], "hive": [127, 134], "prune": [127, 134, 796, 853], "gcp": [127, 131, 134], "stabl": [127, 156, 161, 162, 189, 235, 260, 295, 435, 502, 745, 761, 800, 819, 824, 853, 992, 1219], "read_tabl": 127, "scan_parquet": [127, 135], "scan_pyarrow_dataset": [127, 134], "contribut": [127, 566, 568, 570, 572, 745], "with_column_nam": 129, "push": [129, 132, 133, 134, 135], "down": [129, 132, 133, 134, 135, 426, 745, 987, 1219], "therebi": [129, 132, 133], "realloc": [129, 132, 133, 170, 295, 981, 1219], "headerless": 129, "my_long_fil": 129, "thing": [129, 136], "less": [129, 204, 295, 459, 504, 624, 745, 791, 853, 1165, 1227], "breezah": 129, "languag": [129, 184, 204, 231, 266, 295, 388, 392, 406, 561, 564, 565, 566, 567, 568, 570, 571, 572, 689, 690, 692, 693, 732, 733, 745, 782, 791, 809, 853, 949, 953, 967], "hard": [129, 795, 796, 853], "mydf": 129, "lambda": [129, 154, 176, 207, 221, 222, 281, 295, 309, 414, 415, 416, 498, 505, 506, 507, 509, 529, 680, 681, 698, 709, 710, 720, 745, 795, 796, 804, 841, 853, 863, 976, 977, 978, 1061, 1068, 1219], "lower": [129, 184, 187, 224, 287, 295, 339, 341, 441, 503, 506, 529, 550, 554, 568, 669, 689, 690, 692, 693, 704, 705, 719, 732, 733, 745, 782, 785, 806, 847, 853, 897, 899, 998, 1066, 1087, 1090, 1103, 1206, 1219], "simpli": [129, 541, 680, 698, 745], "idx": [129, 184, 202, 295, 498, 782, 853, 1061], "uint16": [129, 349, 350, 647, 745, 856, 906, 907, 1189, 1219], "u16": [129, 145, 1227], "eu": [130, 131], "central": [130, 131, 457, 585, 745, 1021, 1126, 1219], "iceberg": [131, 757], "pyiceberg": [131, 137], "metadata": [131, 184, 185, 187, 188, 231, 295, 561, 745, 782, 783, 785, 786, 809, 853], "secret": [131, 134], "adlf": 131, "my": [131, 135, 639, 1180], "oauth": 131, "token": 131, "ya29": 131, "dr": 131, "afm": 131, "py": 131, "impl": 131, "fsspecfileio": 131, "read_parquet": 134, "east": 134, "allow_pyarrow_filt": 135, "comparison": 135, "dset": 135, "folder": 135, "04": [135, 157, 184, 266, 295, 365, 366, 384, 385, 391, 392, 395, 398, 399, 400, 403, 405, 409, 632, 692, 694, 763, 782, 853, 856, 923, 937, 942, 945, 946, 947, 952, 956, 959, 960, 961, 964, 966, 970, 1173], "seed": [136, 189, 235, 295, 435, 486, 552, 575, 581, 745, 992, 1049, 1088, 1110, 1122, 1219], "shuffl": [136, 235, 281, 295, 486, 575, 745, 841, 1049, 1110, 1219], "stdout": [137, 151, 182, 295, 520], "platform": 137, "maco": 137, "14": [137, 145, 174, 193, 207, 208, 210, 215, 228, 247, 250, 278, 280, 282, 283, 284, 285, 286, 287, 288, 295, 351, 352, 353, 354, 355, 363, 440, 496, 552, 614, 649, 650, 686, 687, 732, 745, 838, 840, 842, 843, 844, 845, 846, 847, 848, 856, 908, 909, 910, 911, 920, 953, 999, 1019, 1059, 1115, 1155, 1191, 1192, 1209, 1219], "arm64": 137, "arm": 137, "64bit": [137, 554, 745, 1090, 1219], "main": [137, 767, 853], "oct": 137, "13": [137, 145, 158, 159, 171, 172, 181, 194, 205, 217, 231, 270, 278, 280, 282, 283, 284, 285, 286, 287, 288, 295, 304, 370, 374, 378, 380, 382, 387, 394, 517, 519, 561, 635, 675, 680, 683, 698, 729, 734, 745, 764, 765, 776, 777, 793, 809, 830, 838, 840, 842, 843, 844, 845, 846, 847, 848, 853, 927, 931, 938, 940, 943, 948, 953, 955, 967, 968, 1005, 1008, 1015, 1017, 1068, 1176, 1219], "54": [137, 418, 745, 1227], "clang": 137, "1500": [137, 146], "adbc_driver_manag": 137, "cloudpickl": 137, "matplotlib": [137, 805, 817, 853], "26": [137, 371, 407, 928], "pydant": 137, "check_row_ord": [138, 139], "check_column_ord": [138, 139], "check_dtyp": [138, 139, 140, 141], "check_exact": [138, 139, 140, 141], "rtol": [138, 139, 140, 141], "atol": [138, 139, 140, 141], "08": [138, 139, 140, 141, 145, 231, 295, 365, 392, 561, 632, 692, 694, 745, 809, 853, 856, 953, 967, 1173], "categorical_as_str": [138, 139, 140, 141], "assert": [138, 139, 140, 141, 143, 145, 147, 231, 295, 757, 856], "assertionerror": [138, 139, 140, 141], "compar": [138, 139, 140, 141, 167, 177, 295, 412, 413, 432, 434, 459, 504, 536, 537, 745, 891, 974, 1113, 1219], "unsort": [138, 139], "exactli": [138, 139, 140, 141, 144, 145, 147, 623, 624, 630, 631, 694, 1121, 1164, 1165, 1171, 1172, 1219], "toler": [138, 139, 140, 141, 204, 295, 791, 853], "inexact": [138, 139, 140, 141], "share": [138, 139, 140, 141, 168, 295, 745, 975, 1219], "assert_series_equ": [138, 141, 974, 1219, 1227], "assert_frame_not_equ": [138, 141], "pytest": [138, 140], "worthwhil": [138, 140], "shorten": [138, 140], "traceback": [138, 139, 140, 141], "tb": [138, 140, 168, 295, 975, 1219], "short": [138, 140], "tend": [138, 140], "unhelpfulli": [138, 140], "assert_frame_equ": [139, 140, 167, 295, 1227], "assert_series_not_equ": [139, 140], "check_nam": [140, 141], "searchstrategi": [142, 144, 145, 147], "null_prob": [142, 145, 147], "percentag": [142, 145, 147, 542, 745, 1082, 1219], "chanc": [142, 145, 147, 1227], "independ": [142, 143, 145, 147], "flag": [142, 295, 577, 592, 600, 601, 615, 745, 773, 795, 796, 853, 1116, 1133, 1141, 1142, 1156, 1219], "hypothesi": [142, 143, 144, 145, 146, 147, 1227], "sampled_from": [142, 1227], "unique_small_int": 142, "ccy": [142, 1227], "gbp": [142, 1227], "eur": [142, 162, 182, 295, 1227], "jpy": [142, 1227], "min_col": [143, 145], "max_col": [143, 145], "standalon": [143, 145, 856], "mincol": 143, "assign": [143, 184, 295, 498, 541, 552, 623, 624, 745, 782, 853, 1061, 1088, 1164, 1165, 1219], "minimum": [143, 144, 145, 147, 176, 215, 216, 295, 414, 415, 416, 523, 535, 544, 552, 715, 716, 745, 802, 853, 941, 976, 977, 978, 1078, 1084, 1088, 1219, 1227], "especi": [143, 560, 745, 775, 853, 1096, 1219], "test_unique_xyz": 143, "assert_someth": 143, "punctuat": 143, "test_special_char_colname_init": 143, "inner_dtyp": [144, 147], "select_from": [144, 147], "min_siz": [144, 145, 147, 1227], "max_siz": [144, 145, 147, 1227], "anoth": [144, 167, 177, 183, 295, 356, 364, 475, 496, 513, 516, 556, 745, 781, 832, 853, 912, 921, 974, 981, 1038, 1092, 1113, 1219], "randomli": 144, "innermost": 144, "2x": 144, "lst": 144, "11330": 144, "24030": 144, "116": 144, "zz": [144, 147], "uint8_pair": [144, 1227], "uint": [144, 1227], "zip": [144, 1227], "131": 144, "176": 144, "149": [144, 1227], "max_data_s": [145, 147], "include_col": 145, "allow_infin": [145, 147], "allowed_dtyp": [145, 147, 1227], "excluded_dtyp": [145, 147], "describ": [145, 182, 295, 1219], "desir": [145, 498, 1061], "n_chunk": [145, 147, 295, 862, 981, 1219], "randomis": 145, "onto": 145, "pct": 145, "preced": [145, 856], "disallow": [145, 147], "inf": [145, 147, 316, 357, 437, 443, 447, 549, 655, 745, 869, 903, 913, 994, 1002, 1007, 1066, 1082, 1086, 1206, 1219], "exclud": [145, 147, 184, 295, 347, 350, 441, 745, 782, 853, 998, 1017, 1219], "usag": [145, 147, 243, 295, 856, 1121, 1219], "deploi": [145, 147], "characterist": [145, 147], "concret": [145, 147], "test_repr": 145, "isinst": [145, 147, 295], "0x11f561580": 145, "0565": 145, "34715": 145, "5844": 145, "33": [145, 214, 295, 573, 745, 801, 853, 1103, 1219], "076854": 145, "3382": 145, "17": [145, 274, 563, 573, 700, 732, 745, 834, 901, 903, 953, 1098, 1219, 1227], "48662": 145, "7540": 145, "836271": 145, "4063": 145, "06": [145, 157, 266, 295, 365, 383, 390, 391, 392, 406, 407, 763, 853, 856, 952, 953, 967], "39092": 145, "1889": 145, "41": [145, 571, 745, 1227], "874455": 145, "15836": 145, "1755e": 145, "575050513": 145, "profil": [146, 148, 766, 853], "balanc": [146, 148, 1227], "set_environ": 146, "polars_hypothesis_profil": [146, 148], "constructor": 147, "normal": [147, 184, 295, 411, 457, 585, 745, 782, 853, 973, 1021, 1126, 1219], "test_repr_is_valid_str": 147, "experi": 147, "create_list_strategi": [147, 1227], "polars_max_thread": 149, "behind": 149, "lock": 149, "reason": [149, 498, 507, 745], "temporarili": [149, 151, 184, 185, 187, 188, 231, 295, 561, 745, 782, 783, 785, 786, 809, 853], "pyspark": 149, "udf": [149, 154, 207, 221, 276, 281, 295, 309, 509, 545, 667, 710, 745, 804, 836, 841, 853, 863, 1068, 1219], "recommend": [149, 201, 221, 295, 856], "easi": [151, 1227], "restor": 151, "restore_default": 151, "relat": [151, 856], "set_tbl_row": 151, "whatev": 151, "were": [151, 208, 210, 215, 247, 295, 556, 741, 745, 1092, 1219], "enter": 151, "advantag": [151, 221, 295], "set_": 151, "set_verbos": 151, "do_various_th": 151, "cleaner": 151, "breviti": 151, "vein": 151, "durat": [151, 204, 266, 295, 363, 370, 371, 374, 378, 380, 382, 387, 394, 399, 400, 401, 402, 403, 404, 405, 409, 653, 689, 690, 692, 693, 732, 733, 745, 791, 853, 856, 920, 927, 928, 931, 938, 940, 943, 948, 955, 960, 961, 962, 963, 964, 965, 966, 970, 1202, 1219], "set_ascii_t": 151, "write_ascii_frame_to_stdout": 151, "sy": 151, "nan_as_nul": 153, "polarsdatafram": 153, "notimplementederror": 153, "num_row": 153, "get_column": [153, 258, 295], "dtypekind": 153, "inference_s": [154, 207, 295], "256": [154, 207, 295, 1082, 1219], "map_row": [154, 295], "tri": [154, 207, 295], "approxim": [155, 295, 310, 668, 745, 760, 853, 1227], "hyperloglog": [155, 295, 310, 668, 745, 760, 853], "algorithm": [155, 295, 310, 593, 617, 668, 745, 760, 853, 1134, 1158], "cardin": [155, 295, 310, 668, 745, 760, 853], "k": [156, 234, 260, 295, 333, 457, 654, 745, 761, 824, 853, 885, 1021, 1203, 1219], "intoexpr": [156, 183, 184, 185, 186, 187, 188, 231, 237, 238, 241, 245, 260, 270, 271, 274, 295, 308, 328, 331, 332, 437, 441, 468, 469, 478, 487, 488, 489, 490, 541, 556, 576, 578, 579, 588, 593, 617, 622, 623, 624, 630, 631, 664, 666, 672, 674, 675, 676, 677, 679, 680, 683, 684, 687, 691, 698, 712, 716, 721, 724, 727, 729, 745, 761, 781, 782, 783, 784, 785, 786, 809, 811, 812, 815, 819, 824, 830, 831, 834, 853, 880, 883, 884, 998, 1041, 1092, 1118, 1163, 1164, 1165, 1171, 1172, 1219], "nulls_last": [156, 245, 260, 295, 319, 587, 745, 761, 819, 824, 853, 872, 1219], "smallest": [156, 260, 295, 333, 745, 761, 824, 853, 885, 1219], "largest": [156, 260, 295, 654, 745, 761, 824, 853, 1203, 1219], "wors": [156, 260, 295, 761, 819, 824, 853], "search": [156, 204, 260, 295, 498, 593, 617, 761, 791, 819, 824, 853, 1134, 1158], "top_k": [156, 295, 333, 745, 761, 853, 885, 1219], "columnnameorselector": [157, 163, 165, 213, 220, 222, 234, 254, 262, 263, 264, 295, 763, 770, 771, 800, 825, 826, 853], "strict": [157, 295, 329, 334, 592, 596, 614, 632, 633, 634, 636, 638, 745, 763, 853, 881, 886, 974, 1113, 1133, 1137, 1155, 1173, 1174, 1175, 1177, 1179, 1219], "due": [157, 184, 204, 231, 234, 266, 295, 304, 334, 371, 388, 392, 406, 456, 528, 530, 531, 532, 533, 547, 561, 564, 565, 566, 567, 568, 570, 571, 572, 646, 689, 690, 692, 693, 732, 733, 745, 763, 782, 791, 809, 853, 886, 928, 949, 953, 967, 1219], "overflow": [157, 295, 334, 349, 350, 614, 636, 647, 745, 763, 853, 886, 906, 907, 1155, 1177, 1189, 1219], "2020": [157, 162, 182, 231, 295, 366, 371, 377, 391, 395, 398, 399, 400, 401, 402, 403, 404, 405, 561, 632, 633, 634, 745, 763, 809, 853, 856, 923, 928, 952, 956, 959, 960, 961, 962, 963, 964, 965, 966, 1173, 1174, 1175], "u8": [157, 254, 255, 264, 295, 556, 662, 745, 763, 853, 856, 1092, 1196, 1219, 1227], "to_dict": [157, 295, 763, 853], "as_seri": [157, 252, 295, 763, 853, 913, 1086, 1219], "tempor": [157, 184, 185, 187, 188, 201, 231, 233, 234, 253, 295, 339, 441, 561, 564, 565, 566, 567, 568, 570, 571, 572, 745, 757, 763, 782, 783, 785, 786, 809, 853, 856, 897, 998, 1017, 1219], "greater": [158, 204, 295, 432, 434, 585, 612, 613, 624, 641, 745, 791, 853, 1126, 1153, 1154, 1165, 1182, 1219], "cheap": [158, 159, 238, 271, 295, 764, 765, 812, 831, 853, 896, 900, 1219], "deepcopi": [158, 295, 764, 853, 896, 1219], "appl": [160, 192, 203, 226, 229, 252, 277, 278, 280, 282, 283, 284, 285, 286, 287, 288, 295, 558, 598, 625, 745, 790, 807, 837, 838, 840, 842, 843, 844, 845, 846, 847, 848, 853, 1139, 1166], "banana": [160, 252, 278, 280, 282, 283, 284, 285, 286, 287, 288, 295, 558, 598, 625, 745, 838, 840, 842, 843, 844, 845, 846, 847, 848], "orang": [160, 277, 278, 280, 282, 283, 285, 287, 288, 295, 837, 838, 840, 842, 843, 845, 847, 848], "pairwis": [161, 295], "pearson": [161, 295, 457, 585, 677, 745, 1021, 1126, 1219], "correl": [161, 295, 677, 722], "coeffici": [161, 295, 585, 745, 1126, 1219], "corrcoef": [161, 295], "percentil": [162, 295, 914, 1219], "summari": [162, 295, 914, 1219], "deem": [162, 295], "glimps": [162, 190, 295], "median": [162, 222, 295, 422, 566, 745, 832, 853, 914, 1101, 1219], "str2": [162, 295], "usd": [162, 182, 295, 1227], "null_count": [162, 165, 295, 356, 745, 853, 912, 914, 991, 1219], "266667": [162, 295], "std": [162, 295, 570, 745, 853, 914, 1105, 1219], "101514": [162, 295], "707107": [162, 295, 415, 570, 745, 977, 1219], "more_column": [163, 169, 239, 263, 295, 417, 696, 745, 770, 774, 814, 826, 853], "subset": [165, 218, 262, 295, 771, 825, 853], "preserv": [165, 173, 183, 186, 203, 207, 256, 257, 295, 361, 362, 423, 471, 582, 745, 771, 778, 790, 853, 917, 918, 985, 1034, 1123, 1201, 1219], "behavior": [165, 295, 475, 496, 508, 697, 706, 745, 771, 853, 913, 1038, 1059, 1067, 1086, 1219], "all_horizont": [165, 295, 663, 771, 853], "is_nul": [165, 295, 745, 771, 853, 1219], "null_equ": [167, 177, 295, 974, 1113, 1219], "sizeunit": [168, 295, 975, 1219], "heap": [168, 295, 745, 975, 1219], "its": [168, 295, 365, 392, 406, 588, 735, 745, 891, 922, 953, 967, 975, 1219], "bitmap": [168, 295, 975, 1219], "structarrai": [168, 295, 975, 1219], "constant": [168, 231, 295, 363, 420, 745, 809, 853, 920, 975, 982, 1219], "unchang": [168, 295, 508, 556, 653, 745, 795, 796, 836, 841, 853, 975, 1067, 1092, 1202, 1219], "capac": [168, 243, 295, 975, 1121, 1219], "ffi": [168, 295, 975, 1219], "kb": [168, 295, 975, 1219], "mb": [168, 295, 975, 1219], "gb": [168, 295, 975, 1219], "revers": [168, 295, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 506, 529, 530, 531, 547, 646, 745, 853, 904, 905, 906, 907, 908, 909, 910, 911, 1219], "1_000_000": [168, 295, 975, 1219], "25888898": [168, 295], "689577102661133": [168, 295], "long": [169, 213, 264, 295, 774, 800, 853], "letter": [169, 279, 289, 295, 417, 593, 601, 617, 696, 745, 774, 839, 849, 853, 856, 1134, 1142, 1158], "onlin": [170, 295, 981, 1219], "rerun": [170, 295, 981, 1219], "conveni": [170, 295, 862, 981, 1219], "Not": [171, 295, 450, 452, 745, 776, 853], "fillnullstrategi": [172, 295, 422, 745, 777, 853, 984, 1219], "matches_supertyp": [172, 295, 777, 853], "forward": [172, 204, 241, 295, 384, 422, 428, 491, 578, 745, 777, 791, 815, 853, 945, 984, 1054, 1118, 1219], "consecut": [172, 295, 327, 422, 428, 591, 745, 777, 853, 984, 1132, 1219], "fill_nan": [172, 295, 745, 853, 1219], "intoexprcolumn": [173, 295, 333, 339, 340, 341, 486, 491, 542, 575, 578, 627, 628, 629, 654, 669, 689, 690, 692, 693, 704, 705, 732, 733, 735, 745, 778, 815, 853, 885, 897, 898, 899, 1049, 1054, 1082, 1168, 1169, 1170, 1203, 1219], "constraint": [173, 295, 456, 528, 530, 531, 532, 533, 547, 646, 735, 745, 778, 853], "is_in": [173, 295, 745, 1219], "get_column_index": [174, 295], "reduct": [176, 295], "supercast": [176, 295], "parent": [176, 295], "rule": [176, 295, 593, 617, 1134, 1158], "arithmet": [176, 295], "zip_with": [176, 295, 1219], "foo11": [176, 295], "bar22": [176, 295], "nth": [178, 250, 295, 431, 624, 650, 745, 780, 823, 853, 989, 1165, 1192, 1219], "th": [178, 250, 295, 431, 487, 585, 650, 745, 780, 823, 853, 989, 1050, 1126, 1192, 1219], "retriev": [179, 295, 464, 465, 642, 1027, 1028, 1183], "max_items_per_column": [182, 295], "max_colname_length": [182, 295], "return_as_str": [182, 295, 520], "preview": [182, 295], "few": [182, 295], "exce": [182, 295], "ellipsi": [182, 295], "head": [182, 206, 249, 295, 308, 461, 745, 794, 853, 1023, 1190, 1219], "tail": [182, 190, 295, 308, 585, 745, 853, 993, 1126, 1219], "more_bi": [183, 186, 220, 245, 295, 588, 745, 781, 784, 819, 853], "groupbi": [183, 222, 295, 309, 509, 667, 710, 745, 853], "consist": [183, 186, 220, 295, 632, 781, 784, 853, 862, 981, 1173, 1219], "regardless": [183, 186, 295, 605, 735, 1146], "agg": [183, 184, 187, 222, 231, 295, 303, 423, 425, 430, 433, 509, 587, 588, 661, 710, 745, 766, 767, 773, 775, 781, 782, 783, 785, 786, 805, 809, 813, 817, 853, 856], "Or": [183, 184, 204, 231, 245, 266, 274, 295, 541, 561, 588, 689, 690, 692, 693, 732, 733, 735, 745, 781, 782, 791, 809, 819, 834, 853], "index_column": [184, 185, 187, 188, 231, 295, 561, 745, 782, 783, 785, 786, 809, 853], "timedelta": [184, 185, 187, 188, 204, 231, 266, 295, 388, 392, 406, 561, 564, 565, 566, 567, 568, 570, 571, 572, 689, 690, 692, 693, 732, 733, 745, 782, 783, 785, 786, 791, 809, 853, 856, 934, 936, 941, 949, 953, 967, 1077, 1078, 1219], "period": [184, 185, 187, 188, 231, 295, 392, 406, 414, 415, 416, 542, 561, 689, 690, 692, 693, 732, 733, 745, 782, 783, 785, 786, 809, 853, 953, 967, 976, 977, 978, 1082, 1219], "include_boundari": [184, 187, 295, 782, 785, 853], "closedinterv": [184, 185, 187, 188, 231, 295, 441, 561, 564, 565, 566, 567, 568, 570, 571, 572, 689, 690, 692, 693, 732, 733, 745, 782, 783, 785, 786, 809, 853, 998, 1219], "label": [184, 295, 357, 549, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 745, 782, 805, 853, 913, 1086, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1105, 1106, 1107, 1219], "start_bi": [184, 187, 295, 782, 785, 853], "startbi": [184, 187, 295, 782, 785, 853], "check_sort": [184, 185, 187, 188, 231, 295, 561, 745, 782, 783, 785, 786, 809, 853], "dynamicgroupbi": [184, 187, 295], "member": [184, 295, 782, 853, 1006, 1219], "descript": [184, 295, 782, 853], "ascend": [184, 185, 187, 188, 231, 295, 561, 565, 566, 567, 568, 570, 572, 745, 782, 783, 785, 786, 809, 853], "dynam": [184, 187, 295, 498, 564, 565, 566, 567, 568, 570, 571, 572, 745, 782, 785, 853, 1061], "matter": [184, 185, 187, 188, 201, 231, 233, 234, 253, 295, 561, 628, 629, 745, 782, 783, 785, 786, 809, 853], "interv": [184, 185, 187, 188, 231, 266, 295, 357, 392, 406, 437, 441, 549, 561, 564, 565, 566, 567, 568, 570, 571, 572, 689, 690, 692, 693, 732, 733, 745, 782, 783, 785, 786, 809, 853, 913, 926, 929, 930, 937, 939, 942, 944, 947, 950, 951, 953, 958, 967, 968, 994, 998, 1086, 1219], "_lower_boundari": [184, 295, 782, 853], "_upper_boundari": [184, 295, 782, 853], "harder": [184, 187, 295, 782, 785, 853], "inclus": [184, 185, 187, 188, 231, 295, 441, 561, 564, 565, 566, 567, 568, 570, 571, 572, 622, 623, 669, 689, 690, 692, 693, 704, 705, 732, 733, 745, 782, 783, 785, 786, 809, 853, 998, 1163, 1164, 1219], "datapoint": [184, 187, 295, 782, 785, 853], "boundari": [184, 295, 339, 340, 341, 437, 745, 782, 853, 897, 898, 899, 994, 1219], "mondai": [184, 187, 295, 406, 408, 782, 785, 853, 967, 969], "tuesdai": [184, 187, 295, 782, 785, 853], "wednesdai": [184, 187, 295, 782, 785, 853], "thursdai": [184, 187, 295, 782, 785, 853], "fridai": [184, 187, 295, 782, 785, 853], "saturdai": [184, 187, 295, 782, 785, 853], "sundai": [184, 187, 295, 408, 782, 785, 853, 969], "earliest": [184, 187, 295, 391, 392, 406, 632, 634, 691, 782, 785, 853, 952, 953, 967, 1173, 1175], "weekli": [184, 187, 295, 406, 782, 785, 853, 967], "week": [184, 187, 204, 231, 266, 295, 388, 392, 406, 408, 561, 564, 565, 566, 567, 568, 570, 571, 572, 689, 690, 692, 693, 694, 732, 733, 745, 782, 785, 791, 809, 853, 856, 949, 953, 967, 969], "sorted": [184, 185, 187, 188, 231, 295, 561, 745, 782, 783, 785, 786, 809, 853], "verifi": [184, 185, 187, 188, 231, 295, 561, 745, 782, 783, 785, 786, 809, 853], "incorrectli": [184, 185, 187, 188, 231, 295, 498, 561, 745, 782, 783, 785, 786, 809, 853], "incorrect": [184, 185, 187, 188, 231, 295, 409, 561, 577, 745, 782, 783, 785, 786, 809, 836, 841, 853, 970, 1116, 1219], "roll": [184, 185, 188, 295, 384, 385, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 675, 722, 723, 745, 782, 783, 786, 853, 945, 946, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1219], "re": [184, 200, 256, 295, 384, 385, 782, 853, 945, 946, 1226], "come": [184, 295, 384, 385, 457, 498, 745, 758, 782, 852, 853, 945, 946, 1021, 1219], "1d": [184, 204, 231, 266, 295, 364, 388, 392, 400, 403, 406, 409, 561, 564, 565, 566, 567, 568, 570, 571, 572, 689, 690, 692, 693, 694, 707, 732, 733, 745, 782, 791, 809, 853, 856, 921, 929, 936, 949, 953, 958, 961, 964, 967], "set_index": [184, 295, 782, 853], "resampl": [184, 295, 782, 853], "reset_index": [184, 295, 782, 853], "though": [184, 295, 741, 782, 853], "unlik": [184, 295, 782, 853], "evenli": [184, 295, 782, 853], "upsampl": [184, 295, 782, 853], "1n": [184, 204, 231, 266, 295, 388, 392, 406, 561, 564, 565, 566, 567, 568, 570, 571, 572, 689, 690, 692, 693, 732, 733, 745, 782, 791, 809, 853, 949, 953, 967], "nanosecond": [184, 204, 231, 266, 295, 388, 392, 393, 404, 406, 561, 564, 565, 566, 567, 568, 570, 571, 572, 689, 690, 692, 693, 694, 732, 733, 745, 782, 791, 809, 853, 949, 953, 954, 965, 967], "1u": [184, 204, 231, 266, 295, 388, 392, 406, 561, 564, 565, 566, 567, 568, 570, 571, 572, 689, 690, 692, 693, 732, 733, 745, 782, 791, 809, 853, 949, 953, 967], "microsecond": [184, 201, 204, 231, 233, 234, 253, 266, 295, 388, 392, 401, 406, 561, 564, 565, 566, 567, 568, 570, 571, 572, 689, 690, 691, 692, 693, 694, 731, 732, 733, 745, 782, 791, 805, 809, 853, 856, 949, 953, 962, 967], "1m": [184, 204, 231, 266, 295, 377, 388, 392, 401, 402, 404, 405, 406, 561, 564, 565, 566, 567, 568, 570, 571, 572, 689, 690, 692, 693, 732, 733, 745, 782, 791, 809, 853, 949, 953, 962, 963, 965, 966, 967], "millisecond": [184, 204, 231, 266, 295, 388, 392, 402, 406, 561, 564, 565, 566, 567, 568, 570, 571, 572, 689, 690, 692, 693, 694, 732, 733, 745, 782, 791, 809, 853, 856, 949, 953, 963, 967], "minut": [184, 204, 231, 266, 295, 388, 392, 403, 406, 561, 564, 565, 566, 567, 568, 570, 571, 572, 689, 690, 691, 692, 693, 694, 731, 732, 733, 745, 782, 791, 809, 853, 856, 949, 953, 964, 967], "1h": [184, 204, 231, 266, 295, 371, 388, 392, 406, 561, 564, 565, 566, 567, 568, 570, 571, 572, 689, 690, 692, 693, 732, 733, 745, 782, 791, 809, 853, 928, 930, 949, 953, 967], "hour": [184, 204, 231, 266, 295, 388, 392, 400, 406, 561, 564, 565, 566, 567, 568, 570, 571, 572, 689, 690, 691, 692, 693, 694, 731, 732, 733, 745, 782, 791, 809, 853, 856, 949, 953, 961, 967], "1w": [184, 204, 231, 266, 295, 388, 392, 406, 561, 564, 565, 566, 567, 568, 570, 571, 572, 689, 690, 692, 693, 732, 733, 745, 782, 791, 809, 853, 949, 953, 967], "1mo": [184, 204, 231, 266, 295, 366, 384, 385, 388, 391, 392, 399, 406, 561, 564, 565, 566, 567, 568, 570, 571, 572, 689, 690, 692, 693, 732, 733, 745, 782, 791, 809, 853, 923, 944, 945, 946, 949, 950, 951, 952, 953, 960, 967, 968], "month": [184, 204, 231, 266, 295, 369, 384, 385, 388, 392, 406, 561, 564, 565, 566, 567, 568, 570, 571, 572, 688, 689, 690, 691, 692, 693, 694, 732, 733, 745, 782, 791, 809, 853, 926, 945, 946, 949, 953, 967], "1q": [184, 204, 231, 266, 295, 388, 392, 406, 561, 564, 565, 566, 567, 568, 570, 571, 572, 689, 690, 692, 693, 732, 733, 745, 782, 791, 809, 853, 949, 953, 967], "quarter": [184, 204, 231, 266, 295, 388, 392, 406, 561, 564, 565, 566, 567, 568, 570, 571, 572, 689, 690, 692, 693, 732, 733, 745, 782, 791, 809, 853, 949, 953, 967], "1y": [184, 204, 231, 266, 295, 388, 392, 406, 561, 564, 565, 566, 567, 568, 570, 571, 572, 689, 690, 692, 693, 732, 733, 745, 782, 791, 809, 853, 949, 953, 967], "1i": [184, 204, 231, 266, 295, 388, 561, 564, 565, 566, 567, 568, 570, 571, 572, 745, 782, 791, 809, 853, 949], "3d12h4m25": [184, 204, 231, 266, 295, 392, 406, 561, 689, 690, 692, 693, 732, 733, 745, 782, 791, 809, 853, 953, 967], "correspond": [184, 204, 231, 256, 266, 295, 376, 388, 392, 406, 509, 552, 560, 561, 564, 565, 566, 567, 568, 570, 571, 572, 689, 690, 692, 693, 732, 733, 745, 766, 782, 791, 809, 853, 933, 949, 953, 967, 1088, 1096, 1219], "daylight": [184, 204, 231, 266, 295, 363, 371, 388, 392, 406, 561, 564, 565, 566, 567, 568, 570, 571, 572, 689, 690, 692, 693, 694, 732, 733, 745, 782, 791, 809, 853, 928, 949, 953, 967], "10i": [184, 231, 295, 561, 745, 782, 809, 853], "datetime_rang": [184, 295, 364, 366, 377, 384, 385, 388, 391, 392, 399, 400, 401, 402, 403, 404, 405, 406, 409, 564, 565, 567, 570, 571, 572, 689, 745, 782, 853, 920, 921, 923, 928, 929, 930, 936, 937, 939, 942, 945, 946, 947, 949, 952, 953, 958, 960, 961, 962, 963, 964, 965, 966, 967], "30m": [184, 295, 392, 406, 782, 853, 953, 967], "lower_bound": [184, 295, 339, 341, 441, 745, 782, 853, 897, 899, 998, 1206, 1219], "upper_bound": [184, 295, 339, 340, 441, 498, 745, 782, 853, 897, 898, 998, 1066, 1219], "bys": [184, 295, 782, 853], "int_rang": [184, 264, 281, 295, 669, 782, 796, 841, 853], "2i": [184, 295, 782, 853], "3i": [184, 295, 782, 853], "a_agg_list": [184, 295, 782, 853], "rollinggroupbi": [185, 188, 231, 295], "group_bi": [186, 218, 222, 294, 295, 303, 423, 425, 430, 433, 507, 509, 587, 588, 661, 710, 745, 766, 767, 773, 775, 784, 805, 817, 852, 853, 856], "group_by_dynam": [187, 231, 295, 785, 809, 853], "_lower_bound": [187, 295, 785, 853], "_upper_bound": [187, 295, 785, 853], "seed_1": [189, 295, 435, 745, 992, 1219], "seed_2": [189, 295, 435, 745, 992, 1219], "seed_3": [189, 295, 435, 745, 992, 1219], "hash": [189, 295, 745, 1219], "Its": [189, 295, 435, 745, 992, 1219], "u64": [189, 295, 435, 554, 745, 805, 853, 992, 1219], "10783150408545073287": [189, 295], "1438741209321515184": [189, 295], "10047419486152048166": [189, 295], "2047317070637311557": [189, 295], "ab": [190, 206, 249, 270, 295, 642, 644, 745, 830, 853, 993, 1023, 1190, 1219], "grown": [192, 295], "insert_column": [193, 295], "intermedi": [195, 295, 789, 853, 1227], "linear": [195, 224, 287, 295, 440, 466, 512, 550, 568, 675, 676, 719, 745, 789, 806, 847, 853, 997, 1029, 1087, 1103, 1219], "666667": [195, 267, 283, 295, 414, 745, 789, 828, 843, 853, 976, 1219], "333333": [195, 295, 456, 528, 745, 789, 853, 1082, 1107, 1219], "mask": [196, 198, 295, 329, 442, 444, 445, 448, 449, 455, 543, 544, 592, 596, 745, 881, 985, 991, 998, 1000, 1003, 1004, 1009, 1010, 1018, 1083, 1084, 1114, 1133, 1137, 1210, 1219], "visual": [196, 198, 295], "scalar": [199, 207, 232, 295, 576, 667, 707, 710, 745, 1020, 1112, 1219], "With": [199, 241, 295, 491, 564, 565, 566, 567, 568, 570, 571, 572, 578, 745, 815, 853, 1020, 1054, 1118, 1219], "buffer_s": [201, 295], "fit": [201, 243, 264, 295, 580, 721, 745, 1120, 1121, 1219], "signific": [201, 207, 295, 309, 509, 574, 745, 1068, 1109, 1219], "4x": [201, 295], "materialis": [201, 202, 232, 233, 234, 295], "rows_by_kei": [201, 233, 295], "iter_row": [202, 232, 233, 234, 295], "17_500": [202, 295], "klmnoopqrstuvwxyz": [202, 295], "__name__": [202, 295], "7500": [202, 295], "15_000": [202, 295], "record_batch": [202, 295], "to_arrow": [202, 295, 1219], "to_batch": [202, 295], "date32": [202, 295], "large_str": [202, 251, 257, 295], "15000": [202, 295], "2500": [202, 295], "left_on": [203, 204, 265, 295, 790, 791, 827, 853], "right_on": [203, 204, 265, 295, 790, 791, 827, 853], "suffix": [203, 204, 237, 270, 274, 295, 304, 331, 450, 452, 453, 454, 506, 529, 530, 532, 533, 541, 547, 558, 598, 628, 631, 745, 790, 791, 811, 830, 832, 834, 853, 856, 883, 1139, 1172], "_right": [203, 204, 295, 790, 791, 853], "joinvalid": [203, 295, 790, 853], "join_nul": [203, 295, 790, 853], "semi": [203, 295, 790, 853], "anti": [203, 295, 790, 841, 853, 1111, 1114, 1219], "cross": [203, 295, 790, 853], "outer_coalesc": [203, 295, 790, 853], "coalesc": [203, 265, 295, 632, 790, 827, 853, 1173], "cartisian": [203, 295, 790, 853], "many_to_mani": [203, 295, 790, 853], "one_to_on": [203, 295, 790, 853], "one_to_mani": [203, 295, 790, 853], "many_to_on": [203, 295, 790, 853], "join_asof": [203, 295, 790, 853], "other_df": [203, 295], "ham_right": [203, 295, 790, 853], "by_left": [204, 295, 791, 853], "by_right": [204, 295, 791, 853], "asofjoinstrategi": [204, 295, 791, 853], "allow_parallel": [204, 295, 790, 791, 853], "force_parallel": [204, 295, 790, 791, 853], "asof": [204, 295, 791, 853], "rather": [204, 295, 520, 549, 560, 641, 745, 791, 853, 1086, 1096, 1182, 1219], "asof_join": [204, 295], "distanc": [204, 295, 437, 745, 791, 853, 994, 1219], "plan": [204, 205, 295, 762, 766, 769, 773, 790, 791, 813, 817, 853], "forc": [204, 207, 281, 295, 498, 790, 791, 841, 853, 1068, 1219], "gdp": [204, 295, 791, 853], "2016": [204, 295, 791, 853], "2017": [204, 295, 791, 853], "2018": [204, 295, 391, 791, 853, 952], "2019": [204, 295, 791, 853], "jan": [204, 295, 791, 853], "1st": [204, 295, 791, 853], "4164": [204, 295, 791, 853], "4411": [204, 295, 791, 853], "4566": [204, 295, 791, 853], "4696": [204, 295, 791, 853], "set_sort": [204, 231, 266, 295, 561, 745, 791, 809, 853, 1219], "popul": [204, 295, 791, 853], "12th": [204, 295, 791, 853], "82": [204, 295, 791, 853], "66": [204, 265, 295, 571, 662, 745, 791, 827, 853, 1103, 1219], "83": [204, 295, 791, 853], "52": [204, 270, 295, 407, 573, 745, 791, 830, 853], "request": [205, 295], "describe_plan": [205, 295], "unoptim": [205, 295], "describe_optimized_plan": [205, 295], "show_graph": [205, 295, 853], "un": [205, 295], "graphviz": [205, 295, 817, 853], "much": [207, 264, 281, 295, 356, 475, 496, 509, 606, 607, 710, 745, 841, 912, 1038, 1059, 1068, 1147, 1148, 1219], "intens": [207, 281, 295, 541, 745, 1068, 1219], "materi": [207, 281, 295, 766, 805, 841, 853, 856, 1068, 1219], "parallelis": [207, 281, 295, 1068, 1219], "achiev": [207, 281, 295, 509, 607, 745, 913, 1068, 1086, 1148, 1219], "best": [207, 281, 295, 509, 745, 1068, 1219], "black": [207, 295, 328, 330, 331, 332], "arbitrarili": [207, 295], "rearrang": [207, 295], "transform": [207, 295, 507, 637, 639, 640, 745], "lru_cach": [207, 295, 509, 745, 1068, 1219], "column_1": [207, 261, 295], "axi": [208, 210, 213, 215, 247, 295, 670, 671, 800, 853], "max_horizont": [208, 295, 711], "null_strategi": [210, 247, 295], "nullstrategi": [210, 247, 295], "mean_horizont": [210, 295], "propag": [210, 247, 295, 413, 534, 535, 537, 591, 745, 1077, 1078, 1132, 1219], "spam": [210, 295, 601, 1142], "ignore_nul": [211, 248, 295, 305, 307, 414, 415, 416, 591, 663, 665, 745, 860, 861, 976, 977, 978, 1132, 1209, 1219], "id_var": [213, 295, 800, 853], "value_var": [213, 295, 800, 853], "variable_nam": [213, 295, 800, 853], "value_nam": [213, 295, 800, 853], "unpivot": [213, 295, 800, 853], "massag": [213, 295, 800, 853], "measur": [213, 295, 800, 853], "caller": [214, 295, 498, 796, 801, 836, 841, 853], "respons": [214, 295, 801, 853], "steve": [214, 295, 801, 853], "elis": [214, 295, 801, 853], "bob": [214, 295, 801, 853], "ag": [214, 295, 801, 853], "anna": [214, 295, 801, 853], "megan": [214, 295, 801, 853], "thoma": [214, 295, 801, 853], "21": [214, 247, 295, 564, 565, 567, 570, 571, 572, 700, 745, 801, 853, 856], "min_horizont": [215, 295, 715, 724], "what": [218, 295, 593, 617, 1134, 1158, 1209, 1219], "pack": [218, 295], "expr_unique_subset": [218, 295], "df_nuniqu": [218, 295], "df_agg_nuniqu": [218, 295], "include_kei": [220, 234, 295], "offer": [221, 295, 545, 745, 804, 853], "fulli": [221, 235, 295], "cast_str_to_int": [221, 295, 804, 853], "col_nam": [221, 295, 804, 853], "tdf": [221, 295, 804, 853], "aggregate_funct": [222, 295], "pivotagg": [222, 295], "sort_column": [222, 295], "section": [222, 295, 592, 600, 601, 615, 689, 690, 692, 693, 732, 733, 1133, 1141, 1142, 1156], "predefin": [222, 295], "predict": [222, 225, 266, 295], "transpos": [222, 295], "discoveri": [222, 295], "col1": [222, 261, 295, 853, 1227], "col2": [222, 261, 295, 853, 1227], "col3": [222, 295, 1227], "tanh": [222, 295, 745, 1219], "998347": [222, 295], "964028": [222, 295], "999954": [222, 295], "unique_column_valu": [222, 295], "interpol": [224, 287, 295, 422, 512, 550, 568, 719, 745, 806, 847, 853, 1087, 1103, 1219], "rollinginterpolationmethod": [224, 287, 295, 550, 568, 719, 745, 806, 847, 853, 1087, 1103, 1219], "midpoint": [224, 287, 295, 550, 568, 719, 745, 806, 847, 853, 1087, 1103, 1219], "replace_column": [228, 295], "t_0": [231, 295, 561, 564, 565, 566, 567, 568, 570, 571, 572, 745, 809, 853], "t_1": [231, 295, 561, 564, 565, 566, 567, 568, 570, 571, 572, 745, 809, 853], "t_n": [231, 295, 561, 564, 565, 566, 567, 568, 570, 571, 572, 745, 809, 853], "43": [231, 295, 350, 561, 571, 745, 809, 853], "strptime": [231, 295, 391, 561, 745, 809, 853, 952], "2d": [231, 256, 295, 388, 561, 707, 745, 809, 853, 920, 926], "sum_a": [231, 295, 561, 745, 809, 853], "min_a": [231, 295, 561, 745, 809, 853], "max_a": [231, 295, 561, 745, 809, 853], "by_pred": [232, 295], "accord": [232, 295, 508, 549, 689, 690, 692, 693, 732, 733, 745, 933, 1086, 1219], "mutual": [232, 295], "exclus": [232, 295, 662, 669, 704, 705, 745], "clariti": [232, 295], "toomanyrowsreturnederror": [232, 295, 757], "norowsreturnederror": [232, 295, 757], "inherit": [232, 295], "rowserror": [232, 295, 757], "high": [234, 295, 549, 745, 1086, 1219], "cost": [234, 295], "reoconstruct": [234, 295], "defaultdict": [234, 295], "assum": [234, 295, 795, 796, 836, 841, 853], "with_replac": [235, 295, 486, 575, 745, 1049, 1110, 1219], "ordereddict": [236, 295, 727, 810, 853], "named_expr": [237, 238, 270, 271, 295, 724, 727, 811, 812, 830, 831, 853], "threshold": [237, 295, 811, 853], "set_auto_structifi": [237, 270, 295, 811, 830, 853], "auto_structifi": [237, 270, 295, 811, 830, 853], "is_odd": [237, 295, 811, 853], "_is_odd": [237, 295, 811, 853], "sequenti": [238, 271, 295, 812, 831, 853], "fill_valu": [241, 242, 264, 295, 578, 579, 745, 815, 816, 853, 1118, 1119, 1219], "opposit": [241, 295, 491, 578, 745, 815, 853, 1054, 1118, 1219], "lag": [241, 295, 491, 578, 675, 745, 815, 853, 1054, 1118, 1219], "shift": [242, 295, 359, 470, 542, 579, 675, 745, 816, 853, 915, 1033, 1082, 1119, 1219], "shrink": [243, 295, 580, 745, 1120, 1121, 1219], "hold": [243, 295], "ddof": [246, 267, 295, 570, 572, 590, 660, 677, 679, 722, 723, 726, 734, 745, 820, 828, 853, 1105, 1107, 1130, 1208, 1219], "deviat": [246, 295, 415, 570, 590, 726, 745, 820, 853, 977, 1130, 1219], "degre": [246, 267, 295, 551, 570, 572, 590, 660, 671, 677, 679, 722, 723, 726, 734, 745, 820, 828, 853, 1105, 1107, 1130, 1208, 1219], "freedom": [246, 267, 295, 570, 572, 590, 660, 677, 679, 722, 723, 726, 734, 745, 820, 828, 853, 1105, 1107, 1130, 1208, 1219], "divisor": [246, 267, 295, 570, 572, 590, 660, 677, 679, 722, 723, 726, 734, 745, 820, 828, 853, 1105, 1107, 1130, 1208, 1219], "816497": [246, 295], "gather_everi": [250, 295, 650, 745, 823, 853, 1192, 1219], "mostli": [251, 295, 423, 745], "categoricaltyp": [251, 295], "fruit": [252, 295, 558, 598, 625, 745, 1139, 1166], "car": [252, 295, 558, 745], "beetl": [252, 295, 558, 745], "audi": [252, 295, 558, 745], "28": [252, 295, 302, 391, 409, 745, 952, 970, 1227], "300": [252, 295, 1099, 1100, 1102, 1219], "drop_first": [254, 295], "dummi": [254, 295, 1196, 1219], "foo_1": [254, 295], "foo_2": [254, 295], "bar_3": [254, 295], "bar_4": [254, 295], "ham_a": [254, 295], "ham_b": [254, 295], "instantiat": [255, 295, 1198, 1219], "from_repr": [255, 295, 1198, 1219], "df_from_str_repr": [255, 295], "eval": [255, 295, 695, 1198, 1219], "indexord": [256, 295], "fortran": [256, 295], "downstream": [256, 295, 577, 745, 1116, 1219], "applic": [256, 295, 509, 564, 565, 566, 567, 568, 570, 571, 572, 745], "prevent": [256, 295, 304, 349, 350, 456, 528, 647, 745, 853, 906, 907, 1189, 1219], "reshap": [256, 295, 473, 745, 1036, 1219], "ll": [256, 295], "u1": [256, 295], "f4": [256, 295], "view": [256, 295, 509, 745, 1200, 1219], "recarrai": [256, 295], "rec": [256, 295], "use_pyarrow_extension_arrai": [257, 295, 1201, 1219], "extens": [257, 295, 1201, 1219], "sent": [257, 295, 1200, 1201, 1219], "pandas_df1": [257, 295], "pandas_df2": [257, 295], "pandas_df2_pa": [257, 295], "na": [257, 295, 625, 1201, 1219], "four": [259, 295], "five": [259, 295, 1227], "bottom_k": [260, 295, 654, 745, 824, 853, 1203, 1219], "header_nam": [261, 295], "column_nam": [261, 295], "perhap": [261, 295], "column_2": [261, 295], "name_gener": [261, 295], "base_nam": [261, 295], "my_column_": [261, 295], "my_column_0": [261, 295], "my_column_1": [261, 295], "my_column_2": [261, 295], "new_id": [261, 295], "uniquekeepstrategi": [262, 295, 825, 853], "kept": [262, 295, 825, 853], "decompos": [263, 295, 826, 853], "t_a": [263, 295, 826, 853], "t_b": [263, 295, 826, 853], "t_c": [263, 295, 826, 853], "t_d": [263, 295, 826, 853], "womp": [263, 295, 826, 853], "t_": [263, 295, 826, 853], "t_struct": [263, 295, 826, 853], "step": [264, 295, 669, 704, 705], "unstackdirect": [264, 295], "pivot": [264, 295], "phase": [264, 295], "subject": [264, 295], "ascii_uppercas": [264, 295], "h": [264, 295, 302, 395, 398, 580, 632, 634, 638, 745, 1173, 1175, 1179], "x_0": [264, 295, 414, 415, 416, 745, 976, 977, 978, 1219], "x_1": [264, 295], "y_0": [264, 295, 414, 415, 416, 745, 976, 977, 978, 1219], "y_1": [264, 295], "z_0": [264, 295], "z_1": [264, 295], "include_nul": [265, 295, 827, 853], "syntact": [265, 295, 556, 663, 665, 678, 682, 696, 697, 701, 702, 703, 706, 711, 713, 714, 715, 717, 718, 719, 724, 726, 728, 730, 734, 736, 745, 827, 853, 1092, 1129, 1219], "sugar": [265, 295, 556, 663, 665, 678, 682, 696, 697, 701, 702, 703, 706, 711, 713, 714, 715, 717, 718, 719, 724, 726, 728, 730, 734, 736, 745, 827, 853, 1092, 1129, 1219], "400": [265, 295, 827, 853, 1099, 1100, 1102, 1219], "600": [265, 295, 827, 853, 856], "700": [265, 295, 827, 853], "new_df": [265, 295, 827, 853], "time_column": [266, 295], "frequenc": [266, 295], "date_rang": [266, 295, 369, 372, 389, 397, 408, 926, 944, 950, 951, 968, 969], "forward_fil": [266, 295, 347, 350, 745], "varianc": [267, 295, 416, 457, 572, 660, 734, 745, 828, 853, 978, 1021, 1107, 1208, 1219], "grow": [268, 295], "not_": [270, 295, 451, 745, 830, 853, 1219], "not_c": [270, 295, 830, 853], "diff": [270, 295, 399, 400, 401, 402, 403, 404, 405, 487, 745, 830, 853, 960, 961, 962, 963, 964, 965, 966, 1050, 1219], "_diff": [270, 295, 830, 853], "row_nr": [272, 295, 564, 565, 567, 570, 571, 572, 745, 833, 853, 1111, 1219], "named_agg": [274, 834], "_sum": [274, 834], "_mean_squar": [274, 834], "b_sum": [274, 834], "c_mean_squar": [274, 834], "sub": [276, 281, 322, 323, 324, 745, 875, 876, 877], "map_group": [276, 667, 836], "toward": [277, 460, 480, 678, 745, 837, 1022, 1043, 1219], "nr": [279, 289, 839, 849], "triangl": [281, 841], "group_df": [281, 841], "maxim": [282, 317, 745, 842, 870, 1219], "833333": [283, 843], "minim": [285, 318, 465, 580, 588, 745, 845, 871, 1028, 1072, 1120, 1219], "overview": [295, 745, 757, 853, 1219, 1227], "frameinittyp": [295, 853], "entri": [295, 853, 1226], "mydatafram": 295, "df4": 295, "df5": 295, "df6": 295, "approx_n_uniqu": [295, 745, 853], "corr": 295, "drop_in_plac": 295, "drop_nul": [295, 361, 745, 853, 917, 1219], "estimated_s": [295, 1219], "explod": [295, 425, 541, 557, 745, 853, 1093, 1219], "find_idx_by_nam": 295, "fold": [295, 518, 674, 680, 681, 684, 685, 720], "frame_equ": 295, "group_by_rol": [295, 853], "groupby_dynam": [295, 853], "groupby_rol": [295, 853], "hash_row": 295, "hstack": 295, "insert_at_idx": 295, "is_dupl": [295, 745, 1219], "is_empti": [295, 1219], "is_uniqu": [295, 745, 1219], "iter_column": 295, "iter_slic": 295, "melt": [295, 853], "merge_sort": [295, 853], "n_uniqu": [295, 745, 1219], "pipe": [295, 745, 853], "quantil": [295, 549, 568, 745, 853, 1086, 1103, 1219], "replace_at_idx": 295, "select_seq": [295, 853], "shift_and_fil": [295, 745, 853, 1219], "shrink_to_fit": [295, 1219], "take_everi": [295, 745, 853, 1219], "to_dummi": [295, 1219], "to_numpi": [295, 507, 745, 1219], "to_panda": [295, 1219], "to_struct": [295, 601], "unnest": [295, 357, 549, 559, 601, 602, 623, 624, 644, 745, 853, 913, 1061, 1086, 1095, 1164, 1165, 1219], "unstack": 295, "with_columns_seq": [295, 853], "write_avro": 295, "write_databas": 295, "write_delta": 295, "write_excel": 295, "write_ipc_stream": 295, "write_json": 295, "write_parquet": 295, "cum_prod": [302, 354, 745, 910, 1219], "ghi": [302, 601, 745, 856, 1142], "94": [303, 745], "to_uppercas": [304, 532, 602, 745], "confus": [305, 450, 452, 617, 745], "kleen": [305, 307, 663, 665, 745, 860, 861, 1219], "bitwis": [306, 540, 662, 663, 664, 665, 666, 745], "upcast": [308, 745], "skip_nul": [309, 509, 745, 863, 1068, 1219], "pass_nam": [309, 509, 745], "mapelementsstrategi": [309, 509, 745], "thread_loc": [309, 509, 745], "map_el": [309, 507, 662, 745, 863, 1219], "unknown": [309, 509, 600, 707, 745, 1141], "stage": [309, 745], "code": [309, 328, 330, 331, 332, 509, 577, 745, 775, 793, 853, 1116, 1219], "gil": [309, 509, 745], "invers": [311, 312, 313, 314, 315, 316, 745, 864, 865, 866, 867, 868, 869, 1219], "cosin": [311, 312, 342, 343, 507, 745, 864, 865, 901, 902, 1219], "570796": [311, 313, 745, 864, 866, 1219], "hyperbol": [312, 314, 316, 343, 584, 652, 745, 865, 867, 869, 902, 1125, 1194, 1219], "sine": [313, 314, 507, 583, 584, 745, 866, 867, 1124, 1125, 1219], "881374": [314, 745, 867, 1219], "tangent": [315, 316, 651, 652, 745, 868, 869, 1193, 1194, 1219], "785398": [315, 670, 671, 745, 868, 1219], "arg_wher": [320, 745], "i8": [325, 369, 373, 381, 383, 389, 390, 393, 407, 408, 497, 580, 718, 721, 736, 745, 878, 915, 926, 930, 942, 944, 951, 954, 968, 969, 1060, 1094, 1206, 1219], "seen": [327, 428, 745], "substr": [328, 331, 332, 592, 598, 615, 616, 622, 623, 624, 625, 856, 880, 883, 884, 1133, 1139, 1156, 1157, 1163, 1164, 1165, 1166], "ends_with": [328, 332, 592, 625, 856, 1166], "yellow": [328, 330, 331, 332], "x00": [328, 330, 331, 332], "xff": [328, 330, 331, 332], "contains_with_lit": 328, "contains_with_expr": 328, "transferencod": [329, 330, 596, 597, 881, 882, 1137, 1138], "hex": [329, 330, 596, 597, 636, 881, 882, 1137, 1138, 1177], "base64": [329, 330, 596, 597, 881, 882, 1137, 1138], "code_encoded_hex": 330, "000000": 330, "ffff00": 330, "0000ff": 330, "anywher": [331, 332, 632, 633, 634, 1173, 1174, 1175], "ends_with_lit": 331, "ends_with_expr": 331, "starts_with_lit": 332, "starts_with_expr": 332, "complex": [333, 356, 654, 745, 885, 912, 1203, 1219], "frac": [333, 414, 415, 416, 585, 654, 745, 885, 976, 977, 978, 1126, 1203, 1219], "to_fram": [335, 372, 392, 397, 406, 632, 913, 1086, 1111, 1114, 1164, 1165, 1173, 1219], "259921": [337, 745, 893, 1219], "587401": [337, 745], "numericliter": [339, 340, 341, 745, 897, 898, 899, 1219], "temporalliter": [339, 340, 341, 745, 897, 898, 899, 1219], "outsid": [339, 745, 897, 1219], "clip": [340, 341, 745, 898, 899, 1219], "543081": [343, 745, 902, 1219], "cotang": [344, 745, 903, 1219], "cumul": [346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 680, 681, 682, 683, 684, 685, 686, 687, 745, 904, 905, 906, 907, 908, 909, 910, 911, 1219], "cum_count_revers": [346, 745], "cum_max_revers": [347, 745], "cum_max_all_fil": [347, 745], "cum_min_revers": [348, 745], "cum_prod_revers": [349, 745], "cum_sum_revers": [350, 745], "value_cum_sum": [350, 745], "value_cum_sum_all_fil": [350, 745], "cum_count": [351, 745], "cum_max": [352, 745, 908, 1219], "cum_min": [353, 745, 909, 1219], "cum_sum": [355, 439, 645, 683, 686, 745, 788, 853, 911, 1020, 1219], "min_period": [356, 414, 415, 416, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 722, 723, 745, 912, 976, 977, 978, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1105, 1106, 1107, 1219], "slide": [356, 745, 912, 1219], "slot": [356, 359, 470, 745, 912, 915, 1033, 1219], "realli": [356, 593, 617, 745, 912, 1134, 1158, 1219], "visit": [356, 745, 912, 1219], "left_clos": [357, 549, 745, 913, 1086, 1219], "include_break": [357, 549, 745, 913, 1086, 1219], "bin": [357, 437, 549, 636, 662, 738, 745, 913, 994, 1086, 1177, 1213, 1219], "discret": [357, 359, 411, 437, 470, 487, 549, 745, 913, 915, 973, 994, 1033, 1050, 1086, 1219], "plu": [357, 502, 745, 913, 1065, 1086, 1219], "endpoint": [357, 549, 564, 565, 566, 567, 568, 570, 571, 572, 745, 913, 1086, 1219], "observ": [357, 414, 415, 416, 549, 745, 913, 976, 977, 978, 1086, 1219], "fall": [357, 549, 560, 745, 913, 998, 1086, 1096, 1219], "qcut": [357, 745, 913, 1219], "breakpoint": [357, 437, 549, 745, 913, 994, 1086, 1219], "brk": [357, 549, 745], "foo_bin": [357, 549, 745], "radian": [358, 670, 745], "720": [358, 551, 745], "540": [358, 551, 745], "360": [358, 551, 745], "180": [358, 551, 745], "null_behavior": [359, 470, 745, 915, 1033, 1219], "nullbehavior": [359, 470, 745, 915, 1033, 1219], "drop_nan": [362, 745, 918, 1219], "utc": [363, 366, 371, 391, 632, 634, 856, 920, 923, 928, 952, 1173, 1175], "usual": [363, 920], "vari": [363, 920, 1227], "rare": [363, 920], "countri": [363, 920], "switch": [363, 920], "samoa": [363, 920], "apia": [363, 920], "did": [363, 920], "2011": [363, 920], "dst_offset": [363, 920], "2012": [363, 920], "replace_time_zon": [363, 371, 924, 925, 957], "pacif": [363, 920], "11h": [363, 920], "13h": [363, 920], "lose": [364, 921], "time_unit_m": [364, 921], "time_unit_n": [364, 921], "naiv": [365, 922, 1175], "compon": [365, 393, 632, 634, 694, 922, 954, 1173, 1175], "resolv": 365, "tm": [365, 856], "456000": [365, 922], "101000": 365, "d1": 365, "d2": 365, "d3": 365, "europ": [366, 371, 391, 923, 928, 952], "london": [366, 371, 391, 923, 928, 952], "gmt": [366, 371, 391, 923, 928, 952], "bst": [366, 371, 391, 923, 928, 952], "weekdai": [369, 389], "ordinal_dai": [369, 408], "day_of_month": [369, 389, 408], "day_of_year": [369, 389, 408], "356": [369, 389, 408], "357": [369, 389, 408], "358": [369, 389, 408], "359": [369, 389, 408], "total_dai": [370, 927], "base_utc_offset": [371, 928], "0m": [371, 928], "epochtimeunit": [372, 700, 929], "unix": [372, 700, 929], "epoch_n": [372, 929], "epoch_": [372, 929], "978307200000000": [372, 397, 929, 958], "978307200": [372, 929], "978393600000000": [372, 397, 929, 958], "978393600": [372, 929], "978480000000000": [372, 397, 929, 958], "978480000": [372, 929], "2010": [373, 381, 856], "total_hour": [374, 931], "leap": [375, 388, 932, 949], "2002": [375, 388, 932, 949, 971], "iso": [376, 407, 408, 933, 968, 969], "1977": [376, 410], "1978": [376, 410], "1979": [376, 410], "calendar_year": [376, 410], "1976": [376, 410], "1_001": [377, 401, 402, 404], "002": [377, 401, 402, 404, 694, 962, 963, 965], "003": [377, 401, 402, 404], "3000": 377, "997": [377, 401, 402, 404], "997000": 377, "998": [377, 401, 402, 404], "998000": 377, "999": [377, 401, 402, 404, 856, 1227], "999000": [377, 856], "total_microsecond": [378, 938], "total_millisecond": [380, 940], "total_minut": [382, 943], "think": [384, 385, 945, 946], "vectoris": [384, 385, 945, 946], "tseri": [384, 385, 945, 946], "monthend": [384, 945], "rollforward": [384, 945], "monthbegin": [385, 946], "rollback": [385, 946], "total_nanosecond": [387, 948], "minu": [388, 949], "dictat": [388, 745, 949], "2005": [388, 949], "date_plus_1i": [388, 949], "1y2mo": [388, 949], "date_min": 388, "1998": [388, 949], "1999": [388, 856, 949], "2003": [388, 700, 949], "2004": [388, 949], "2006": [388, 949], "new_dat": 388, "ordin": [389, 552, 745, 950, 1088, 1219], "366": [389, 950], "use_earliest": [391, 406, 632, 634, 691, 952, 967, 1173, 1175], "ambigu": [391, 392, 406, 632, 634, 691, 952, 953, 967, 1173, 1175], "convert_time_zon": [391, 952], "london_timezon": [391, 952], "amsterdam": [391, 952], "london_to_amsterdam": [391, 952], "cet": [391, 952], "cest": [391, 952], "ts_local": [391, 952], "brussel": [391, 952], "half": [392, 414, 415, 416, 745, 953, 976, 977, 978, 1219], "localis": [392, 406, 953, 967], "dst": [392, 406, 953, 967], "cst": [392, 406, 953, 967], "cdt": [392, 406, 953, 967], "225": [392, 406], "10m": [392, 406, 953, 967], "milli": [393, 954], "micro": [393, 954], "456789": [393, 856, 954], "111110": [393, 954], "765431": [393, 954], "11111": [393, 954], "total_second": [394, 955], "to_str": [395, 956], "datetime_str": [395, 398], "timestamp_n": [397, 958], "timestamp_m": 397, "978307200000": 397, "978393600000": 397, "978480000000": 397, "strftime": [398, 959], "days_diff": 399, "hours_diff": 400, "microseconds_diff": 401, "milliseconds_diff": 402, "minutes_diff": 403, "1440": [403, 964], "nanoseconds_diff": 404, "seconds_diff": 405, "safe": [406, 554, 745, 953, 967, 1090, 1175, 1200, 1219], "truncate_str": 406, "truncate_td": 406, "53": [407, 968], "time_unit_u": 409, "32971": [409, 970], "32974": [409, 970], "32976": [409, 970], "iso_year": 410, "pk": [411, 745, 973, 1219], "probabl": [411, 549, 745, 973, 1086, 1219], "459148": [411, 745], "754888": [411, 745], "eq": [413, 745, 1219], "span": [414, 415, 416, 745, 976, 977, 978, 1219], "half_lif": [414, 415, 416, 745, 976, 977, 978, 1219], "adjust": [414, 415, 416, 585, 745, 976, 977, 978, 1126, 1219], "exponenti": [414, 415, 416, 418, 546, 745, 976, 977, 978, 979, 1219], "weight": [414, 415, 416, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 585, 745, 976, 977, 978, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1105, 1106, 1107, 1126, 1219], "decai": [414, 415, 416, 745, 976, 977, 978, 1219], "term": [414, 415, 416, 745, 976, 977, 978, 1219], "mass": [414, 415, 416, 745, 976, 977, 978, 1219], "gamma": [414, 415, 416, 745, 976, 977, 978, 1219], "foral": [414, 415, 416, 745, 976, 977, 978, 1219], "geq": [414, 415, 416, 745, 976, 977, 978, 1219], "theta": [414, 415, 416, 745, 976, 977, 978, 1219], "life": [414, 415, 416, 745, 976, 977, 978, 1219], "exp": [414, 415, 416, 745, 976, 977, 978, 1219], "ln": [414, 415, 416, 745, 976, 977, 978, 1219], "smooth": [414, 415, 416, 745, 976, 977, 978, 1219], "factor": [414, 415, 416, 653, 745, 976, 977, 978, 1202, 1219], "leq": [414, 415, 416, 745, 976, 977, 978, 1219], "imbal": [414, 415, 416, 745, 976, 977, 978, 1219], "ew": [414, 415, 416, 745, 976, 977, 978, 1219], "w_i": [414, 415, 416, 745, 976, 977, 978, 1219], "recurs": [414, 415, 416, 745, 976, 977, 978, 1219], "y_t": [414, 415, 416, 745, 976, 977, 978, 1219], "y_": [414, 415, 416, 745, 976, 977, 978, 1219], "x_t": [414, 415, 416, 745, 976, 977, 978, 1219], "x_2": [414, 415, 416, 745, 976, 977, 978, 1219], "428571": [414, 745, 976, 1219], "bia": [415, 416, 457, 569, 585, 745, 977, 978, 1021, 1104, 1126, 1219], "unbias": [415, 416, 745, 977, 978, 1219], "963624": [415, 745, 977, 1219], "928571": [416, 745, 978, 1219], "wildcard": [417, 680, 681, 684, 685, 698, 720, 745], "regex": [417, 515, 592, 594, 595, 598, 600, 601, 602, 615, 616, 625, 696, 745, 856, 1133, 1135, 1136, 1139, 1141, 1142, 1143, 1156, 1157, 1166], "aa": [417, 592, 696, 745, 1133], "ba": [417, 625, 696, 745, 856], "cc": [417, 696, 745], "718282": [418, 745], "389056": [418, 745], "59815": [418, 745], "expand": [419, 514, 515, 555, 745, 856, 980, 1219], "pythonliter": [420, 745, 982, 1069, 1072, 1219], "extrem": [420, 563, 745, 982, 1098, 1219], "group_col": [423, 661, 745], "g1": [423, 661, 745], "g2": [423, 661, 745], "lt": [423, 661, 745, 1219], "gte": [423, 661, 745], "exprlistnamespac": [425, 745], "divis": [427, 655, 745], "truediv": [427, 745], "9774092659964970114": [435, 745], "13614470193936745724": [435, 745], "1101441246220388612": [435, 745], "11638928888656214026": [435, 745], "13382926553367784577": [435, 745], "bin_count": [437, 745, 994, 1219], "include_categori": [437, 745, 994, 1219], "include_breakpoint": [437, 745, 994, 1219], "occurr": [437, 444, 445, 448, 449, 659, 745, 994, 1003, 1004, 1009, 1010, 1207, 1219], "interpolationmethod": [440, 745, 997, 1219], "regrid": [440, 745], "grid": [440, 745], "df_original_grid": [440, 745], "grid_point": [440, 745], "df_new_grid": [440, 745], "conflat": [441, 745], "finit": [443, 655, 677, 745, 1002, 1219], "is_first_distinct": [444, 745, 1003, 1219], "optional_memb": [446, 745, 1006, 1219], "infinit": [447, 655, 745, 1007, 1219], "is_last_distinct": [448, 745, 1009, 1219], "_isnan": [450, 745], "b_isnan": [450, 745], "negat": [451, 538, 745, 1080, 1219], "_is_not_nan": [452, 745], "b_is_not_nan": [452, 745], "_not_nul": [453, 745], "a_not_nul": [453, 745], "b_not_nul": [453, 745], "_isnul": [454, 745], "a_isnul": [454, 745], "b_isnul": [454, 745], "chain": [456, 528, 530, 531, 532, 533, 547, 646, 735, 745], "undo": [456, 521, 528, 530, 531, 547, 646, 745], "fisher": [457, 585, 745, 1021, 1126, 1219], "fourth": [457, 745, 1021, 1219], "subtract": [457, 645, 745, 1021, 1219], "distribut": [457, 585, 745, 1021, 1126, 1219], "elimin": [457, 745, 1021, 1219], "bias": [457, 585, 745, 1021, 1126, 1219], "scipi": [457, 585, 745, 1021, 1126, 1219], "stat": [457, 585, 745, 1021, 1126, 1219], "153061": [457, 745], "sublist": [464, 465, 467, 470, 474, 475, 476, 477, 478, 479, 487, 492, 495, 496, 498, 1006, 1027, 1028, 1030, 1033, 1037, 1038, 1039, 1040, 1041, 1042, 1050, 1055, 1058, 1059, 1061, 1219], "membership": [467, 1030], "number_of_two": 469, "blindli": [472, 1035], "worth": [472, 1035], "enough": [472, 585, 745, 1035, 1126, 1219], "rank": [472, 677, 695, 745, 1035, 1219], "concat_list": [472, 695, 1035], "exprnamespac": 473, "flat": [473, 557, 745, 1036, 1093, 1219], "null_on_oob": [475, 496, 1038, 1059], "cheaper": [475, 496, 1038, 1059], "x_y": 478, "symmetr": [489, 1052], "sdiff": 489, "taken": [492, 621, 1055, 1162], "n_field_strategi": [498, 1061], "tostructstrategi": [498, 1061], "first_non_nul": [498, 1061], "max_width": [498, 1061], "field_0": [498, 1061], "field_1": [498, 1061], "field_n": [498, 1061], "pre": [498, 509, 549, 718, 721, 736, 745, 1086, 1219], "obtain": 498, "ok": 498, "longest": 498, "n0": 498, "n1": 498, "logarithm": [500, 501, 502, 745, 1063, 1064, 1065, 1219], "584963": [500, 745], "30103": [501, 745], "60206": [501, 745], "natur": [502, 745, 1065, 1219], "693147": [502, 745], "098612": [502, 745], "386294": [502, 745], "lowest": [503, 745], "9223372036854775808": [503, 745], "agg_list": [505, 507, 745], "map_batch": [505, 708, 745, 795, 853], "keep_nam": [506, 745], "a_revers": [506, 529, 531, 558, 646, 745], "b_revers": [506, 529, 531, 558, 646, 745], "rstrip": [506, 529, 745], "_revers": [506, 529, 531, 558, 646, 745], "whole": [507, 587, 588, 600, 745, 841, 853, 1141], "elementwis": [507, 562, 563, 564, 565, 567, 571, 745, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1105, 1106, 1107, 1219], "third": [507, 745], "parti": [507, 745], "book": [507, 745], "bug": [507, 509, 745, 795, 796, 836, 841, 853, 1068, 1219], "argmax": [507, 745], "remap": [508, 745, 1067, 1219], "lookup": [508, 741, 745, 1067, 1219], "discourag": [509, 745], "loop": [509, 745], "a_times_2": [509, 745], "tip": [509, 745], "again": [509, 745], "behav": [509, 628, 629, 745], "exprmetanamespac": [513, 516], "foo_bar2": [513, 516], "raise_if_undetermin": 517, "computeerror": [517, 614, 636, 757, 1155, 1177], "e_filt": [517, 519], "e_sum_ov": [517, 519], "e_sum_slic": [517, 519], "tree": 520, "modulu": [524, 745], "xlog2": [526, 546, 745], "reverse_": [530, 547, 745], "reverse_a": [530, 547, 745], "reverse_b": [530, 547, 745], "lowercas": [532, 637, 1178], "uppercas": [533, 640, 1181], "to_lowercas": 533, "poison": [534, 535, 745, 1077, 1078, 1219], "nanmax": [534, 535, 745, 1077, 1078, 1219], "inequ": [536, 745], "ne": [537, 745, 1219], "more_expr": [541, 672, 674, 675, 676, 745], "mapping_strategi": [541, 745], "windowmappingstrategi": [541, 745], "group_to_row": [541, 745], "outcom": [541, 745], "group_dtyp": [541, 745], "warn": [541, 564, 565, 566, 567, 568, 570, 571, 572, 745], "flatten": [541, 745], "_max": [541, 745], "c_max": [541, 745], "_min": [541, 745], "c_min": [541, 745], "percent": [542, 745, 1082, 1219], "090909": [542, 745], "peak": [543, 544, 745, 1083, 1084, 1219], "extract_numb": [545, 745], "digit": [545, 573, 574, 601, 745, 1108, 1109, 1136, 1142, 1219, 1227], "scale_negative_even": [545, 745], "expon": [546, 745, 1219], "allow_dupl": [549, 745, 1086, 1219], "duplicateerror": [549, 745, 757, 1086, 1219], "happen": [549, 745, 1086, 1219], "cut": [549, 745, 1086, 1219], "566371": [551, 745], "424778": [551, 745], "283185": [551, 745], "141593": [551, 745, 864, 1219], "rankmethod": [552, 745, 1088, 1219], "ti": [552, 745, 1088, 1219], "competit": [552, 745, 1088, 1219], "highest": [552, 658, 677, 745, 853, 1088, 1219], "immedi": [552, 669, 673, 689, 690, 692, 693, 704, 705, 718, 721, 727, 732, 733, 736, 745, 1088, 1219], "nodefault": [556, 745, 1092, 1219], "_nodefault": [556, 745, 1092, 1219], "no_default": [556, 745, 1092, 1219], "200": [556, 745, 1092, 1099, 1100, 1102, 1219], "fruits_revers": [558, 745], "cars_revers": [558, 745], "rle": [560, 745, 1096, 1219], "themselv": [560, 745, 1096, 1219], "a_r": [560, 745], "ab_r": [560, 745], "window_s": [562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 722, 723, 745, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1219], "rolling_map": [562, 745, 1097, 1219], "multipli": [562, 563, 564, 565, 567, 570, 571, 572, 745, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1105, 1106, 1107, 1219], "rolling_sum": [563, 745, 1098, 1219], "nansum": [563, 745, 1098, 1219], "warn_if_unsort": [564, 565, 566, 567, 568, 570, 571, 572, 745], "travers": [564, 565, 567, 571, 745, 1099, 1100, 1102, 1105, 1106, 1107, 1219], "vector": [564, 565, 567, 571, 745, 1099, 1100, 1102, 1105, 1106, 1107, 1219], "5h": [564, 565, 566, 567, 568, 570, 571, 572, 745], "df_tempor": [564, 565, 567, 570, 571, 572, 745], "closur": [564, 565, 570, 571, 572, 745], "rolling_row_max": [564, 745], "2h": [564, 565, 567, 570, 571, 572, 745], "rolling_row_mean": [565, 745], "rolling_row_min": [567, 745], "625": [568, 745], "skew": [569, 745, 1104, 1219], "381802": [569, 745, 1104, 1219], "47033": [569, 745, 1104, 1219], "38180177416060584": [569, 745, 1104, 1219], "47033046033698594": [569, 745, 1104, 1219], "433013": [570, 745, 820, 853], "rolling_row_std": [570, 745], "rolling_row_sum": [571, 745], "39": [571, 700, 745], "63": [571, 745], "69": [571, 745], "1875": [572, 745, 828, 853], "rolling_row_var": [572, 745], "figur": [574, 745, 817, 853, 1109, 1219], "01234": [574, 745, 1109, 1219], "012": [574, 745, 1109, 1219], "1200": [574, 745, 1109, 1219], "searchsortedsid": [576, 745, 1112, 1219], "leftmost": [576, 745, 1112, 1219], "rightmost": [576, 745, 1112, 1219], "six": [576, 745], "extrema": [580, 745, 1120, 1219], "112": [580, 745, 1227], "129": [580, 745], "8589934592": [580, 745], "1073741824": [580, 745], "175201": [584, 745, 1125, 1219], "unimod": [585, 745, 1126, 1219], "skewtest": [585, 745, 1126, 1219], "speak": [585, 745, 1126, 1219], "g_1": [585, 745, 1126, 1219], "m_3": [585, 745, 1126, 1219], "m_2": [585, 745, 1126, 1219], "m_i": [585, 745, 1126, 1219], "sum_": [585, 745, 1126, 1219], "texttt": [585, 745, 1126, 1219], "k_3": [585, 745, 1126, 1219], "k_2": [585, 745, 1126, 1219], "sqrt": [585, 670, 671, 745, 1126, 1219], "343622": [585, 745], "value1": [588, 745], "value2": [588, 745], "attain": [588, 745], "414214": [589, 745, 1129, 1219], "sensit": [592, 601, 615, 1133, 1142, 1156], "ilmsuxu": [592, 600, 601, 615, 1133, 1141, 1142, 1156], "default_match": 592, "insensitive_match": 592, "crab": [592, 1133], "dog": [592, 637, 640, 676, 1133, 1178, 1181], "rab": [592, 618, 1133, 1159], "ascii_case_insensit": [593, 617, 1134, 1158], "aho": [593, 617, 1134, 1158], "corasick": [593, 617, 1134, 1158], "insensit": [593, 601, 615, 617, 856, 1133, 1134, 1142, 1156, 1158], "set_fmt_str_length": [593, 617, 1134, 1158], "lyric": [593, 617, 1134, 1158], "everybodi": [593, 617, 1134, 1158], "tell": [593, 617, 1134, 1158], "me": [593, 617, 1134, 1158], "feel": [593, 617, 1134, 1158], "love": [593, 617, 1134, 1158], "tonight": [593, 617, 1134, 1158], "success": [594, 595, 601, 1135, 1136, 1142], "overlap": [594, 595, 601, 1135, 1136, 1142], "bla": [595, 601, 1136, 1142], "asd": [595, 601, 1136, 1142], "678": [595, 601, 1136, 1142], "910t": [595, 601, 1136, 1142], "count_digit": 595, "dbc": [595, 1136], "3xy": [595, 1136], "1zy3": [595, 1136], "strings_hex": 597, "666f6f": [597, 1138], "626172": [597, 1138], "mango": [598, 625, 1139, 1166], "has_suffix": 598, "le": [598, 745, 1219], "nu": 598, "group_index": [600, 1141], "captur": [600, 602, 1141, 1143], "nthose": [600, 1141], "nodd": [600, 1141], "nthe": [600, 1141], "odd": 600, "vote": [600, 602, 1141, 1143], "ballon_dor": [600, 602, 1141, 1143], "404": [600, 602, 1141, 1143], "ref": [600, 602, 1141, 1143], "candid": [600, 602, 1141, 1143], "messi": [600, 602, 1141, 1143], "ronaldo": [600, 1141], "haystack": [601, 1142], "email": [601, 1142], "real": [601, 1142], "some_account": [601, 1142], "somewher": [601, 1142], "net": [601, 1142], "jkl": [601, 1142], "uvw": [601, 1142], "co": [601, 745, 1142, 1219], "uk": [601, 1142], "address": 601, "xi": [601, 1142], "quantifi": [601, 1142], "email_part": [601, 1142], "extracted_nr": 601, "910": [601, 1142], "unnam": [602, 1143], "weghorst": [602, 1143], "candi": 602, "json_path_match": [603, 1144], "jsonpath": [603, 605, 1144, 1146], "json_decod": [604, 1145], "json_path": [605, 1146], "json_val": [605, 1146], "len_char": [606, 611, 1147, 1152], "_o": [606, 607, 1147, 1148], "caf\u00e9": [606, 607, 1147, 1148], "345": [606, 607, 1147, 1148], "\u6771\u4eac": [606, 607, 1147, 1148], "n_byte": [606, 607], "n_char": [606, 607], "fill_char": [609, 612, 613, 619, 1150, 1153, 1154, 1160], "justifi": [609, 619, 1150, 1160], "pad_end": [609, 613, 1150, 1154], "strip_chars_start": [610, 628, 630, 1151], "pad": [612, 613, 641, 1153, 1154, 1182], "reach": [612, 613, 641, 1153, 1154, 1182], "pad_start": [612, 619, 641, 1153, 1160, 1182], "cow": [612, 613, 1153, 1154], "monkei": [612, 613, 1153, 1154], "hippopotamu": [612, 613, 1153, 1154], "zfill": [613, 662, 745, 1154], "radix": [614, 636, 1155, 1177], "parseerror": [614, 636, 1155, 1177], "becom": 614, "to_integ": [614, 1155], "silent": [614, 636, 1155, 1177], "replace_al": [615, 1156], "citi": 615, "philadelphia": 615, "season": 615, "spring": 615, "summer": 615, "autumn": 615, "winter": 615, "weather": [615, 1156], "raini": [615, 1156], "sunni": [615, 1156], "cloudi": 615, "snowi": 615, "foggi": [615, 1156], "123abc": [615, 1156], "abc456": [615, 1156], "abcabc": [616, 1157], "123a123": [616, 1157], "bc": [616, 728, 1157], "replace_with": [617, 1158], "broadcast": [617, 856, 1158], "removes_pronoun": 617, "man": [618, 1159], "ana": [618, 1159], "oof": [618, 1159], "anan": [618, 1159], "am": [618, 1159], "strip_chars_end": [620, 629, 631, 1161], "subslic": [621, 1162], "pear": [621, 1162], "papaya": [621, 1162], "dragonfruit": [621, 1162], "s_slice": 621, "ear": [621, 1162], "aya": [621, 1162], "uit": [621, 1162], "ya": [621, 1162], "onf": [621, 1162], "foo_bar_baz": 622, "split_inclus": 622, "foo_": [622, 699], "bar_": 622, "a_1": [623, 1164, 1196, 1219], "d_4": [623, 1164], "rename_field": [623, 624, 913, 1086, 1164, 1165, 1219], "first_part": [623, 624, 1164, 1165], "second_part": [623, 624, 1164, 1165], "remaind": [624, 1165], "app": [625, 1166], "has_prefix": 625, "strip_char": [626, 1167], "nworld": 627, "foo_strip": 627, "ow": 627, "hell": [627, 1168], "rld": [627, 629, 1170], "word": [628, 629], "strip_suffix": [628, 630], "foo_strip_end": 628, "oldw": 628, "he": 628, "abcdeff": 628, "fed": 628, "strip_prefix": [629, 631], "tworld": [629, 1168, 1170], "foo_strip_start": 629, "wod": [629, 1170], "aabcdef": 629, "cba": 629, "foobar": [630, 631, 1171, 1172], "foofoobar": [630, 1171], "foobarbar": [631, 1172], "polarstemporaltyp": [632, 1173], "penalti": [632, 633, 634, 1173, 1174, 1175], "clean": [632, 633, 634, 1173, 1174, 1175], "beforehand": [632, 633, 634, 1173, 1174, 1175], "certainli": [632, 633, 634, 1173, 1174, 1175], "3f": [632, 634, 1173, 1175], "00z": [632, 634, 1173, 1175], "sun": [632, 1173], "jul": [632, 1173], "34": [632, 1173], "inference_length": [635, 1176], "3420": [635, 1176], "120134": [635, 1176], "3212": [635, 1176], "90": [635, 1176], "143": [635, 1176, 1227], "numbers_decim": 635, "110": [636, 1177], "fa1e": [636, 1177], "ff00": [636, 1177], "cafe": [636, 1177], "64030": [636, 1177], "65280": [636, 1177], "51966": [636, 1177], "variant": [637, 639, 640, 1008, 1219], "foo_low": 637, "titlecas": [639, 1180], "sing": [639, 1180], "welcom": [639, 1180], "THERE": [639, 1180], "NO": [639, 856, 1180], "foo_titl": 639, "There": [639, 1180], "foo_upp": 640, "999999": [641, 691, 731, 732, 733, 856, 1182], "0123": [641, 1182], "cd": [642, 644], "struct_col": [642, 644], "www": 644, "xxx": 644, "yyi": 644, "zzz": 644, "obvious": 644, "structfieldnotfounderror": [644, 757], "761594": [652, 745, 1194, 1219], "replic": [653, 745, 1202, 1219], "vals_phys": [653, 745], "floordiv": [655, 745], "ieee": [655, 745], "754": [655, 745], "mathemat": [655, 695, 745], "undefin": [655, 745], "On": [655, 745], "operand": [655, 745], "infin": [655, 745], "value_count": [657, 745, 1219], "9223372036854775807": [658, 745], "binary_str": [662, 745], "250": [662, 745, 1100, 1219, 1227], "bin_x": [662, 745], "bin_i": [662, 745], "xor_xi": [662, 745], "bin_xor_xi": [662, 745], "00001010": [662, 745], "00001011": [662, 745], "00001000": [662, 745], "00000010": [662, 745], "11111010": [662, 745], "00000011": [662, 745], "249": [662, 745], "11111001": [662, 745], "01000010": [662, 745], "00000100": [662, 745], "70": [662, 745], "01000110": [662, 745], "AND": [663, 664, 856, 1200, 1219], "OR": [665, 666, 778, 853, 856], "any_horizont": 665, "returns_scalar": [667, 710, 745], "polarsintegertyp": [669, 704, 705], "arctan": [670, 671, 745, 1219], "angl": [670, 671], "plane": [670, 671], "rai": [670, 671], "tworoottwo": [670, 671], "arctan2d": 670, "atan2d": [670, 671], "atan2": [670, 671], "135": [670, 671], "356194": [670, 671], "arctan2": 671, "arg_tru": [673, 745, 1219], "mimic": 675, "a_lag_": 675, "a_rol": 675, "swim": 676, "walk": 676, "full_sent": 676, "correlationmethod": 677, "propagate_nan": 677, "spearman": 677, "544705": 677, "covari": [679, 723, 745], "acc": [680, 681, 684, 685, 698, 720], "include_init": [680, 684], "accumul": [680, 681, 684, 685, 698, 720], "fn": [680, 681, 684, 685, 698, 720], "new_valu": [680, 681, 684, 685, 698, 720], "cum_reduc": 680, "cumsum_horizont": 682, "cum_sum_horizont": 687, "granular": 689, "finer": 689, "permut": 689, "1985": [689, 692], "america": 692, "new_york": 692, "est": 692, "contrast": 694, "offset_bi": 694, "sometim": [694, 744], "tbl_width_char": 694, "120": 694, "add_week": 694, "add_dai": 694, "add_second": 694, "add_milli": 694, "add_hour": 694, "add_calendar_dai": 694, "add_calendar_month": 694, "mo": 694, "add_calendar_year": 694, "2024": [694, 856], "a_b_doubl": 695, "f_string": 699, "placehold": 699, "hello_": 699, "_world": 699, "_bar_": 699, "foo_a_bar_1": 699, "foo_b_bar_2": 699, "foo_c_bar_3": 699, "epoch": 700, "timestep": 700, "1666683077": 700, "1666683099": 700, "12345": [700, 894, 987, 1108, 1219], "12346": 700, "agg_group": [701, 745], "allow_object": 707, "valueexcept": 707, "test_func": 709, "list_of_seri": 710, "my_custom_aggreg": 710, "understood": 710, "power": [725, 1219], "a_a": 725, "a_txt": 725, "605551": 726, "605551275463989": 726, "my_struct": 727, "thens": 735, "elif": 735, "pick": 735, "met": 735, "implicitli": 735, "own": [735, 1227], "isn": 735, "arr": [737, 1200, 1211, 1219], "technic": 741, "further": [741, 1201, 1219], "columnfactori": 741, "more_nam": 741, "__call__": 741, "helper": 741, "__getattr__": 741, "idiomat": [741, 841], "quick": [741, 914, 1219, 1227], "prototyp": 741, "keystrok": 741, "drawback": 741, "readabl": 741, "modul": [744, 856, 1227], "and_": 745, "arcco": [745, 1219], "arccosh": [745, 1219], "arcsin": [745, 1219], "arcsinh": [745, 1219], "arctanh": [745, 1219], "arg_max": [745, 1219], "arg_min": [745, 1219], "arg_sort": [745, 1219], "arg_uniqu": [745, 1219], "backward_fil": 745, "cbrt": [745, 1219], "clip_max": [745, 1219], "clip_min": [745, 1219], "cosh": [745, 1219], "cot": [745, 1219], "cumcount": 745, "cummax": [745, 1219], "cummin": [745, 1219], "cumprod": [745, 1219], "cumsum": [745, 1219], "cumulative_ev": [745, 1219], "entropi": [745, 1219], "eq_miss": [745, 1219], "ewm_mean": [745, 1219], "ewm_std": [745, 1219], "ewm_var": [745, 1219], "extend_const": [745, 1219], "from_json": 745, "ge": [745, 1219], "gt": [745, 1219], "hist": [745, 1219], "implod": [745, 1219], "inspect": [745, 853], "is_between": [745, 1219], "is_finit": [745, 1219], "is_first": [745, 1219], "is_infinit": [745, 1219], "is_last": [745, 1219], "is_nan": [745, 1219], "is_not": 745, "is_not_nan": [745, 1219], "is_not_nul": [745, 1219], "kurtosi": [745, 1219], "log10": [745, 1219], "log1p": [745, 1219], "map_alia": 745, "map_dict": [745, 1219], "mod": 745, "mul": 745, "nan_max": [745, 1219], "nan_min": [745, 1219], "ne_miss": [745, 1219], "or_": 745, "pct_chang": [745, 1219], "peak_max": [745, 1219], "peak_min": [745, 1219], "pow": [745, 1219], "register_plugin": 745, "lib": [745, 1195, 1219], "is_elementwis": 745, "input_wildcard_expans": 745, "cast_to_supertyp": 745, "pass_name_to_appli": 745, "changes_length": 745, "plugin": 745, "highli": 745, "unsaf": 745, "unstabl": 745, "serializ": 745, "ran": 745, "reinterpret": [745, 1219], "repeat_bi": 745, "rle_id": [745, 1219], "rolling_appli": [745, 1219], "rolling_max": [745, 1219], "rolling_mean": [745, 1219], "rolling_median": [745, 1219], "rolling_min": [745, 1219], "rolling_quantil": [745, 1219], "rolling_skew": [745, 1219], "rolling_std": [745, 1219], "rolling_var": [745, 1219], "round_sig_fig": [745, 1219], "search_sort": [745, 1219], "shrink_dtyp": [745, 1219], "sin": [745, 1219], "sinh": [745, 1219], "sort_bi": 745, "tan": [745, 1219], "to_phys": [745, 891, 1219], "unique_count": [745, 1219], "xor": 745, "expos": 757, "miscellan": 757, "arrowerror": 757, "columnnotfounderror": 757, "invalidoperationerror": 757, "polarspanicerror": 757, "schemaerror": 757, "schemafieldnotfounderror": 757, "shapeerror": 757, "parametr": 757, "build_info": 757, "get_index_typ": 757, "show_vers": 757, "threadpool_s": 757, "sqlcontext": [757, 1226], "hit": [762, 853], "node": [762, 766, 788, 795, 796, 800, 805, 807, 853], "_eager": [766, 853], "explain": [766, 853], "purpos": [766, 775, 853], "set_streaming_chunk_s": [766, 853], "collect_all_async": [767, 853], "async": [767, 853], "stringio": [769, 813, 853], "snippet": [771, 853], "Be": [775, 853], "fewer": [775, 853], "suscept": [775, 853], "lazygroupbi": [781, 782, 783, 784, 785, 786, 809, 853], "other_lf": [790, 853], "validate_output_schema": [795, 796, 853], "streamabl": [795, 796, 800, 853], "past": [795, 796, 853], "paramount": [795, 796, 853], "elig": [795, 796, 853], "invari": [796, 853], "upheld": [796, 853], "100_000": [796, 853], "200000": [796, 853], "199998": [796, 853], "199996": [796, 853], "199994": [796, 853], "199992": [796, 853], "show_plot": [805, 853], "truncate_nod": [805, 853], "figsiz": [805, 817, 853], "gantt": [805, 853], "plot": [805, 817, 853], "group_by_partit": [805, 853], "470": [805, 853], "475": [805, 853], "1964": [805, 853], "swap": [807, 853], "dynamic_group_bi": [809, 853], "deseri": [813, 853], "dataframescan": [813, 853], "output_schema": [813, 853], "run_parallel": [813, 853], "duplicate_check": [813, 853], "later": [813, 853], "output_path": [817, 853], "raw_output": [817, 853], "290994": [820, 853], "118034": [820, 853], "implicit": [827, 853], "new_lf": [827, 853], "extern": [832, 853], "lf_other": [832, 853], "afoo": [832, 853], "cfoo": [832, 853], "train_lf": [832, 853], "feature_0": [832, 853], "feature_1": [832, 853], "test_lf": [832, 853], "_train": [832, 853], "feature_0_train": [832, 853], "opaqu": 841, "my_column": 841, "struct_seri": 841, "lf5": 853, "lf6": 853, "sink_csv": 853, "sink_ipc": 853, "sink_ndjson": 853, "sink_json": 853, "sink_parquet": 853, "with_context": 853, "intuit": 856, "emploi": 856, "complement": 856, "plenti": 856, "cde": 856, "fgg": 856, "jjk": 856, "lmn": 856, "opp": 856, "qqr": 856, "by_dtyp": 856, "as_expr": 856, "dispatch": 856, "1_234_500": 856, "5_000_555": 856, "1234500": 856, "5000555": 856, "by_nam": 856, "4_500_000": 856, "4500000": 856, "3265500": 856, "zap": 856, "2031": 856, "tstamp_tokyo": 856, "123465": 856, "tstamp_utc": 856, "2025": 856, "666000": 856, "tstamp": 856, "600000": 856, "123000": 856, "666": 856, "td1": 856, "987000": 856, "td2": 856, "td3": 856, "2m": [856, 942], "456m": 856, "7d": 856, "456789\u00b5": 856, "18d": 856, "999999\u00b5": 856, "23h": 856, "987m": 856, "14d": 856, "16h": 856, "39m": 856, "21d": 856, "456001\u00b5": 856, "expand_selector": 856, "colz": [856, 1227], "everyth": 856, "signed_integ": 856, "unsigned_integ": 856, "is_selector": 856, "obj": 856, "_selector_proxy_": 856, "include_categor": 856, "2345": 856, "3456": 856, "292432": [865, 1219], "549306": [869, 1219], "catnamespac": 887, "set_ord": 892, "56789": [894, 987, 1108, 1219], "901234": [894, 987, 1108, 1219], "1232e": [901, 903, 1219], "1656e15": [903, 1219], "break_point_label": [913, 1086, 1219], "break_point": [913, 994, 1086, 1219], "category_label": [913, 1086, 1219], "581139": [914, 1219], "arraylik": [916, 1219], "datetimenamespac": 919, "ser": [924, 925, 957], "kathmandu": [924, 925, 957], "0545": [924, 925, 957], "500m": [937, 939, 947], "500000": 937, "500000000": 947, "date_minus_1y_2mon": 949, "165": [953, 967], "round_str": 953, "round_td": 953, "timestamp_u": 958, "978307200000000000": 958, "978393600000000000": 958, "978480000000000000": 958, "005": [973, 1219], "06293300616044681": [973, 1219], "65": [973, 1219], "8568409950394724": [973, 1219], "4000000": [975, 1219], "814697265625": [975, 1219], "bitmask": [991, 1219], "absenc": [991, 1219], "presenc": [991, 1200, 1219], "confirm": [991, 1219], "10734580197236529959": [992, 1219], "3022416320763508302": [992, 1219], "13756996518000038261": [992, 1219], "is_signed_integ": [1008, 1219], "is_unsigned_integ": [1008, 1219], "listnamespac": 1024, "field_2": 1061, "n00": 1061, "n01": 1061, "n02": 1061, "2147483648": [1066, 1219], "166667": [1082, 1219], "142857": [1082, 1219], "150": [1100, 1219], "350": [1100, 1219], "450": [1100, 1219], "dev": [1105, 1219], "527525": [1105, 1219], "57": [1108, 1219, 1227], "frequent": [1111, 1114, 1219], "scatter": [1115, 1219], "2246e": [1124, 1193, 1219], "stringnamespac": 1131, "orld": 1169, "tur": 1180, "structnamespac": 1185, "6331e16": [1193, 1219], "int64arrai": [1195, 1219], "a_2": [1196, 1219], "a_3": [1196, 1219], "s_from_str_repr": [1198, 1219], "zero_copy_onli": [1200, 1219], "writabl": [1200, 1219], "immut": [1200, 1219], "127": [1206, 1219], "seriesview": [1209, 1219], "dtype_if_empti": 1219, "position": 1219, "scenario": 1219, "chunk_length": 1219, "get_chunk": 1219, "has_valid": 1219, "is_boolean": 1219, "is_float": 1219, "is_integ": 1219, "is_numer": [1219, 1227], "is_sort": 1219, "is_tempor": 1219, "is_utf8": 1219, "new_from_index": 1219, "series_equ": 1219, "set_at_idx": 1219, "two_a": 1226, "__enter__": 1226, "__exit__": 1226, "exc_typ": 1226, "baseexcept": 1226, "exc_val": 1226, "exc_tb": 1226, "tracebacktyp": 1226, "primari": 1227, "guid": 1227, "machin": 1227, "xdist": 1227, "hardwar": 1227, "setup": 1227, "sec": 1227, "numeric_dtyp": 1227, "null_probabililti": 1227, "test_numer": 1227, "col0": 1227, "col4": 1227, "29096": 1227, "485": 1227, "2147483647": 1227, "8257e14": 1227, "7508": 1227, "37338": 1227, "7264": 1227, "16996": 1227, "121": 1227, "361": 1227, "63204": 1227, "1443e235": 1227, "conform": 1227, "ascii_lett": 1227, "id_char": 1227, "alphabet": 1227, "price": 1227, "min_valu": 1227, "max_valu": 1227, "test_price_calcul": 1227, "a101": 1227, "8nin": 1227, "qhoo": 1227, "714": 1227, "544": 1227, "i0e0": 1227, "0000": 1227, "test_miscellan": 1227, "235": 1227, "87": 1227, "186": 1227, "174": 1227, "179": 1227, "213": 1227, "221": 1227, "86": 1227, "255": 1227}, "objects": {"polars": [[2, 0, 1, "", "Array"], [3, 0, 1, "", "Binary"], [4, 0, 1, "", "Boolean"], [5, 0, 1, "", "Categorical"], [46, 0, 1, "", "DataType"], [47, 0, 1, "", "Date"], [48, 0, 1, "", "Datetime"], [49, 0, 1, "", "Decimal"], [50, 0, 1, "", "Duration"], [51, 0, 1, "", "Enum"], [52, 0, 1, "", "Float32"], [53, 0, 1, "", "Float64"], [54, 0, 1, "", "Int16"], [55, 0, 1, "", "Int32"], [56, 0, 1, "", "Int64"], [57, 0, 1, "", "Int8"], [61, 0, 1, "", "List"], [62, 0, 1, "", "Null"], [63, 0, 1, "", "Object"], [1226, 0, 1, "", "SQLContext"], [70, 0, 1, "", "StringCache"], [71, 0, 1, "", "Struct"], [72, 0, 1, "", "Time"], [73, 0, 1, "", "UInt16"], [74, 0, 1, "", "UInt32"], [75, 0, 1, "", "UInt64"], [76, 0, 1, "", "UInt8"], [77, 0, 1, "", "Unknown"], [78, 0, 1, "", "Utf8"], [79, 4, 1, "", "align_frames"], [663, 4, 1, "", "all"], [664, 4, 1, "", "all_horizontal"], [665, 4, 1, "", "any"], [666, 4, 1, "", "any_horizontal"], [667, 4, 1, "", "apply"], [668, 4, 1, "", "approx_n_unique"], [669, 4, 1, "", "arange"], [670, 4, 1, "", "arctan2"], [671, 4, 1, "", "arctan2d"], [672, 4, 1, "", "arg_sort_by"], [673, 4, 1, "", "arg_where"], [84, 4, 1, "", "build_info"], [674, 4, 1, "", "coalesce"], [85, 4, 1, "", "collect_all"], [86, 4, 1, "", "collect_all_async"], [87, 4, 1, "", "concat"], [675, 4, 1, "", "concat_list"], [676, 4, 1, "", "concat_str"], [677, 4, 1, "", "corr"], [678, 4, 1, "", "count"], [679, 4, 1, "", "cov"], [680, 4, 1, "", "cum_fold"], [681, 4, 1, "", "cum_reduce"], [682, 4, 1, "", "cum_sum"], [683, 4, 1, "", "cum_sum_horizontal"], [684, 4, 1, "", "cumfold"], [685, 4, 1, "", "cumreduce"], [686, 4, 1, "", "cumsum"], [687, 4, 1, "", "cumsum_horizontal"], [688, 4, 1, "", "date"], [689, 4, 1, "", "date_range"], [690, 4, 1, "", "date_ranges"], [691, 4, 1, "", "datetime"], [692, 4, 1, "", "datetime_range"], [693, 4, 1, "", "datetime_ranges"], [88, 4, 1, "", "disable_string_cache"], [694, 4, 1, "", "duration"], [695, 4, 1, "", "element"], [89, 4, 1, "", "enable_string_cache"], [696, 4, 1, "", "exclude"], [697, 4, 1, "", "first"], [698, 4, 1, "", "fold"], [699, 4, 1, "", "format"], [104, 4, 1, "", "from_arrow"], [105, 4, 1, "", "from_dataframe"], [106, 4, 1, "", "from_dict"], [107, 4, 1, "", "from_dicts"], [700, 4, 1, "", "from_epoch"], [108, 4, 1, "", "from_numpy"], [109, 4, 1, "", "from_pandas"], [110, 4, 1, "", "from_records"], [111, 4, 1, "", "from_repr"], [112, 4, 1, "", "get_index_type"], [701, 4, 1, "", "groups"], [702, 4, 1, "", "head"], [703, 4, 1, "", "implode"], [704, 4, 1, "", "int_range"], [705, 4, 1, "", "int_ranges"], [706, 4, 1, "", "last"], [707, 4, 1, "", "lit"], [708, 4, 1, "", "map"], [709, 4, 1, "", "map_batches"], [710, 4, 1, "", "map_groups"], [711, 4, 1, "", "max"], [712, 4, 1, "", "max_horizontal"], [713, 4, 1, "", "mean"], [714, 4, 1, "", "median"], [715, 4, 1, "", "min"], [716, 4, 1, "", "min_horizontal"], [717, 4, 1, "", "n_unique"], [718, 4, 1, "", "ones"], [719, 4, 1, "", "quantile"], [114, 4, 1, "", "read_avro"], [115, 4, 1, "", "read_csv"], [116, 4, 1, "", "read_csv_batched"], [117, 4, 1, "", "read_database"], [118, 4, 1, "", "read_database_uri"], [119, 4, 1, "", "read_delta"], [120, 4, 1, "", "read_excel"], [121, 4, 1, "", "read_ipc"], [122, 4, 1, "", "read_ipc_schema"], [123, 4, 1, "", "read_ipc_stream"], [124, 4, 1, "", "read_json"], [125, 4, 1, "", "read_ndjson"], [126, 4, 1, "", "read_ods"], [127, 4, 1, "", "read_parquet"], [128, 4, 1, "", "read_parquet_schema"], [720, 4, 1, "", "reduce"], [721, 4, 1, "", "repeat"], [722, 4, 1, "", "rolling_corr"], [723, 4, 1, "", "rolling_cov"], [129, 4, 1, "", "scan_csv"], [130, 4, 1, "", "scan_delta"], [131, 4, 1, "", "scan_iceberg"], [132, 4, 1, "", "scan_ipc"], [133, 4, 1, "", "scan_ndjson"], [134, 4, 1, "", "scan_parquet"], [135, 4, 1, "", "scan_pyarrow_dataset"], [724, 4, 1, "", "select"], [856, 6, 0, "-", "selectors"], [136, 4, 1, "", "set_random_seed"], [137, 4, 1, "", "show_versions"], [725, 4, 1, "", "sql_expr"], [726, 4, 1, "", "std"], [727, 4, 1, "", "struct"], [728, 4, 1, "", "sum"], [729, 4, 1, "", "sum_horizontal"], [730, 4, 1, "", "tail"], [149, 4, 1, "", "threadpool_size"], [731, 4, 1, "", "time"], [732, 4, 1, "", "time_range"], [733, 4, 1, "", "time_ranges"], [150, 4, 1, "", "using_string_cache"], [734, 4, 1, "", "var"], [735, 4, 1, "", "when"], [736, 4, 1, "", "zeros"]], "polars.Array": [[2, 1, 1, "", "__init__"]], "polars.Binary": [[3, 1, 1, "", "__init__"]], "polars.Boolean": [[4, 1, 1, "", "__init__"]], "polars.Categorical": [[5, 1, 1, "", "__init__"]], "polars.Config": [[6, 1, 1, "", "activate_decimals"], [7, 1, 1, "", "load"], [8, 1, 1, "", "load_from_file"], [9, 1, 1, "", "restore_defaults"], [10, 1, 1, "", "save"], [11, 1, 1, "", "save_to_file"], [12, 1, 1, "", "set_ascii_tables"], [13, 1, 1, "", "set_auto_structify"], [14, 1, 1, "", "set_decimal_separator"], [15, 1, 1, "", "set_float_precision"], [16, 1, 1, "", "set_fmt_float"], [17, 1, 1, "", "set_fmt_str_lengths"], [18, 1, 1, "", "set_fmt_table_cell_list_len"], [19, 1, 1, "", "set_streaming_chunk_size"], [20, 1, 1, "", "set_tbl_cell_alignment"], [21, 1, 1, "", "set_tbl_cell_numeric_alignment"], [22, 1, 1, "", "set_tbl_cols"], [23, 1, 1, "", "set_tbl_column_data_type_inline"], [24, 1, 1, "", "set_tbl_dataframe_shape_below"], [25, 1, 1, "", "set_tbl_formatting"], [26, 1, 1, "", "set_tbl_hide_column_data_types"], [27, 1, 1, "", "set_tbl_hide_column_names"], [28, 1, 1, "", "set_tbl_hide_dataframe_shape"], [29, 1, 1, "", "set_tbl_hide_dtype_separator"], [30, 1, 1, "", "set_tbl_rows"], [31, 1, 1, "", "set_tbl_width_chars"], [32, 1, 1, "", "set_thousands_separator"], [33, 1, 1, "", "set_trim_decimal_zeros"], [34, 1, 1, "", "set_verbose"], [35, 1, 1, "", "state"]], "polars.DataFrame": [[153, 1, 1, "", "__dataframe__"], [154, 1, 1, "", "apply"], [155, 1, 1, "", "approx_n_unique"], [156, 1, 1, "", "bottom_k"], [157, 1, 1, "", "cast"], [158, 1, 1, "", "clear"], [159, 1, 1, "", "clone"], [160, 2, 1, "", "columns"], [161, 1, 1, "", "corr"], [162, 1, 1, "", "describe"], [163, 1, 1, "", "drop"], [164, 1, 1, "", "drop_in_place"], [165, 1, 1, "", "drop_nulls"], [166, 2, 1, "", "dtypes"], [167, 1, 1, "", "equals"], [168, 1, 1, "", "estimated_size"], [169, 1, 1, "", "explode"], [170, 1, 1, "", "extend"], [171, 1, 1, "", "fill_nan"], [172, 1, 1, "", "fill_null"], [173, 1, 1, "", "filter"], [174, 1, 1, "", "find_idx_by_name"], [175, 2, 1, "", "flags"], [176, 1, 1, "", "fold"], [177, 1, 1, "", "frame_equal"], [178, 1, 1, "", "gather_every"], [179, 1, 1, "", "get_column"], [180, 1, 1, "", "get_column_index"], [181, 1, 1, "", "get_columns"], [182, 1, 1, "", "glimpse"], [183, 1, 1, "", "group_by"], [184, 1, 1, "", "group_by_dynamic"], [185, 1, 1, "", "group_by_rolling"], [186, 1, 1, "", "groupby"], [187, 1, 1, "", "groupby_dynamic"], [188, 1, 1, "", "groupby_rolling"], [189, 1, 1, "", "hash_rows"], [190, 1, 1, "", "head"], [191, 2, 1, "", "height"], [192, 1, 1, "", "hstack"], [193, 1, 1, "", "insert_at_idx"], [194, 1, 1, "", "insert_column"], [195, 1, 1, "", "interpolate"], [196, 1, 1, "", "is_duplicated"], [197, 1, 1, "", "is_empty"], [198, 1, 1, "", "is_unique"], [199, 1, 1, "", "item"], [200, 1, 1, "", "iter_columns"], [201, 1, 1, "", "iter_rows"], [202, 1, 1, "", "iter_slices"], [203, 1, 1, "", "join"], [204, 1, 1, "", "join_asof"], [205, 1, 1, "", "lazy"], [206, 1, 1, "", "limit"], [207, 1, 1, "", "map_rows"], [208, 1, 1, "", "max"], [209, 1, 1, "", "max_horizontal"], [210, 1, 1, "", "mean"], [211, 1, 1, "", "mean_horizontal"], [212, 1, 1, "", "median"], [213, 1, 1, "", "melt"], [214, 1, 1, "", "merge_sorted"], [215, 1, 1, "", "min"], [216, 1, 1, "", "min_horizontal"], [217, 1, 1, "", "n_chunks"], [218, 1, 1, "", "n_unique"], [219, 1, 1, "", "null_count"], [220, 1, 1, "", "partition_by"], [221, 1, 1, "", "pipe"], [222, 1, 1, "", "pivot"], [223, 1, 1, "", "product"], [224, 1, 1, "", "quantile"], [225, 1, 1, "", "rechunk"], [226, 1, 1, "", "rename"], [227, 1, 1, "", "replace"], [228, 1, 1, "", "replace_at_idx"], [229, 1, 1, "", "replace_column"], [230, 1, 1, "", "reverse"], [231, 1, 1, "", "rolling"], [232, 1, 1, "", "row"], [233, 1, 1, "", "rows"], [234, 1, 1, "", "rows_by_key"], [235, 1, 1, "", "sample"], [236, 2, 1, "", "schema"], [237, 1, 1, "", "select"], [238, 1, 1, "", "select_seq"], [239, 1, 1, "", "set_sorted"], [240, 2, 1, "", "shape"], [241, 1, 1, "", "shift"], [242, 1, 1, "", "shift_and_fill"], [243, 1, 1, "", "shrink_to_fit"], [244, 1, 1, "", "slice"], [245, 1, 1, "", "sort"], [246, 1, 1, "", "std"], [247, 1, 1, "", "sum"], [248, 1, 1, "", "sum_horizontal"], [249, 1, 1, "", "tail"], [250, 1, 1, "", "take_every"], [251, 1, 1, "", "to_arrow"], [252, 1, 1, "", "to_dict"], [253, 1, 1, "", "to_dicts"], [254, 1, 1, "", "to_dummies"], [255, 1, 1, "", "to_init_repr"], [256, 1, 1, "", "to_numpy"], [257, 1, 1, "", "to_pandas"], [258, 1, 1, "", "to_series"], [259, 1, 1, "", "to_struct"], [260, 1, 1, "", "top_k"], [261, 1, 1, "", "transpose"], [262, 1, 1, "", "unique"], [263, 1, 1, "", "unnest"], [264, 1, 1, "", "unstack"], [265, 1, 1, "", "update"], [266, 1, 1, "", "upsample"], [267, 1, 1, "", "var"], [268, 1, 1, "", "vstack"], [269, 2, 1, "", "width"], [270, 1, 1, "", "with_columns"], [271, 1, 1, "", "with_columns_seq"], [272, 1, 1, "", "with_row_count"], [36, 1, 1, "", "write_avro"], [37, 1, 1, "", "write_csv"], [38, 1, 1, "", "write_database"], [39, 1, 1, "", "write_delta"], [40, 1, 1, "", "write_excel"], [41, 1, 1, "", "write_ipc"], [42, 1, 1, "", "write_ipc_stream"], [43, 1, 1, "", "write_json"], [44, 1, 1, "", "write_ndjson"], [45, 1, 1, "", "write_parquet"]], "polars.DataType": [[46, 1, 1, "", "__init__"]], "polars.Date": [[47, 1, 1, "", "__init__"]], "polars.Datetime": [[48, 1, 1, "", "__init__"]], "polars.Decimal": [[49, 1, 1, "", "__init__"]], "polars.Duration": [[50, 1, 1, "", "__init__"]], "polars.Enum": [[51, 1, 1, "", "__init__"]], "polars.Expr": [[301, 1, 1, "", "abs"], [302, 1, 1, "", "add"], [303, 1, 1, "", "agg_groups"], [304, 1, 1, "", "alias"], [305, 1, 1, "", "all"], [306, 1, 1, "", "and_"], [307, 1, 1, "", "any"], [308, 1, 1, "", "append"], [309, 1, 1, "", "apply"], [310, 1, 1, "", "approx_n_unique"], [311, 1, 1, "", "arccos"], [312, 1, 1, "", "arccosh"], [313, 1, 1, "", "arcsin"], [314, 1, 1, "", "arcsinh"], [315, 1, 1, "", "arctan"], [316, 1, 1, "", "arctanh"], [317, 1, 1, "", "arg_max"], [318, 1, 1, "", "arg_min"], [319, 1, 1, "", "arg_sort"], [320, 1, 1, "", "arg_true"], [321, 1, 1, "", "arg_unique"], [327, 1, 1, "", "backward_fill"], [333, 1, 1, "", "bottom_k"], [334, 1, 1, "", "cast"], [337, 1, 1, "", "cbrt"], [338, 1, 1, "", "ceil"], [339, 1, 1, "", "clip"], [340, 1, 1, "", "clip_max"], [341, 1, 1, "", "clip_min"], [342, 1, 1, "", "cos"], [343, 1, 1, "", "cosh"], [344, 1, 1, "", "cot"], [345, 1, 1, "", "count"], [346, 1, 1, "", "cum_count"], [347, 1, 1, "", "cum_max"], [348, 1, 1, "", "cum_min"], [349, 1, 1, "", "cum_prod"], [350, 1, 1, "", "cum_sum"], [351, 1, 1, "", "cumcount"], [352, 1, 1, "", "cummax"], [353, 1, 1, "", "cummin"], [354, 1, 1, "", "cumprod"], [355, 1, 1, "", "cumsum"], [356, 1, 1, "", "cumulative_eval"], [357, 1, 1, "", "cut"], [358, 1, 1, "", "degrees"], [359, 1, 1, "", "diff"], [360, 1, 1, "", "dot"], [361, 1, 1, "", "drop_nans"], [362, 1, 1, "", "drop_nulls"], [411, 1, 1, "", "entropy"], [412, 1, 1, "", "eq"], [413, 1, 1, "", "eq_missing"], [414, 1, 1, "", "ewm_mean"], [415, 1, 1, "", "ewm_std"], [416, 1, 1, "", "ewm_var"], [417, 1, 1, "", "exclude"], [418, 1, 1, "", "exp"], [419, 1, 1, "", "explode"], [420, 1, 1, "", "extend_constant"], [421, 1, 1, "", "fill_nan"], [422, 1, 1, "", "fill_null"], [423, 1, 1, "", "filter"], [424, 1, 1, "", "first"], [425, 1, 1, "", "flatten"], [426, 1, 1, "", "floor"], [427, 1, 1, "", "floordiv"], [428, 1, 1, "", "forward_fill"], [429, 1, 1, "", "from_json"], [430, 1, 1, "", "gather"], [431, 1, 1, "", "gather_every"], [432, 1, 1, "", "ge"], [433, 1, 1, "", "get"], [434, 1, 1, "", "gt"], [435, 1, 1, "", "hash"], [436, 1, 1, "", "head"], [437, 1, 1, "", "hist"], [438, 1, 1, "", "implode"], [439, 1, 1, "", "inspect"], [440, 1, 1, "", "interpolate"], [441, 1, 1, "", "is_between"], [442, 1, 1, "", "is_duplicated"], [443, 1, 1, "", "is_finite"], [444, 1, 1, "", "is_first"], [445, 1, 1, "", "is_first_distinct"], [446, 1, 1, "", "is_in"], [447, 1, 1, "", "is_infinite"], [448, 1, 1, "", "is_last"], [449, 1, 1, "", "is_last_distinct"], [450, 1, 1, "", "is_nan"], [451, 1, 1, "", "is_not"], [452, 1, 1, "", "is_not_nan"], [453, 1, 1, "", "is_not_null"], [454, 1, 1, "", "is_null"], [455, 1, 1, "", "is_unique"], [456, 1, 1, "", "keep_name"], [457, 1, 1, "", "kurtosis"], [458, 1, 1, "", "last"], [459, 1, 1, "", "le"], [460, 1, 1, "", "len"], [461, 1, 1, "", "limit"], [500, 1, 1, "", "log"], [501, 1, 1, "", "log10"], [502, 1, 1, "", "log1p"], [503, 1, 1, "", "lower_bound"], [504, 1, 1, "", "lt"], [505, 1, 1, "", "map"], [506, 1, 1, "", "map_alias"], [507, 1, 1, "", "map_batches"], [508, 1, 1, "", "map_dict"], [509, 1, 1, "", "map_elements"], [510, 1, 1, "", "max"], [511, 1, 1, "", "mean"], [512, 1, 1, "", "median"], [523, 1, 1, "", "min"], [524, 1, 1, "", "mod"], [525, 1, 1, "", "mode"], [526, 1, 1, "", "mul"], [527, 1, 1, "", "n_unique"], [534, 1, 1, "", "nan_max"], [535, 1, 1, "", "nan_min"], [536, 1, 1, "", "ne"], [537, 1, 1, "", "ne_missing"], [538, 1, 1, "", "not_"], [539, 1, 1, "", "null_count"], [540, 1, 1, "", "or_"], [541, 1, 1, "", "over"], [542, 1, 1, "", "pct_change"], [543, 1, 1, "", "peak_max"], [544, 1, 1, "", "peak_min"], [545, 1, 1, "", "pipe"], [546, 1, 1, "", "pow"], [547, 1, 1, "", "prefix"], [548, 1, 1, "", "product"], [549, 1, 1, "", "qcut"], [550, 1, 1, "", "quantile"], [551, 1, 1, "", "radians"], [552, 1, 1, "", "rank"], [553, 1, 1, "", "rechunk"], [554, 1, 1, "", "reinterpret"], [555, 1, 1, "", "repeat_by"], [556, 1, 1, "", "replace"], [557, 1, 1, "", "reshape"], [558, 1, 1, "", "reverse"], [559, 1, 1, "", "rle"], [560, 1, 1, "", "rle_id"], [561, 1, 1, "", "rolling"], [562, 1, 1, "", "rolling_apply"], [563, 1, 1, "", "rolling_map"], [564, 1, 1, "", "rolling_max"], [565, 1, 1, "", "rolling_mean"], [566, 1, 1, "", "rolling_median"], [567, 1, 1, "", "rolling_min"], [568, 1, 1, "", "rolling_quantile"], [569, 1, 1, "", "rolling_skew"], [570, 1, 1, "", "rolling_std"], [571, 1, 1, "", "rolling_sum"], [572, 1, 1, "", "rolling_var"], [573, 1, 1, "", "round"], [574, 1, 1, "", "round_sig_figs"], [575, 1, 1, "", "sample"], [576, 1, 1, "", "search_sorted"], [577, 1, 1, "", "set_sorted"], [578, 1, 1, "", "shift"], [579, 1, 1, "", "shift_and_fill"], [580, 1, 1, "", "shrink_dtype"], [581, 1, 1, "", "shuffle"], [582, 1, 1, "", "sign"], [583, 1, 1, "", "sin"], [584, 1, 1, "", "sinh"], [585, 1, 1, "", "skew"], [586, 1, 1, "", "slice"], [587, 1, 1, "", "sort"], [588, 1, 1, "", "sort_by"], [589, 1, 1, "", "sqrt"], [590, 1, 1, "", "std"], [645, 1, 1, "", "sub"], [646, 1, 1, "", "suffix"], [647, 1, 1, "", "sum"], [648, 1, 1, "", "tail"], [649, 1, 1, "", "take"], [650, 1, 1, "", "take_every"], [651, 1, 1, "", "tan"], [652, 1, 1, "", "tanh"], [653, 1, 1, "", "to_physical"], [654, 1, 1, "", "top_k"], [655, 1, 1, "", "truediv"], [656, 1, 1, "", "unique"], [657, 1, 1, "", "unique_counts"], [658, 1, 1, "", "upper_bound"], [659, 1, 1, "", "value_counts"], [660, 1, 1, "", "var"], [661, 1, 1, "", "where"], [662, 1, 1, "", "xor"]], "polars.Expr.arr": [[322, 1, 1, "", "max"], [323, 1, 1, "", "min"], [324, 1, 1, "", "sum"], [325, 1, 1, "", "to_list"], [326, 1, 1, "", "unique"]], "polars.Expr.bin": [[328, 1, 1, "", "contains"], [329, 1, 1, "", "decode"], [330, 1, 1, "", "encode"], [331, 1, 1, "", "ends_with"], [332, 1, 1, "", "starts_with"]], "polars.Expr.cat": [[335, 1, 1, "", "get_categories"], [336, 1, 1, "", "set_ordering"]], "polars.Expr.dt": [[363, 1, 1, "", "base_utc_offset"], [364, 1, 1, "", "cast_time_unit"], [365, 1, 1, "", "combine"], [366, 1, 1, "", "convert_time_zone"], [367, 1, 1, "", "date"], [368, 1, 1, "", "datetime"], [369, 1, 1, "", "day"], [370, 1, 1, "", "days"], [371, 1, 1, "", "dst_offset"], [372, 1, 1, "", "epoch"], [373, 1, 1, "", "hour"], [374, 1, 1, "", "hours"], [375, 1, 1, "", "is_leap_year"], [376, 1, 1, "", "iso_year"], [377, 1, 1, "", "microsecond"], [378, 1, 1, "", "microseconds"], [379, 1, 1, "", "millisecond"], [380, 1, 1, "", "milliseconds"], [381, 1, 1, "", "minute"], [382, 1, 1, "", "minutes"], [383, 1, 1, "", "month"], [384, 1, 1, "", "month_end"], [385, 1, 1, "", "month_start"], [386, 1, 1, "", "nanosecond"], [387, 1, 1, "", "nanoseconds"], [388, 1, 1, "", "offset_by"], [389, 1, 1, "", "ordinal_day"], [390, 1, 1, "", "quarter"], [391, 1, 1, "", "replace_time_zone"], [392, 1, 1, "", "round"], [393, 1, 1, "", "second"], [394, 1, 1, "", "seconds"], [395, 1, 1, "", "strftime"], [396, 1, 1, "", "time"], [397, 1, 1, "", "timestamp"], [398, 1, 1, "", "to_string"], [399, 1, 1, "", "total_days"], [400, 1, 1, "", "total_hours"], [401, 1, 1, "", "total_microseconds"], [402, 1, 1, "", "total_milliseconds"], [403, 1, 1, "", "total_minutes"], [404, 1, 1, "", "total_nanoseconds"], [405, 1, 1, "", "total_seconds"], [406, 1, 1, "", "truncate"], [407, 1, 1, "", "week"], [408, 1, 1, "", "weekday"], [409, 1, 1, "", "with_time_unit"], [410, 1, 1, "", "year"]], "polars.Expr.list": [[462, 1, 1, "", "all"], [463, 1, 1, "", "any"], [464, 1, 1, "", "arg_max"], [465, 1, 1, "", "arg_min"], [466, 1, 1, "", "concat"], [467, 1, 1, "", "contains"], [468, 1, 1, "", "count_match"], [469, 1, 1, "", "count_matches"], [470, 1, 1, "", "diff"], [471, 1, 1, "", "drop_nulls"], [472, 1, 1, "", "eval"], [473, 1, 1, "", "explode"], [474, 1, 1, "", "first"], [475, 1, 1, "", "gather"], [476, 1, 1, "", "get"], [477, 1, 1, "", "head"], [478, 1, 1, "", "join"], [479, 1, 1, "", "last"], [480, 1, 1, "", "len"], [481, 1, 1, "", "lengths"], [482, 1, 1, "", "max"], [483, 1, 1, "", "mean"], [484, 1, 1, "", "min"], [485, 1, 1, "", "reverse"], [486, 1, 1, "", "sample"], [487, 1, 1, "", "set_difference"], [488, 1, 1, "", "set_intersection"], [489, 1, 1, "", "set_symmetric_difference"], [490, 1, 1, "", "set_union"], [491, 1, 1, "", "shift"], [492, 1, 1, "", "slice"], [493, 1, 1, "", "sort"], [494, 1, 1, "", "sum"], [495, 1, 1, "", "tail"], [496, 1, 1, "", "take"], [497, 1, 1, "", "to_array"], [498, 1, 1, "", "to_struct"], [499, 1, 1, "", "unique"]], "polars.Expr.meta": [[513, 1, 1, "", "eq"], [514, 1, 1, "", "has_multiple_outputs"], [515, 1, 1, "", "is_regex_projection"], [516, 1, 1, "", "ne"], [517, 1, 1, "", "output_name"], [518, 1, 1, "", "pop"], [519, 1, 1, "", "root_names"], [520, 1, 1, "", "tree_format"], [521, 1, 1, "", "undo_aliases"], [522, 1, 1, "", "write_json"]], "polars.Expr.name": [[528, 1, 1, "", "keep"], [529, 1, 1, "", "map"], [530, 1, 1, "", "prefix"], [531, 1, 1, "", "suffix"], [532, 1, 1, "", "to_lowercase"], [533, 1, 1, "", "to_uppercase"]], "polars.Expr.str": [[591, 1, 1, "", "concat"], [592, 1, 1, "", "contains"], [593, 1, 1, "", "contains_any"], [594, 1, 1, "", "count_match"], [595, 1, 1, "", "count_matches"], [596, 1, 1, "", "decode"], [597, 1, 1, "", "encode"], [598, 1, 1, "", "ends_with"], [599, 1, 1, "", "explode"], [600, 1, 1, "", "extract"], [601, 1, 1, "", "extract_all"], [602, 1, 1, "", "extract_groups"], [603, 1, 1, "", "json_decode"], [604, 1, 1, "", "json_extract"], [605, 1, 1, "", "json_path_match"], [606, 1, 1, "", "len_bytes"], [607, 1, 1, "", "len_chars"], [608, 1, 1, "", "lengths"], [609, 1, 1, "", "ljust"], [610, 1, 1, "", "lstrip"], [611, 1, 1, "", "n_chars"], [612, 1, 1, "", "pad_end"], [613, 1, 1, "", "pad_start"], [614, 1, 1, "", "parse_int"], [615, 1, 1, "", "replace"], [616, 1, 1, "", "replace_all"], [617, 1, 1, "", "replace_many"], [618, 1, 1, "", "reverse"], [619, 1, 1, "", "rjust"], [620, 1, 1, "", "rstrip"], [621, 1, 1, "", "slice"], [622, 1, 1, "", "split"], [623, 1, 1, "", "split_exact"], [624, 1, 1, "", "splitn"], [625, 1, 1, "", "starts_with"], [626, 1, 1, "", "strip"], [627, 1, 1, "", "strip_chars"], [628, 1, 1, "", "strip_chars_end"], [629, 1, 1, "", "strip_chars_start"], [630, 1, 1, "", "strip_prefix"], [631, 1, 1, "", "strip_suffix"], [632, 1, 1, "", "strptime"], [633, 1, 1, "", "to_date"], [634, 1, 1, "", "to_datetime"], [635, 1, 1, "", "to_decimal"], [636, 1, 1, "", "to_integer"], [637, 1, 1, "", "to_lowercase"], [638, 1, 1, "", "to_time"], [639, 1, 1, "", "to_titlecase"], [640, 1, 1, "", "to_uppercase"], [641, 1, 1, "", "zfill"]], "polars.Expr.struct": [[642, 1, 1, "", "field"], [643, 1, 1, "", "json_encode"], [644, 1, 1, "", "rename_fields"]], "polars.Float32": [[52, 1, 1, "", "__init__"]], "polars.Float64": [[53, 1, 1, "", "__init__"]], "polars.Int16": [[54, 1, 1, "", "__init__"]], "polars.Int32": [[55, 1, 1, "", "__init__"]], "polars.Int64": [[56, 1, 1, "", "__init__"]], "polars.Int8": [[57, 1, 1, "", "__init__"]], "polars.LazyFrame": [[760, 1, 1, "", "approx_n_unique"], [761, 1, 1, "", "bottom_k"], [762, 1, 1, "", "cache"], [763, 1, 1, "", "cast"], [764, 1, 1, "", "clear"], [765, 1, 1, "", "clone"], [766, 1, 1, "", "collect"], [767, 1, 1, "", "collect_async"], [768, 2, 1, "", "columns"], [769, 1, 1, "", "deserialize"], [770, 1, 1, "", "drop"], [771, 1, 1, "", "drop_nulls"], [772, 2, 1, "", "dtypes"], [773, 1, 1, "", "explain"], [774, 1, 1, "", "explode"], [775, 1, 1, "", "fetch"], [776, 1, 1, "", "fill_nan"], [777, 1, 1, "", "fill_null"], [778, 1, 1, "", "filter"], [779, 1, 1, "", "first"], [780, 1, 1, "", "gather_every"], [781, 1, 1, "", "group_by"], [782, 1, 1, "", "group_by_dynamic"], [783, 1, 1, "", "group_by_rolling"], [784, 1, 1, "", "groupby"], [785, 1, 1, "", "groupby_dynamic"], [786, 1, 1, "", "groupby_rolling"], [787, 1, 1, "", "head"], [788, 1, 1, "", "inspect"], [789, 1, 1, "", "interpolate"], [790, 1, 1, "", "join"], [791, 1, 1, "", "join_asof"], [792, 1, 1, "", "last"], [793, 1, 1, "", "lazy"], [794, 1, 1, "", "limit"], [795, 1, 1, "", "map"], [796, 1, 1, "", "map_batches"], [797, 1, 1, "", "max"], [798, 1, 1, "", "mean"], [799, 1, 1, "", "median"], [800, 1, 1, "", "melt"], [801, 1, 1, "", "merge_sorted"], [802, 1, 1, "", "min"], [803, 1, 1, "", "null_count"], [804, 1, 1, "", "pipe"], [805, 1, 1, "", "profile"], [806, 1, 1, "", "quantile"], [807, 1, 1, "", "rename"], [808, 1, 1, "", "reverse"], [809, 1, 1, "", "rolling"], [810, 2, 1, "", "schema"], [811, 1, 1, "", "select"], [812, 1, 1, "", "select_seq"], [813, 1, 1, "", "serialize"], [814, 1, 1, "", "set_sorted"], [815, 1, 1, "", "shift"], [816, 1, 1, "", "shift_and_fill"], [817, 1, 1, "", "show_graph"], [58, 1, 1, "", "sink_csv"], [59, 1, 1, "", "sink_ipc"], [60, 1, 1, "", "sink_parquet"], [818, 1, 1, "", "slice"], [819, 1, 1, "", "sort"], [820, 1, 1, "", "std"], [821, 1, 1, "", "sum"], [822, 1, 1, "", "tail"], [823, 1, 1, "", "take_every"], [824, 1, 1, "", "top_k"], [825, 1, 1, "", "unique"], [826, 1, 1, "", "unnest"], [827, 1, 1, "", "update"], [828, 1, 1, "", "var"], [829, 2, 1, "", "width"], [830, 1, 1, "", "with_columns"], [831, 1, 1, "", "with_columns_seq"], [832, 1, 1, "", "with_context"], [833, 1, 1, "", "with_row_count"]], "polars.List": [[61, 1, 1, "", "__init__"]], "polars.Null": [[62, 1, 1, "", "__init__"]], "polars.Object": [[63, 1, 1, "", "__init__"]], "polars.SQLContext": [[1226, 1, 1, "", "__enter__"], [1226, 1, 1, "", "__exit__"], [1226, 1, 1, "", "__init__"], [64, 1, 1, "", "execute"], [65, 1, 1, "", "register"], [66, 1, 1, "", "register_globals"], [67, 1, 1, "", "register_many"], [68, 1, 1, "", "tables"], [69, 1, 1, "", "unregister"]], "polars.Series": [[858, 1, 1, "", "abs"], [859, 1, 1, "", "alias"], [860, 1, 1, "", "all"], [861, 1, 1, "", "any"], [862, 1, 1, "", "append"], [863, 1, 1, "", "apply"], [864, 1, 1, "", "arccos"], [865, 1, 1, "", "arccosh"], [866, 1, 1, "", "arcsin"], [867, 1, 1, "", "arcsinh"], [868, 1, 1, "", "arctan"], [869, 1, 1, "", "arctanh"], [870, 1, 1, "", "arg_max"], [871, 1, 1, "", "arg_min"], [872, 1, 1, "", "arg_sort"], [873, 1, 1, "", "arg_true"], [874, 1, 1, "", "arg_unique"], [885, 1, 1, "", "bottom_k"], [886, 1, 1, "", "cast"], [887, 3, 1, "", "cat"], [893, 1, 1, "", "cbrt"], [894, 1, 1, "", "ceil"], [895, 1, 1, "", "chunk_lengths"], [896, 1, 1, "", "clear"], [897, 1, 1, "", "clip"], [898, 1, 1, "", "clip_max"], [899, 1, 1, "", "clip_min"], [900, 1, 1, "", "clone"], [901, 1, 1, "", "cos"], [902, 1, 1, "", "cosh"], [903, 1, 1, "", "cot"], [904, 1, 1, "", "cum_max"], [905, 1, 1, "", "cum_min"], [906, 1, 1, "", "cum_prod"], [907, 1, 1, "", "cum_sum"], [908, 1, 1, "", "cummax"], [909, 1, 1, "", "cummin"], [910, 1, 1, "", "cumprod"], [911, 1, 1, "", "cumsum"], [912, 1, 1, "", "cumulative_eval"], [913, 1, 1, "", "cut"], [914, 1, 1, "", "describe"], [915, 1, 1, "", "diff"], [916, 1, 1, "", "dot"], [917, 1, 1, "", "drop_nans"], [918, 1, 1, "", "drop_nulls"], [919, 3, 1, "", "dt"], [972, 3, 1, "", "dtype"], [973, 1, 1, "", "entropy"], [974, 1, 1, "", "equals"], [975, 1, 1, "", "estimated_size"], [976, 1, 1, "", "ewm_mean"], [977, 1, 1, "", "ewm_std"], [978, 1, 1, "", "ewm_var"], [979, 1, 1, "", "exp"], [980, 1, 1, "", "explode"], [981, 1, 1, "", "extend"], [982, 1, 1, "", "extend_constant"], [983, 1, 1, "", "fill_nan"], [984, 1, 1, "", "fill_null"], [985, 1, 1, "", "filter"], [986, 3, 1, "", "flags"], [987, 1, 1, "", "floor"], [988, 1, 1, "", "gather"], [989, 1, 1, "", "gather_every"], [990, 1, 1, "", "get_chunks"], [991, 1, 1, "", "has_validity"], [992, 1, 1, "", "hash"], [993, 1, 1, "", "head"], [994, 1, 1, "", "hist"], [995, 1, 1, "", "implode"], [996, 3, 1, "", "inner_dtype"], [997, 1, 1, "", "interpolate"], [998, 1, 1, "", "is_between"], [999, 1, 1, "", "is_boolean"], [1000, 1, 1, "", "is_duplicated"], [1001, 1, 1, "", "is_empty"], [1002, 1, 1, "", "is_finite"], [1003, 1, 1, "", "is_first"], [1004, 1, 1, "", "is_first_distinct"], [1005, 1, 1, "", "is_float"], [1006, 1, 1, "", "is_in"], [1007, 1, 1, "", "is_infinite"], [1008, 1, 1, "", "is_integer"], [1009, 1, 1, "", "is_last"], [1010, 1, 1, "", "is_last_distinct"], [1011, 1, 1, "", "is_nan"], [1012, 1, 1, "", "is_not_nan"], [1013, 1, 1, "", "is_not_null"], [1014, 1, 1, "", "is_null"], [1015, 1, 1, "", "is_numeric"], [1016, 1, 1, "", "is_sorted"], [1017, 1, 1, "", "is_temporal"], [1018, 1, 1, "", "is_unique"], [1019, 1, 1, "", "is_utf8"], [1020, 1, 1, "", "item"], [1021, 1, 1, "", "kurtosis"], [1022, 1, 1, "", "len"], [1023, 1, 1, "", "limit"], [1024, 3, 1, "", "list"], [1063, 1, 1, "", "log"], [1064, 1, 1, "", "log10"], [1065, 1, 1, "", "log1p"], [1066, 1, 1, "", "lower_bound"], [1067, 1, 1, "", "map_dict"], [1068, 1, 1, "", "map_elements"], [1069, 1, 1, "", "max"], [1070, 1, 1, "", "mean"], [1071, 1, 1, "", "median"], [1072, 1, 1, "", "min"], [1073, 1, 1, "", "mode"], [1074, 1, 1, "", "n_chunks"], [1075, 1, 1, "", "n_unique"], [1076, 3, 1, "", "name"], [1077, 1, 1, "", "nan_max"], [1078, 1, 1, "", "nan_min"], [1079, 1, 1, "", "new_from_index"], [1080, 1, 1, "", "not_"], [1081, 1, 1, "", "null_count"], [1082, 1, 1, "", "pct_change"], [1083, 1, 1, "", "peak_max"], [1084, 1, 1, "", "peak_min"], [1085, 1, 1, "", "product"], [1086, 1, 1, "", "qcut"], [1087, 1, 1, "", "quantile"], [1088, 1, 1, "", "rank"], [1089, 1, 1, "", "rechunk"], [1090, 1, 1, "", "reinterpret"], [1091, 1, 1, "", "rename"], [1092, 1, 1, "", "replace"], [1093, 1, 1, "", "reshape"], [1094, 1, 1, "", "reverse"], [1095, 1, 1, "", "rle"], [1096, 1, 1, "", "rle_id"], [1097, 1, 1, "", "rolling_apply"], [1098, 1, 1, "", "rolling_map"], [1099, 1, 1, "", "rolling_max"], [1100, 1, 1, "", "rolling_mean"], [1101, 1, 1, "", "rolling_median"], [1102, 1, 1, "", "rolling_min"], [1103, 1, 1, "", "rolling_quantile"], [1104, 1, 1, "", "rolling_skew"], [1105, 1, 1, "", "rolling_std"], [1106, 1, 1, "", "rolling_sum"], [1107, 1, 1, "", "rolling_var"], [1108, 1, 1, "", "round"], [1109, 1, 1, "", "round_sig_figs"], [1110, 1, 1, "", "sample"], [1111, 1, 1, "", "scatter"], [1112, 1, 1, "", "search_sorted"], [1113, 1, 1, "", "series_equal"], [1114, 1, 1, "", "set"], [1115, 1, 1, "", "set_at_idx"], [1116, 1, 1, "", "set_sorted"], [1117, 3, 1, "", "shape"], [1118, 1, 1, "", "shift"], [1119, 1, 1, "", "shift_and_fill"], [1120, 1, 1, "", "shrink_dtype"], [1121, 1, 1, "", "shrink_to_fit"], [1122, 1, 1, "", "shuffle"], [1123, 1, 1, "", "sign"], [1124, 1, 1, "", "sin"], [1125, 1, 1, "", "sinh"], [1126, 1, 1, "", "skew"], [1127, 1, 1, "", "slice"], [1128, 1, 1, "", "sort"], [1129, 1, 1, "", "sqrt"], [1130, 1, 1, "", "std"], [1131, 3, 1, "", "str"], [1189, 1, 1, "", "sum"], [1190, 1, 1, "", "tail"], [1191, 1, 1, "", "take"], [1192, 1, 1, "", "take_every"], [1193, 1, 1, "", "tan"], [1194, 1, 1, "", "tanh"], [1195, 1, 1, "", "to_arrow"], [1196, 1, 1, "", "to_dummies"], [1197, 1, 1, "", "to_frame"], [1198, 1, 1, "", "to_init_repr"], [1199, 1, 1, "", "to_list"], [1200, 1, 1, "", "to_numpy"], [1201, 1, 1, "", "to_pandas"], [1202, 1, 1, "", "to_physical"], [1203, 1, 1, "", "top_k"], [1204, 1, 1, "", "unique"], [1205, 1, 1, "", "unique_counts"], [1206, 1, 1, "", "upper_bound"], [1207, 1, 1, "", "value_counts"], [1208, 1, 1, "", "var"], [1209, 1, 1, "", "view"], [1210, 1, 1, "", "zip_with"]], "polars.Series.arr": [[875, 1, 1, "", "max"], [876, 1, 1, "", "min"], [877, 1, 1, "", "sum"], [878, 1, 1, "", "to_list"], [879, 1, 1, "", "unique"]], "polars.Series.bin": [[880, 1, 1, "", "contains"], [881, 1, 1, "", "decode"], [882, 1, 1, "", "encode"], [883, 1, 1, "", "ends_with"], [884, 1, 1, "", "starts_with"]], "polars.Series.cat": [[888, 1, 1, "", "get_categories"], [889, 1, 1, "", "is_local"], [890, 1, 1, "", "set_ordering"], [891, 1, 1, "", "to_local"], [892, 1, 1, "", "uses_lexical_ordering"]], "polars.Series.dt": [[920, 1, 1, "", "base_utc_offset"], [921, 1, 1, "", "cast_time_unit"], [922, 1, 1, "", "combine"], [923, 1, 1, "", "convert_time_zone"], [924, 1, 1, "", "date"], [925, 1, 1, "", "datetime"], [926, 1, 1, "", "day"], [927, 1, 1, "", "days"], [928, 1, 1, "", "dst_offset"], [929, 1, 1, "", "epoch"], [930, 1, 1, "", "hour"], [931, 1, 1, "", "hours"], [932, 1, 1, "", "is_leap_year"], [933, 1, 1, "", "iso_year"], [934, 1, 1, "", "max"], [935, 1, 1, "", "mean"], [936, 1, 1, "", "median"], [937, 1, 1, "", "microsecond"], [938, 1, 1, "", "microseconds"], [939, 1, 1, "", "millisecond"], [940, 1, 1, "", "milliseconds"], [941, 1, 1, "", "min"], [942, 1, 1, "", "minute"], [943, 1, 1, "", "minutes"], [944, 1, 1, "", "month"], [945, 1, 1, "", "month_end"], [946, 1, 1, "", "month_start"], [947, 1, 1, "", "nanosecond"], [948, 1, 1, "", "nanoseconds"], [949, 1, 1, "", "offset_by"], [950, 1, 1, "", "ordinal_day"], [951, 1, 1, "", "quarter"], [952, 1, 1, "", "replace_time_zone"], [953, 1, 1, "", "round"], [954, 1, 1, "", "second"], [955, 1, 1, "", "seconds"], [956, 1, 1, "", "strftime"], [957, 1, 1, "", "time"], [958, 1, 1, "", "timestamp"], [959, 1, 1, "", "to_string"], [960, 1, 1, "", "total_days"], [961, 1, 1, "", "total_hours"], [962, 1, 1, "", "total_microseconds"], [963, 1, 1, "", "total_milliseconds"], [964, 1, 1, "", "total_minutes"], [965, 1, 1, "", "total_nanoseconds"], [966, 1, 1, "", "total_seconds"], [967, 1, 1, "", "truncate"], [968, 1, 1, "", "week"], [969, 1, 1, "", "weekday"], [970, 1, 1, "", "with_time_unit"], [971, 1, 1, "", "year"]], "polars.Series.list": [[1025, 1, 1, "", "all"], [1026, 1, 1, "", "any"], [1027, 1, 1, "", "arg_max"], [1028, 1, 1, "", "arg_min"], [1029, 1, 1, "", "concat"], [1030, 1, 1, "", "contains"], [1031, 1, 1, "", "count_match"], [1032, 1, 1, "", "count_matches"], [1033, 1, 1, "", "diff"], [1034, 1, 1, "", "drop_nulls"], [1035, 1, 1, "", "eval"], [1036, 1, 1, "", "explode"], [1037, 1, 1, "", "first"], [1038, 1, 1, "", "gather"], [1039, 1, 1, "", "get"], [1040, 1, 1, "", "head"], [1041, 1, 1, "", "join"], [1042, 1, 1, "", "last"], [1043, 1, 1, "", "len"], [1044, 1, 1, "", "lengths"], [1045, 1, 1, "", "max"], [1046, 1, 1, "", "mean"], [1047, 1, 1, "", "min"], [1048, 1, 1, "", "reverse"], [1049, 1, 1, "", "sample"], [1050, 1, 1, "", "set_difference"], [1051, 1, 1, "", "set_intersection"], [1052, 1, 1, "", "set_symmetric_difference"], [1053, 1, 1, "", "set_union"], [1054, 1, 1, "", "shift"], [1055, 1, 1, "", "slice"], [1056, 1, 1, "", "sort"], [1057, 1, 1, "", "sum"], [1058, 1, 1, "", "tail"], [1059, 1, 1, "", "take"], [1060, 1, 1, "", "to_array"], [1061, 1, 1, "", "to_struct"], [1062, 1, 1, "", "unique"]], "polars.Series.str": [[1132, 1, 1, "", "concat"], [1133, 1, 1, "", "contains"], [1134, 1, 1, "", "contains_any"], [1135, 1, 1, "", "count_match"], [1136, 1, 1, "", "count_matches"], [1137, 1, 1, "", "decode"], [1138, 1, 1, "", "encode"], [1139, 1, 1, "", "ends_with"], [1140, 1, 1, "", "explode"], [1141, 1, 1, "", "extract"], [1142, 1, 1, "", "extract_all"], [1143, 1, 1, "", "extract_groups"], [1144, 1, 1, "", "json_decode"], [1145, 1, 1, "", "json_extract"], [1146, 1, 1, "", "json_path_match"], [1147, 1, 1, "", "len_bytes"], [1148, 1, 1, "", "len_chars"], [1149, 1, 1, "", "lengths"], [1150, 1, 1, "", "ljust"], [1151, 1, 1, "", "lstrip"], [1152, 1, 1, "", "n_chars"], [1153, 1, 1, "", "pad_end"], [1154, 1, 1, "", "pad_start"], [1155, 1, 1, "", "parse_int"], [1156, 1, 1, "", "replace"], [1157, 1, 1, "", "replace_all"], [1158, 1, 1, "", "replace_many"], [1159, 1, 1, "", "reverse"], [1160, 1, 1, "", "rjust"], [1161, 1, 1, "", "rstrip"], [1162, 1, 1, "", "slice"], [1163, 1, 1, "", "split"], [1164, 1, 1, "", "split_exact"], [1165, 1, 1, "", "splitn"], [1166, 1, 1, "", "starts_with"], [1167, 1, 1, "", "strip"], [1168, 1, 1, "", "strip_chars"], [1169, 1, 1, "", "strip_chars_end"], [1170, 1, 1, "", "strip_chars_start"], [1171, 1, 1, "", "strip_prefix"], [1172, 1, 1, "", "strip_suffix"], [1173, 1, 1, "", "strptime"], [1174, 1, 1, "", "to_date"], [1175, 1, 1, "", "to_datetime"], [1176, 1, 1, "", "to_decimal"], [1177, 1, 1, "", "to_integer"], [1178, 1, 1, "", "to_lowercase"], [1179, 1, 1, "", "to_time"], [1180, 1, 1, "", "to_titlecase"], [1181, 1, 1, "", "to_uppercase"], [1182, 1, 1, "", "zfill"]], "polars.Series.struct": [[1183, 1, 1, "", "field"], [1184, 3, 1, "", "fields"], [1185, 3, 1, "", "json_encode"], [1186, 1, 1, "", "rename_fields"], [1187, 3, 1, "", "schema"], [1188, 1, 1, "", "unnest"]], "polars.StringCache": [[70, 1, 1, "", "__init__"]], "polars.Struct": [[71, 1, 1, "", "__init__"]], "polars.Time": [[72, 1, 1, "", "__init__"]], "polars.UInt16": [[73, 1, 1, "", "__init__"]], "polars.UInt32": [[74, 1, 1, "", "__init__"]], "polars.UInt64": [[75, 1, 1, "", "__init__"]], "polars.UInt8": [[76, 1, 1, "", "__init__"]], "polars.Unknown": [[77, 1, 1, "", "__init__"]], "polars.Utf8": [[78, 1, 1, "", "__init__"]], "polars.api": [[80, 4, 1, "", "register_dataframe_namespace"], [81, 4, 1, "", "register_expr_namespace"], [82, 4, 1, "", "register_lazyframe_namespace"], [83, 4, 1, "", "register_series_namespace"]], "polars.dataframe.group_by.GroupBy": [[273, 1, 1, "", "__iter__"], [274, 1, 1, "", "agg"], [275, 1, 1, "", "all"], [276, 1, 1, "", "apply"], [277, 1, 1, "", "count"], [278, 1, 1, "", "first"], [279, 1, 1, "", "head"], [280, 1, 1, "", "last"], [281, 1, 1, "", "map_groups"], [282, 1, 1, "", "max"], [283, 1, 1, "", "mean"], [284, 1, 1, "", "median"], [285, 1, 1, "", "min"], [286, 1, 1, "", "n_unique"], [287, 1, 1, "", "quantile"], [288, 1, 1, "", "sum"], [289, 1, 1, "", "tail"]], "polars.exceptions": [[90, 5, 1, "", "ArrowError"], [91, 5, 1, "", "ColumnNotFoundError"], [92, 5, 1, "", "ComputeError"], [93, 5, 1, "", "DuplicateError"], [94, 5, 1, "", "InvalidOperationError"], [95, 5, 1, "", "NoDataError"], [96, 5, 1, "", "NoRowsReturnedError"], [97, 5, 1, "", "PolarsPanicError"], [98, 5, 1, "", "RowsError"], [99, 5, 1, "", "SchemaError"], [100, 5, 1, "", "SchemaFieldNotFoundError"], [101, 5, 1, "", "ShapeError"], [102, 5, 1, "", "StructFieldNotFoundError"], [103, 5, 1, "", "TooManyRowsReturnedError"]], "polars.io.csv.batched_reader.BatchedCsvReader": [[113, 1, 1, "", "next_batches"]], "polars.lazyframe.group_by.LazyGroupBy": [[834, 1, 1, "", "agg"], [835, 1, 1, "", "all"], [836, 1, 1, "", "apply"], [837, 1, 1, "", "count"], [838, 1, 1, "", "first"], [839, 1, 1, "", "head"], [840, 1, 1, "", "last"], [841, 1, 1, "", "map_groups"], [842, 1, 1, "", "max"], [843, 1, 1, "", "mean"], [844, 1, 1, "", "median"], [845, 1, 1, "", "min"], [846, 1, 1, "", "n_unique"], [847, 1, 1, "", "quantile"], [848, 1, 1, "", "sum"], [849, 1, 1, "", "tail"]], "polars.selectors": [[856, 4, 1, "", "all"], [856, 4, 1, "", "by_dtype"], [856, 4, 1, "", "by_name"], [856, 4, 1, "", "categorical"], [856, 4, 1, "", "contains"], [856, 4, 1, "", "date"], [856, 4, 1, "", "datetime"], [856, 4, 1, "", "duration"], [856, 4, 1, "", "ends_with"], [856, 4, 1, "", "expand_selector"], [856, 4, 1, "", "first"], [856, 4, 1, "", "float"], [856, 4, 1, "", "integer"], [856, 4, 1, "", "is_selector"], [856, 4, 1, "", "last"], [856, 4, 1, "", "matches"], [856, 4, 1, "", "numeric"], [856, 4, 1, "", "starts_with"], [856, 4, 1, "", "string"], [856, 4, 1, "", "temporal"], [856, 4, 1, "", "time"]], "polars.testing": [[138, 4, 1, "", "assert_frame_equal"], [139, 4, 1, "", "assert_frame_not_equal"], [140, 4, 1, "", "assert_series_equal"], [141, 4, 1, "", "assert_series_not_equal"]], "polars.testing.parametric": [[142, 0, 1, "", "column"], [143, 4, 1, "", "columns"], [144, 4, 1, "", "create_list_strategy"], [145, 4, 1, "", "dataframes"], [146, 4, 1, "", "load_profile"], [147, 4, 1, "", "series"], [148, 4, 1, "", "set_profile"]], "polars.testing.parametric.column": [[142, 1, 1, "", "__init__"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:attribute", "4": "py:function", "5": "py:exception", "6": "py:module"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"], "6": ["py", "module", "Python module"]}, "titleterms": {"index": 0, "extend": [1, 170, 981], "api": [1, 80, 81, 82, 83, 757], "provid": 1, "new": 1, "function": [1, 151, 744, 756, 856], "avail": 1, "registr": 1, "exampl": [1, 856, 1227], "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 741, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1227], "arrai": [2, 737, 1211], "binari": [3, 738, 751, 1213], "boolean": [4, 739, 1214], "categor": 5, "config": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 151], "activate_decim": 6, "load": [7, 151], "load_from_fil": 8, "restore_default": 9, "save": [10, 151], "save_to_fil": 11, "set_ascii_t": 12, "set_auto_structifi": 13, "set_decimal_separ": 14, "set_float_precis": 15, "set_fmt_float": 16, "set_fmt_str_length": 17, "set_fmt_table_cell_list_len": 18, "set_streaming_chunk_s": 19, "set_tbl_cell_align": 20, "set_tbl_cell_numeric_align": 21, "set_tbl_col": 22, "set_tbl_column_data_type_inlin": 23, "set_tbl_dataframe_shape_below": 24, "set_tbl_format": 25, "set_tbl_hide_column_data_typ": 26, "set_tbl_hide_column_nam": 27, "set_tbl_hide_dataframe_shap": 28, "set_tbl_hide_dtype_separ": 29, "set_tbl_row": 30, "set_tbl_width_char": 31, "set_thousands_separ": 32, "set_trim_decimal_zero": 33, "set_verbos": 34, "state": [35, 151], "datafram": [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 145, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 295], "write_avro": 36, "write_csv": 37, "write_databas": 38, "write_delta": 39, "write_excel": 40, "write_ipc": 41, "write_ipc_stream": 42, "write_json": [43, 522], "write_ndjson": 44, "write_parquet": 45, "datatyp": 46, "date": [47, 367, 688, 924], "datetim": [48, 368, 691, 925], "decim": 49, "durat": [50, 694], "enum": 51, "float32": 52, "float64": 53, "int16": 54, "int32": 55, "int64": 56, "int8": 57, "lazyfram": [58, 59, 60, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 853], "sink_csv": 58, "sink_ipc": 59, "sink_parquet": 60, "list": [61, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 746, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1220], "null": 62, "object": 63, "sqlcontext": [64, 65, 66, 67, 68, 69], "execut": 64, "regist": 65, "register_glob": 66, "register_mani": 67, "tabl": 68, "unregist": 69, "stringcach": [70, 756], "struct": [71, 642, 643, 644, 727, 753, 1183, 1184, 1185, 1186, 1187, 1188, 1224], "time": [72, 396, 731, 957], "uint16": 73, "uint32": 74, "uint64": 75, "uint8": 76, "unknown": 77, "utf8": 78, "align_fram": 79, "register_dataframe_namespac": 80, "register_expr_namespac": 81, "register_lazyframe_namespac": 82, "register_series_namespac": 83, "build_info": 84, "collect_al": 85, "collect_all_async": 86, "concat": [87, 466, 591, 1029, 1132], "disable_string_cach": 88, "enable_string_cach": 89, "except": [90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 299], "arrowerror": 90, "columnnotfounderror": 91, "computeerror": 92, "duplicateerror": 93, "invalidoperationerror": 94, "nodataerror": 95, "norowsreturnederror": 96, "polarspanicerror": 97, "rowserror": 98, "schemaerror": 99, "schemafieldnotfounderror": 100, "shapeerror": 101, "structfieldnotfounderror": 102, "toomanyrowsreturnederror": 103, "from_arrow": 104, "from_datafram": 105, "from_dict": [106, 107], "from_numpi": 108, "from_panda": 109, "from_record": 110, "from_repr": 111, "get_index_typ": 112, "io": 113, "csv": [113, 758], "batched_read": 113, "batchedcsvread": [113, 758], "next_batch": 113, "read_avro": 114, "read_csv": 115, "read_csv_batch": 116, "read_databas": 117, "read_database_uri": 118, "read_delta": 119, "read_excel": 120, "read_ipc": 121, "read_ipc_schema": 122, "read_ipc_stream": 123, "read_json": 124, "read_ndjson": 125, "read_od": 126, "read_parquet": 127, "read_parquet_schema": 128, "scan_csv": 129, "scan_delta": 130, "scan_iceberg": 131, "scan_ipc": 132, "scan_ndjson": 133, "scan_parquet": 134, "scan_pyarrow_dataset": 135, "set_random_se": 136, "show_vers": 137, "test": [138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 1227], "assert_frame_equ": 138, "assert_frame_not_equ": 139, "assert_series_equ": 140, "assert_series_not_equ": 141, "parametr": [142, 143, 144, 145, 146, 147, 148, 1227], "column": [142, 143, 160, 742, 768], "create_list_strategi": 144, "load_profil": 146, "seri": [147, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1219], "set_profil": 148, "threadpool_s": 149, "using_string_cach": 150, "option": 151, "current": 151, "us": 151, "context": 151, "manag": 151, "decor": 151, "aggreg": [152, 300, 759, 857], "__dataframe__": 153, "appli": [154, 276, 309, 667, 836, 863], "approx_n_uniqu": [155, 310, 668, 760], "bottom_k": [156, 333, 761, 885], "cast": [157, 334, 763, 886], "clear": [158, 764, 896], "clone": [159, 765, 900], "corr": [161, 677], "describ": [162, 914], "drop": [163, 770], "drop_in_plac": 164, "drop_nul": [165, 362, 471, 771, 918, 1034], "dtype": [166, 772, 972], "equal": [167, 974], "estimated_s": [168, 975], "explod": [169, 419, 473, 599, 774, 980, 1036, 1140], "fill_nan": [171, 421, 776, 983], "fill_nul": [172, 422, 777, 984], "filter": [173, 423, 778, 985], "find_idx_by_nam": 174, "flag": [175, 986], "fold": [176, 698], "frame_equ": 177, "gather_everi": [178, 431, 780, 989], "get_column": [179, 181], "get_column_index": 180, "glimps": 182, "group_bi": [183, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 781, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849], "group_by_dynam": [184, 782], "group_by_rol": [185, 783], "groupbi": [186, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 294, 784, 852], "groupby_dynam": [187, 785], "groupby_rol": [188, 786], "hash_row": 189, "head": [190, 279, 436, 477, 702, 787, 839, 993, 1040], "height": 191, "hstack": 192, "insert_at_idx": 193, "insert_column": 194, "interpol": [195, 440, 789, 997], "is_dupl": [196, 442, 1000], "is_empti": [197, 1001], "is_uniqu": [198, 455, 1018], "item": [199, 1020], "iter_column": 200, "iter_row": 201, "iter_slic": 202, "join": [203, 478, 790, 1041], "join_asof": [204, 791], "lazi": [205, 793], "limit": [206, 461, 794, 1023], "map_row": 207, "max": [208, 282, 322, 482, 510, 711, 797, 842, 875, 934, 1045, 1069], "max_horizont": [209, 712], "mean": [210, 283, 483, 511, 713, 798, 843, 935, 1046, 1070], "mean_horizont": 211, "median": [212, 284, 512, 714, 799, 844, 936, 1071], "melt": [213, 800], "merge_sort": [214, 801], "min": [215, 285, 323, 484, 523, 715, 802, 845, 876, 941, 1047, 1072], "min_horizont": [216, 716], "n_chunk": [217, 1074], "n_uniqu": [218, 286, 527, 717, 846, 1075], "null_count": [219, 539, 803, 1081], "partition_bi": 220, "pipe": [221, 545, 804], "pivot": 222, "product": [223, 548, 1085], "quantil": [224, 287, 550, 719, 806, 847, 1087], "rechunk": [225, 553, 1089], "renam": [226, 807, 1091], "replac": [227, 556, 615, 1092, 1156], "replace_at_idx": 228, "replace_column": 229, "revers": [230, 485, 558, 618, 808, 1048, 1094, 1159], "roll": [231, 561, 809], "row": [232, 233], "rows_by_kei": 234, "sampl": [235, 486, 575, 1049, 1110], "schema": [236, 810, 1187], "select": [237, 297, 724, 749, 811, 855, 1222], "select_seq": [238, 812], "set_sort": [239, 577, 814, 1116], "shape": [240, 1117], "shift": [241, 491, 578, 815, 1054, 1118], "shift_and_fil": [242, 579, 816, 1119], "shrink_to_fit": [243, 1121], "slice": [244, 492, 586, 621, 818, 1055, 1127, 1162], "sort": [245, 493, 587, 819, 1056, 1128], "std": [246, 590, 726, 820, 1130], "sum": [247, 288, 324, 494, 647, 728, 821, 848, 877, 1057, 1189], "sum_horizont": [248, 729], "tail": [249, 289, 495, 648, 730, 822, 849, 1058, 1190], "take_everi": [250, 650, 823, 1192], "to_arrow": [251, 1195], "to_dict": [252, 253], "to_dummi": [254, 1196], "to_init_repr": [255, 1198], "to_numpi": [256, 1200], "to_panda": [257, 1201], "to_seri": 258, "to_struct": [259, 498, 1061], "top_k": [260, 654, 824, 1203], "transpos": 261, "uniqu": [262, 326, 499, 656, 825, 879, 1062, 1204], "unnest": [263, 826, 1188], "unstack": 264, "updat": [265, 827], "upsampl": 266, "var": [267, 660, 734, 828, 1208], "vstack": 268, "width": [269, 829], "with_column": [270, 830], "with_columns_seq": [271, 831], "with_row_count": [272, 833], "__iter__": 273, "agg": [274, 834], "all": [275, 305, 462, 663, 835, 860, 1025], "count": [277, 345, 678, 837], "first": [278, 424, 474, 697, 779, 838, 1037], "last": [280, 458, 479, 706, 792, 840, 1042], "map_group": [281, 710, 841], "attribut": [290, 850, 1212], "comput": [291, 743, 1216], "descript": [292, 851, 1217], "export": [293, 1218], "miscellan": [296, 748, 756, 854, 1221], "manipul": [297, 749, 855, 1222], "data": 298, "type": 298, "numer": [298, 751], "tempor": [298, 754, 1225], "nest": 298, "other": 298, "expr": [301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662], "ab": [301, 858], "add": 302, "agg_group": 303, "alia": [304, 859], "and_": 306, "ani": [307, 463, 665, 861, 1026], "append": [308, 862], "arcco": [311, 864], "arccosh": [312, 865], "arcsin": [313, 866], "arcsinh": [314, 867], "arctan": [315, 868], "arctanh": [316, 869], "arg_max": [317, 464, 870, 1027], "arg_min": [318, 465, 871, 1028], "arg_sort": [319, 872], "arg_tru": [320, 873], "arg_uniqu": [321, 874], "arr": [322, 323, 324, 325, 326, 875, 876, 877, 878, 879], "to_list": [325, 878, 1199], "backward_fil": 327, "bin": [328, 329, 330, 331, 332, 880, 881, 882, 883, 884], "contain": [328, 467, 592, 880, 1030, 1133], "decod": [329, 596, 881, 1137], "encod": [330, 597, 882, 1138], "ends_with": [331, 598, 883, 1139], "starts_with": [332, 625, 884, 1166], "cat": [335, 336, 887, 888, 889, 890, 891, 892], "get_categori": [335, 888], "set_ord": [336, 890], "cbrt": [337, 893], "ceil": [338, 894], "clip": [339, 897], "clip_max": [340, 898], "clip_min": [341, 899], "co": [342, 901], "cosh": [343, 902], "cot": [344, 903], "cum_count": 346, "cum_max": [347, 904], "cum_min": [348, 905], "cum_prod": [349, 906], "cum_sum": [350, 682, 907], "cumcount": 351, "cummax": [352, 908], "cummin": [353, 909], "cumprod": [354, 910], "cumsum": [355, 686, 911], "cumulative_ev": [356, 912], "cut": [357, 913], "degre": 358, "diff": [359, 470, 915, 1033], "dot": [360, 916], "drop_nan": [361, 917], "dt": [363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971], "base_utc_offset": [363, 920], "cast_time_unit": [364, 921], "combin": [365, 922], "convert_time_zon": [366, 923], "dai": [369, 370, 926, 927], "dst_offset": [371, 928], "epoch": [372, 929], "hour": [373, 374, 930, 931], "is_leap_year": [375, 932], "iso_year": [376, 933], "microsecond": [377, 378, 937, 938], "millisecond": [379, 380, 939, 940], "minut": [381, 382, 942, 943], "month": [383, 944], "month_end": [384, 945], "month_start": [385, 946], "nanosecond": [386, 387, 947, 948], "offset_bi": [388, 949], "ordinal_dai": [389, 950], "quarter": [390, 951], "replace_time_zon": [391, 952], "round": [392, 573, 953, 1108], "second": [393, 394, 954, 955], "strftime": [395, 956], "timestamp": [397, 958], "to_str": [398, 959], "total_dai": [399, 960], "total_hour": [400, 961], "total_microsecond": [401, 962], "total_millisecond": [402, 963], "total_minut": [403, 964], "total_nanosecond": [404, 965], "total_second": [405, 966], "truncat": [406, 967], "week": [407, 968], "weekdai": [408, 969], "with_time_unit": [409, 970], "year": [410, 971], "entropi": [411, 973], "eq": [412, 513], "eq_miss": 413, "ewm_mean": [414, 976], "ewm_std": [415, 977], "ewm_var": [416, 978], "exclud": [417, 696], "exp": [418, 979], "extend_const": [420, 982], "flatten": 425, "floor": [426, 987], "floordiv": 427, "forward_fil": 428, "from_json": 429, "gather": [430, 475, 988, 1038], "ge": 432, "get": [433, 476, 1039], "gt": 434, "hash": [435, 992], "hist": [437, 994], "implod": [438, 703, 995], "inspect": [439, 788], "is_between": [441, 998], "is_finit": [443, 1002], "is_first": [444, 1003], "is_first_distinct": [445, 1004], "is_in": [446, 1006], "is_infinit": [447, 1007], "is_last": [448, 1009], "is_last_distinct": [449, 1010], "is_nan": [450, 1011], "is_not": 451, "is_not_nan": [452, 1012], "is_not_nul": [453, 1013], "is_nul": [454, 1014], "keep_nam": 456, "kurtosi": [457, 1021], "le": 459, "len": [460, 480, 1022, 1043], "count_match": [468, 469, 594, 595, 1031, 1032, 1135, 1136], "eval": [472, 1035], "length": [481, 608, 1044, 1149], "set_differ": [487, 1050], "set_intersect": [488, 1051], "set_symmetric_differ": [489, 1052], "set_union": [490, 1053], "take": [496, 649, 1059, 1191], "to_arrai": [497, 1060], "log": [500, 1063], "log10": [501, 1064], "log1p": [502, 1065], "lower_bound": [503, 1066], "lt": 504, "map": [505, 529, 708, 795], "map_alia": 506, "map_batch": [507, 709, 796], "map_dict": [508, 1067], "map_el": [509, 1068], "meta": [513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 747], "has_multiple_output": 514, "is_regex_project": 515, "ne": [516, 536], "output_nam": 517, "pop": 518, "root_nam": 519, "tree_format": 520, "undo_alias": 521, "mod": 524, "mode": [525, 1073], "mul": 526, "name": [528, 529, 530, 531, 532, 533, 742, 750, 1076], "keep": 528, "prefix": [530, 547], "suffix": [531, 646], "to_lowercas": [532, 637, 1178], "to_uppercas": [533, 640, 1181], "nan_max": [534, 1077], "nan_min": [535, 1078], "ne_miss": 537, "not_": [538, 1080], "or_": 540, "over": 541, "pct_chang": [542, 1082], "peak_max": [543, 1083], "peak_min": [544, 1084], "pow": 546, "qcut": [549, 1086], "radian": 551, "rank": [552, 1088], "reinterpret": [554, 1090], "repeat_bi": 555, "reshap": [557, 1093], "rle": [559, 1095], "rle_id": [560, 1096], "rolling_appli": [562, 1097], "rolling_map": [563, 1098], "rolling_max": [564, 1099], "rolling_mean": [565, 1100], "rolling_median": [566, 1101], "rolling_min": [567, 1102], "rolling_quantil": [568, 1103], "rolling_skew": [569, 1104], "rolling_std": [570, 1105], "rolling_sum": [571, 1106], "rolling_var": [572, 1107], "round_sig_fig": [574, 1109], "search_sort": [576, 1112], "shrink_dtyp": [580, 1120], "shuffl": [581, 1122], "sign": [582, 1123], "sin": [583, 1124], "sinh": [584, 1125], "skew": [585, 1126], "sort_bi": 588, "sqrt": [589, 1129], "str": [591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182], "contains_ani": [593, 1134], "extract": [600, 1141], "extract_al": [601, 1142], "extract_group": [602, 1143], "json_decod": [603, 1144], "json_extract": [604, 1145], "json_path_match": [605, 1146], "len_byt": [606, 1147], "len_char": [607, 1148], "ljust": [609, 1150], "lstrip": [610, 1151], "n_char": [611, 1152], "pad_end": [612, 1153], "pad_start": [613, 1154], "parse_int": [614, 1155], "replace_al": [616, 1157], "replace_mani": [617, 1158], "rjust": [619, 1160], "rstrip": [620, 1161], "split": [622, 1163], "split_exact": [623, 1164], "splitn": [624, 1165], "strip": [626, 1167], "strip_char": [627, 1168], "strip_chars_end": [628, 1169], "strip_chars_start": [629, 1170], "strip_prefix": [630, 1171], "strip_suffix": [631, 1172], "strptime": [632, 1173], "to_dat": [633, 1174], "to_datetim": [634, 1175], "to_decim": [635, 1176], "to_integ": [636, 1177], "to_tim": [638, 1179], "to_titlecas": [639, 1180], "zfill": [641, 1182], "field": [642, 1183, 1184], "json_encod": [643, 1185], "rename_field": [644, 1186], "sub": 645, "tan": [651, 1193], "tanh": [652, 1194], "to_phys": [653, 1202], "truediv": 655, "unique_count": [657, 1205], "upper_bound": [658, 1206], "value_count": [659, 1207], "where": 661, "xor": 662, "all_horizont": 664, "any_horizont": 666, "arang": 669, "arctan2": 670, "arctan2d": 671, "arg_sort_bi": 672, "arg_wher": 673, "coalesc": 674, "concat_list": 675, "concat_str": 676, "cov": 679, "cum_fold": 680, "cum_reduc": 681, "cum_sum_horizont": 683, "cumfold": 684, "cumreduc": 685, "cumsum_horizont": 687, "date_rang": [689, 690], "datetime_rang": [692, 693], "element": 695, "format": 699, "from_epoch": 700, "group": 701, "int_rang": [704, 705], "lit": 707, "ones": 718, "reduc": 720, "repeat": 721, "rolling_corr": 722, "rolling_cov": 723, "sql_expr": 725, "time_rang": [732, 733], "when": 735, "zero": 736, "categori": [740, 1215], "col": 741, "express": 745, "oper": [751, 856], "conjunct": 751, "comparison": 751, "string": [752, 1223], "window": 755, "convers": 756, "parallel": 756, "random": 756, "refer": 757, "input": 758, "output": 758, "feather": 758, "ipc": 758, "parquet": 758, "databas": 758, "json": 758, "avro": 758, "spreadsheet": 758, "apach": 758, "iceberg": 758, "delta": 758, "lake": 758, "dataset": 758, "cach": 762, "collect": 766, "collect_async": 767, "deseri": 769, "explain": 773, "fetch": 775, "profil": [805, 1227], "serial": 813, "show_graph": 817, "with_context": 832, "lazygroupbi": [834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849], "read": 854, "write": 854, "logic": 854, "plan": 854, "selector": 856, "import": 856, "set": [856, 1114], "is_loc": 889, "to_loc": 891, "uses_lexical_ord": 892, "chunk_length": 895, "get_chunk": 990, "has_valid": 991, "inner_dtyp": 996, "is_boolean": 999, "is_float": 1005, "is_integ": 1008, "is_numer": 1015, "is_sort": 1016, "is_tempor": 1017, "is_utf8": 1019, "new_from_index": 1079, "scatter": 1111, "series_equ": 1113, "set_at_idx": 1115, "to_fram": 1197, "view": 1209, "zip_with": 1210, "sql": 1226, "method": 1226, "assert": 1227, "primit": 1227, "strategi": 1227, "helper": 1227, "util": 1228}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 60}, "alltitles": {"polars.DataFrame.drop_nulls": [[165, "polars-dataframe-drop-nulls"]], "polars.DataFrame.insert_column": [[194, "polars-dataframe-insert-column"]], "polars.DataFrame.max_horizontal": [[209, "polars-dataframe-max-horizontal"]], "polars.DataFrame.filter": [[173, "polars-dataframe-filter"]], "polars.DataFrame.join_asof": [[204, "polars-dataframe-join-asof"]], "polars.DataFrame.fill_null": [[172, "polars-dataframe-fill-null"]], "polars.DataFrame.fold": [[176, "polars-dataframe-fold"]], "polars.DataFrame.explode": [[169, "polars-dataframe-explode"]], "polars.DataFrame.group_by": [[183, "polars-dataframe-group-by"]], "polars.DataFrame.head": [[190, "polars-dataframe-head"]], "polars.DataFrame.hstack": [[192, "polars-dataframe-hstack"]], "polars.DataFrame.equals": [[167, "polars-dataframe-equals"]], "polars.DataFrame.limit": [[206, "polars-dataframe-limit"]], "polars.DataFrame.merge_sorted": [[214, "polars-dataframe-merge-sorted"]], "polars.DataFrame.lazy": [[205, "polars-dataframe-lazy"]], "polars.DataFrame.group_by_rolling": [[185, "polars-dataframe-group-by-rolling"]], "polars.DataFrame.n_unique": [[218, "polars-dataframe-n-unique"]], "polars.DataFrame.estimated_size": [[168, "polars-dataframe-estimated-size"]], "polars.DataFrame.extend": [[170, "polars-dataframe-extend"]], "polars.DataFrame.groupby": [[186, "polars-dataframe-groupby"]], "polars.DataFrame.frame_equal": [[177, "polars-dataframe-frame-equal"]], "polars.DataFrame.flags": [[175, "polars-dataframe-flags"]], "polars.DataFrame.height": [[191, "polars-dataframe-height"]], "polars.DataFrame.item": [[199, "polars-dataframe-item"]], "polars.DataFrame.max": [[208, "polars-dataframe-max"]], "polars.DataFrame.mean_horizontal": [[211, "polars-dataframe-mean-horizontal"]], "polars.DataFrame.mean": [[210, "polars-dataframe-mean"]], "polars.DataFrame.join": [[203, "polars-dataframe-join"]], "polars.DataFrame.insert_at_idx": [[193, "polars-dataframe-insert-at-idx"]], "polars.DataFrame.glimpse": [[182, "polars-dataframe-glimpse"]], "polars.DataFrame.find_idx_by_name": [[174, "polars-dataframe-find-idx-by-name"]], "polars.DataFrame.is_duplicated": [[196, "polars-dataframe-is-duplicated"]], "polars.DataFrame.map_rows": [[207, "polars-dataframe-map-rows"]], "polars.DataFrame.median": [[212, "polars-dataframe-median"]], "polars.DataFrame.melt": [[213, "polars-dataframe-melt"]], "polars.DataFrame.iter_columns": [[200, "polars-dataframe-iter-columns"]], "polars.DataFrame.hash_rows": [[189, "polars-dataframe-hash-rows"]], "polars.DataFrame.get_column_index": [[180, "polars-dataframe-get-column-index"]], "polars.DataFrame.null_count": [[219, "polars-dataframe-null-count"]], "polars.DataFrame.groupby_rolling": [[188, "polars-dataframe-groupby-rolling"]], "polars.DataFrame.fill_nan": [[171, "polars-dataframe-fill-nan"]], "polars.DataFrame.interpolate": [[195, "polars-dataframe-interpolate"]], "polars.DataFrame.min": [[215, "polars-dataframe-min"]], "polars.DataFrame.group_by_dynamic": [[184, "polars-dataframe-group-by-dynamic"]], "polars.DataFrame.get_columns": [[181, "polars-dataframe-get-columns"]], "polars.DataFrame.gather_every": [[178, "polars-dataframe-gather-every"]], "polars.DataFrame.groupby_dynamic": [[187, "polars-dataframe-groupby-dynamic"]], "polars.DataFrame.is_empty": [[197, "polars-dataframe-is-empty"]], "polars.DataFrame.min_horizontal": [[216, "polars-dataframe-min-horizontal"]], "polars.DataFrame.dtypes": [[166, "polars-dataframe-dtypes"]], "polars.DataFrame.iter_slices": [[202, "polars-dataframe-iter-slices"]], "polars.DataFrame.get_column": [[179, "polars-dataframe-get-column"]], "polars.DataFrame.n_chunks": [[217, "polars-dataframe-n-chunks"]], "polars.DataFrame.is_unique": [[198, "polars-dataframe-is-unique"]], "polars.DataFrame.iter_rows": [[201, "polars-dataframe-iter-rows"]], "polars.DataFrame.__dataframe__": [[153, "polars-dataframe-dataframe"]], "polars.read_delta": [[119, "polars-read-delta"]], "polars.show_versions": [[137, "polars-show-versions"]], "polars.scan_iceberg": [[131, "polars-scan-iceberg"]], "polars.testing.parametric.series": [[147, "polars-testing-parametric-series"]], "polars.DataFrame.describe": [[162, "polars-dataframe-describe"]], "polars.testing.parametric.columns": [[143, "polars-testing-parametric-columns"]], "polars.read_excel": [[120, "polars-read-excel"]], "polars.using_string_cache": [[150, "polars-using-string-cache"]], "Aggregation": [[152, "aggregation"], [857, "aggregation"], [759, "aggregation"], [300, "aggregation"]], "polars.DataFrame.apply": [[154, "polars-dataframe-apply"]], "polars.DataFrame.bottom_k": [[156, "polars-dataframe-bottom-k"]], "polars.scan_ndjson": [[133, "polars-scan-ndjson"]], "polars.DataFrame.clear": [[158, "polars-dataframe-clear"]], "polars.testing.parametric.load_profile": [[146, "polars-testing-parametric-load-profile"]], "polars.scan_csv": [[129, "polars-scan-csv"]], "polars.testing.assert_frame_not_equal": [[139, "polars-testing-assert-frame-not-equal"]], "polars.read_parquet_schema": [[128, "polars-read-parquet-schema"]], "polars.DataFrame.drop_in_place": [[164, "polars-dataframe-drop-in-place"]], "polars.get_index_type": [[112, "polars-get-index-type"]], "polars.testing.assert_frame_equal": [[138, "polars-testing-assert-frame-equal"]], "polars.testing.assert_series_not_equal": [[141, "polars-testing-assert-series-not-equal"]], "Config": [[151, "config"]], "Config options": [[151, "config-options"]], "Config load, save, and current state": [[151, "config-load-save-and-current-state"]], "Use as a context manager": [[151, "use-as-a-context-manager"]], "Use as a function decorator": [[151, "use-as-a-function-decorator"]], "polars.DataFrame.drop": [[163, "polars-dataframe-drop"]], "polars.scan_pyarrow_dataset": [[135, "polars-scan-pyarrow-dataset"]], "polars.read_avro": [[114, "polars-read-avro"]], "polars.threadpool_size": [[149, "polars-threadpool-size"]], "polars.DataFrame.approx_n_unique": [[155, "polars-dataframe-approx-n-unique"]], "polars.scan_parquet": [[134, "polars-scan-parquet"]], "polars.read_csv": [[115, "polars-read-csv"]], "polars.from_repr": [[111, "polars-from-repr"]], "polars.read_ndjson": [[125, "polars-read-ndjson"]], "polars.read_parquet": [[127, "polars-read-parquet"]], "polars.read_ipc_stream": [[123, "polars-read-ipc-stream"]], "polars.set_random_seed": [[136, "polars-set-random-seed"]], "polars.testing.parametric.create_list_strategy": [[144, "polars-testing-parametric-create-list-strategy"]], "polars.read_ipc_schema": [[122, "polars-read-ipc-schema"]], "polars.DataFrame.corr": [[161, "polars-dataframe-corr"]], "polars.scan_ipc": [[132, "polars-scan-ipc"]], "polars.read_csv_batched": [[116, "polars-read-csv-batched"]], "polars.testing.parametric.set_profile": [[148, "polars-testing-parametric-set-profile"]], "polars.DataFrame.columns": [[160, "polars-dataframe-columns"]], "polars.read_database": [[117, "polars-read-database"]], "polars.read_ods": [[126, "polars-read-ods"]], "polars.DataFrame.clone": [[159, "polars-dataframe-clone"]], "polars.testing.parametric.dataframes": [[145, "polars-testing-parametric-dataframes"]], "polars.DataFrame.cast": [[157, "polars-dataframe-cast"]], "polars.testing.assert_series_equal": [[140, "polars-testing-assert-series-equal"]], "polars.read_ipc": [[121, "polars-read-ipc"]], "polars.scan_delta": [[130, "polars-scan-delta"]], "polars.testing.parametric.column": [[142, "polars-testing-parametric-column"]], "polars.read_database_uri": [[118, "polars-read-database-uri"]], "polars.from_records": [[110, "polars-from-records"]], "polars.read_json": [[124, "polars-read-json"]], "polars.io.csv.batched_reader.BatchedCsvReader.next_batches": [[113, "polars-io-csv-batched-reader-batchedcsvreader-next-batches"]], "polars.DataFrame.write_json": [[43, "polars-dataframe-write-json"]], "polars.Config.set_streaming_chunk_size": [[19, "polars-config-set-streaming-chunk-size"]], "polars.Config.set_tbl_width_chars": [[31, "polars-config-set-tbl-width-chars"]], "polars.Config.set_fmt_table_cell_list_len": [[18, "polars-config-set-fmt-table-cell-list-len"]], "polars.Binary": [[3, "polars-binary"]], "Extending the API": [[1, "extending-the-api"]], "Providing new functionality": [[1, "providing-new-functionality"]], "Available registrations": [[1, "available-registrations"]], "Examples": [[1, "examples"], [1227, "examples"], [856, "examples"]], "polars.Config.state": [[35, "polars-config-state"]], "polars.Config.set_tbl_rows": [[30, "polars-config-set-tbl-rows"]], "polars.Config.set_tbl_hide_column_data_types": [[26, "polars-config-set-tbl-hide-column-data-types"]], "polars.Config.set_decimal_separator": [[14, "polars-config-set-decimal-separator"]], "polars.DataFrame.write_csv": [[37, "polars-dataframe-write-csv"]], "polars.Datetime": [[48, "polars-datetime"]], "polars.Date": [[47, "polars-date"]], "polars.Config.set_ascii_tables": [[12, "polars-config-set-ascii-tables"]], "polars.Categorical": [[5, "polars-categorical"]], "polars.Config.set_float_precision": [[15, "polars-config-set-float-precision"]], "polars.Config.set_tbl_hide_dataframe_shape": [[28, "polars-config-set-tbl-hide-dataframe-shape"]], "polars.Enum": [[51, "polars-enum"]], "polars.Config.set_tbl_column_data_type_inline": [[23, "polars-config-set-tbl-column-data-type-inline"]], "polars.Config.save_to_file": [[11, "polars-config-save-to-file"]], "Index": [[0, "index"]], "polars.Config.set_tbl_hide_dtype_separator": [[29, "polars-config-set-tbl-hide-dtype-separator"]], "polars.DataFrame.write_parquet": [[45, "polars-dataframe-write-parquet"]], "polars.Config.restore_defaults": [[9, "polars-config-restore-defaults"]], "polars.Array": [[2, "polars-array"]], "polars.Config.load_from_file": [[8, "polars-config-load-from-file"]], "polars.DataFrame.write_avro": [[36, "polars-dataframe-write-avro"]], "polars.Float32": [[52, "polars-float32"]], "polars.Duration": [[50, "polars-duration"]], "polars.Config.activate_decimals": [[6, "polars-config-activate-decimals"]], "polars.DataFrame.write_excel": [[40, "polars-dataframe-write-excel"]], "polars.Float64": [[53, "polars-float64"]], "polars.Config.set_tbl_formatting": [[25, "polars-config-set-tbl-formatting"]], "polars.Config.set_tbl_dataframe_shape_below": [[24, "polars-config-set-tbl-dataframe-shape-below"]], "polars.Config.set_tbl_hide_column_names": [[27, "polars-config-set-tbl-hide-column-names"]], "polars.Config.set_thousands_separator": [[32, "polars-config-set-thousands-separator"]], "polars.DataFrame.write_delta": [[39, "polars-dataframe-write-delta"]], "polars.DataFrame.write_ipc_stream": [[42, "polars-dataframe-write-ipc-stream"]], "polars.Config.set_fmt_str_lengths": [[17, "polars-config-set-fmt-str-lengths"]], "polars.Config.set_verbose": [[34, "polars-config-set-verbose"]], "polars.Decimal": [[49, "polars-decimal"]], "polars.Config.set_auto_structify": [[13, "polars-config-set-auto-structify"]], "polars.Config.set_tbl_cell_numeric_alignment": [[21, "polars-config-set-tbl-cell-numeric-alignment"]], "polars.Config.load": [[7, "polars-config-load"]], "polars.Config.set_trim_decimal_zeros": [[33, "polars-config-set-trim-decimal-zeros"]], "polars.Config.save": [[10, "polars-config-save"]], "polars.Config.set_fmt_float": [[16, "polars-config-set-fmt-float"]], "polars.Boolean": [[4, "polars-boolean"]], "polars.DataFrame.write_database": [[38, "polars-dataframe-write-database"]], "polars.DataFrame.write_ndjson": [[44, "polars-dataframe-write-ndjson"]], "polars.DataFrame.write_ipc": [[41, "polars-dataframe-write-ipc"]], "polars.DataType": [[46, "polars-datatype"]], "polars.Config.set_tbl_cols": [[22, "polars-config-set-tbl-cols"]], "polars.Int16": [[54, "polars-int16"]], "polars.Config.set_tbl_cell_alignment": [[20, "polars-config-set-tbl-cell-alignment"]], "polars.Series.str.strip_suffix": [[1172, "polars-series-str-strip-suffix"]], "polars.Series.top_k": [[1203, "polars-series-top-k"]], "polars.Series.struct.rename_fields": [[1186, "polars-series-struct-rename-fields"]], "polars.Series.struct.fields": [[1184, "polars-series-struct-fields"]], "polars.Series.struct.field": [[1183, "polars-series-struct-field"]], "polars.Series.str.to_titlecase": [[1180, "polars-series-str-to-titlecase"]], "polars.Series.view": [[1209, "polars-series-view"]], "polars.Series.to_numpy": [[1200, "polars-series-to-numpy"]], "polars.Series.str.parse_int": [[1155, "polars-series-str-parse-int"]], "polars.Series.str.reverse": [[1159, "polars-series-str-reverse"]], "polars.Series.tail": [[1190, "polars-series-tail"]], "polars.Series.to_arrow": [[1195, "polars-series-to-arrow"]], "polars.Series.str.to_uppercase": [[1181, "polars-series-str-to-uppercase"]], "polars.Series.struct.schema": [[1187, "polars-series-struct-schema"]], "polars.Series.to_physical": [[1202, "polars-series-to-physical"]], "polars.Series.str.strptime": [[1173, "polars-series-str-strptime"]], "polars.Series.tan": [[1193, "polars-series-tan"]], "polars.Series.str.to_datetime": [[1175, "polars-series-str-to-datetime"]], "polars.Series.struct.unnest": [[1188, "polars-series-struct-unnest"]], "polars.Series.take_every": [[1192, "polars-series-take-every"]], "polars.Series.to_frame": [[1197, "polars-series-to-frame"]], "polars.Series.str.strip_chars": [[1168, "polars-series-str-strip-chars"]], "polars.Series.to_dummies": [[1196, "polars-series-to-dummies"]], "polars.Series.str.zfill": [[1182, "polars-series-str-zfill"]], "polars.Series.str.strip_prefix": [[1171, "polars-series-str-strip-prefix"]], "polars.Series.str.replace": [[1156, "polars-series-str-replace"]], "polars.Series.str.strip_chars_end": [[1169, "polars-series-str-strip-chars-end"]], "polars.Series.struct.json_encode": [[1185, "polars-series-struct-json-encode"]], "polars.Series.str.to_decimal": [[1176, "polars-series-str-to-decimal"]], "polars.Series.unique": [[1204, "polars-series-unique"]], "polars.Series.str.split_exact": [[1164, "polars-series-str-split-exact"]], "polars.Series.str.rjust": [[1160, "polars-series-str-rjust"]], "polars.Series.str.splitn": [[1165, "polars-series-str-splitn"]], "polars.Series.str.starts_with": [[1166, "polars-series-str-starts-with"]], "polars.Series.str.replace_all": [[1157, "polars-series-str-replace-all"]], "polars.Series.str.strip_chars_start": [[1170, "polars-series-str-strip-chars-start"]], "polars.Series.to_list": [[1199, "polars-series-to-list"]], "polars.Series.tanh": [[1194, "polars-series-tanh"]], "polars.Series.take": [[1191, "polars-series-take"]], "polars.Series.str.strip": [[1167, "polars-series-str-strip"]], "polars.Series.var": [[1208, "polars-series-var"]], "polars.Series.str.replace_many": [[1158, "polars-series-str-replace-many"]], "polars.Series.str.to_date": [[1174, "polars-series-str-to-date"]], "polars.Series.unique_counts": [[1205, "polars-series-unique-counts"]], "polars.Series.str.split": [[1163, "polars-series-str-split"]], "polars.Series.str.slice": [[1162, "polars-series-str-slice"]], "polars.Series.to_pandas": [[1201, "polars-series-to-pandas"]], "polars.Series.value_counts": [[1207, "polars-series-value-counts"]], "polars.Series.sum": [[1189, "polars-series-sum"]], "polars.Series.str.to_integer": [[1177, "polars-series-str-to-integer"]], "polars.Series.str.to_time": [[1179, "polars-series-str-to-time"]], "polars.Series.str.to_lowercase": [[1178, "polars-series-str-to-lowercase"]], "polars.Series.upper_bound": [[1206, "polars-series-upper-bound"]], "polars.Series.str.rstrip": [[1161, "polars-series-str-rstrip"]], "polars.Series.to_init_repr": [[1198, "polars-series-to-init-repr"]], "polars.exceptions.SchemaError": [[99, "polars-exceptions-schemaerror"]], "polars.SQLContext.register_many": [[67, "polars-sqlcontext-register-many"]], "polars.exceptions.ColumnNotFoundError": [[91, "polars-exceptions-columnnotfounderror"]], "polars.disable_string_cache": [[88, "polars-disable-string-cache"]], "polars.SQLContext.register_globals": [[66, "polars-sqlcontext-register-globals"]], "polars.Time": [[72, "polars-time"]], "polars.SQLContext.register": [[65, "polars-sqlcontext-register"]], "polars.Null": [[62, "polars-null"]], "polars.from_dicts": [[107, "polars-from-dicts"]], "polars.Object": [[63, "polars-object"]], "polars.UInt8": [[76, "polars-uint8"]], "polars.api.register_lazyframe_namespace": [[82, "polars-api-register-lazyframe-namespace"]], "polars.UInt64": [[75, "polars-uint64"]], "polars.from_pandas": [[109, "polars-from-pandas"]], "polars.concat": [[87, "polars-concat"]], "polars.exceptions.SchemaFieldNotFoundError": [[100, "polars-exceptions-schemafieldnotfounderror"]], "polars.Struct": [[71, "polars-struct"]], "polars.exceptions.PolarsPanicError": [[97, "polars-exceptions-polarspanicerror"]], "polars.UInt32": [[74, "polars-uint32"]], "polars.exceptions.ArrowError": [[90, "polars-exceptions-arrowerror"]], "polars.Utf8": [[78, "polars-utf8"]], "polars.UInt16": [[73, "polars-uint16"]], "polars.from_dict": [[106, "polars-from-dict"]], "polars.build_info": [[84, "polars-build-info"]], "polars.exceptions.NoDataError": [[95, "polars-exceptions-nodataerror"]], "polars.exceptions.DuplicateError": [[93, "polars-exceptions-duplicateerror"]], "polars.api.register_series_namespace": [[83, "polars-api-register-series-namespace"]], "polars.Int8": [[57, "polars-int8"]], "polars.LazyFrame.sink_parquet": [[60, "polars-lazyframe-sink-parquet"]], "polars.from_numpy": [[108, "polars-from-numpy"]], "polars.LazyFrame.sink_ipc": [[59, "polars-lazyframe-sink-ipc"]], "polars.align_frames": [[79, "polars-align-frames"]], "polars.exceptions.NoRowsReturnedError": [[96, "polars-exceptions-norowsreturnederror"]], "polars.Unknown": [[77, "polars-unknown"]], "polars.collect_all": [[85, "polars-collect-all"]], "polars.exceptions.TooManyRowsReturnedError": [[103, "polars-exceptions-toomanyrowsreturnederror"]], "polars.List": [[61, "polars-list"]], "polars.SQLContext.tables": [[68, "polars-sqlcontext-tables"]], "polars.StringCache": [[70, "polars-stringcache"]], "polars.exceptions.InvalidOperationError": [[94, "polars-exceptions-invalidoperationerror"]], "polars.api.register_expr_namespace": [[81, "polars-api-register-expr-namespace"]], "polars.exceptions.RowsError": [[98, "polars-exceptions-rowserror"]], "polars.LazyFrame.sink_csv": [[58, "polars-lazyframe-sink-csv"]], "polars.exceptions.ComputeError": [[92, "polars-exceptions-computeerror"]], "polars.from_dataframe": [[105, "polars-from-dataframe"]], "polars.Int64": [[56, "polars-int64"]], "polars.Int32": [[55, "polars-int32"]], "polars.collect_all_async": [[86, "polars-collect-all-async"]], "polars.exceptions.StructFieldNotFoundError": [[102, "polars-exceptions-structfieldnotfounderror"]], "polars.SQLContext.execute": [[64, "polars-sqlcontext-execute"]], "polars.api.register_dataframe_namespace": [[80, "polars-api-register-dataframe-namespace"]], "polars.SQLContext.unregister": [[69, "polars-sqlcontext-unregister"]], "polars.exceptions.ShapeError": [[101, "polars-exceptions-shapeerror"]], "polars.from_arrow": [[104, "polars-from-arrow"]], "polars.enable_string_cache": [[89, "polars-enable-string-cache"]], "polars.Series.set": [[1114, "polars-series-set"]], "polars.Series.sqrt": [[1129, "polars-series-sqrt"]], "polars.Series.slice": [[1127, "polars-series-slice"]], "polars.Series.rolling_mean": [[1100, "polars-series-rolling-mean"]], "polars.Series.str.json_path_match": [[1146, "polars-series-str-json-path-match"]], "polars.Series.str.lstrip": [[1151, "polars-series-str-lstrip"]], "polars.Series.sort": [[1128, "polars-series-sort"]], "polars.Series.str.pad_start": [[1154, "polars-series-str-pad-start"]], "polars.Series.sinh": [[1125, "polars-series-sinh"]], "polars.Series.str.count_match": [[1135, "polars-series-str-count-match"]], "polars.Series.str.decode": [[1137, "polars-series-str-decode"]], "polars.Series.str.extract": [[1141, "polars-series-str-extract"]], "polars.Series.set_sorted": [[1116, "polars-series-set-sorted"]], "polars.Series.str.lengths": [[1149, "polars-series-str-lengths"]], "polars.Series.rolling_quantile": [[1103, "polars-series-rolling-quantile"]], "polars.Series.str.concat": [[1132, "polars-series-str-concat"]], "polars.Series.str.explode": [[1140, "polars-series-str-explode"]], "polars.Series.shift": [[1118, "polars-series-shift"]], "polars.Series.rolling_min": [[1102, "polars-series-rolling-min"]], "polars.Series.str.json_extract": [[1145, "polars-series-str-json-extract"]], "polars.Series.skew": [[1126, "polars-series-skew"]], "polars.Series.shrink_to_fit": [[1121, "polars-series-shrink-to-fit"]], "polars.Series.str.extract_all": [[1142, "polars-series-str-extract-all"]], "polars.Series.str.len_chars": [[1148, "polars-series-str-len-chars"]], "polars.Series.sample": [[1110, "polars-series-sample"]], "polars.Series.shape": [[1117, "polars-series-shape"]], "polars.Series.sin": [[1124, "polars-series-sin"]], "polars.Series.str.extract_groups": [[1143, "polars-series-str-extract-groups"]], "polars.Series.round": [[1108, "polars-series-round"]], "polars.Series.std": [[1130, "polars-series-std"]], "polars.Series.str.json_decode": [[1144, "polars-series-str-json-decode"]], "polars.Series.sign": [[1123, "polars-series-sign"]], "polars.Series.str": [[1131, "polars-series-str"]], "polars.Series.str.ends_with": [[1139, "polars-series-str-ends-with"]], "polars.Series.str.contains_any": [[1134, "polars-series-str-contains-any"]], "polars.Series.str.pad_end": [[1153, "polars-series-str-pad-end"]], "polars.Series.shuffle": [[1122, "polars-series-shuffle"]], "polars.Series.rolling_std": [[1105, "polars-series-rolling-std"]], "polars.Series.series_equal": [[1113, "polars-series-series-equal"]], "polars.Series.str.contains": [[1133, "polars-series-str-contains"]], "polars.Series.search_sorted": [[1112, "polars-series-search-sorted"]], "polars.Series.str.len_bytes": [[1147, "polars-series-str-len-bytes"]], "polars.Series.shrink_dtype": [[1120, "polars-series-shrink-dtype"]], "polars.Series.rolling_median": [[1101, "polars-series-rolling-median"]], "polars.Series.str.n_chars": [[1152, "polars-series-str-n-chars"]], "polars.Series.str.ljust": [[1150, "polars-series-str-ljust"]], "polars.Series.rolling_sum": [[1106, "polars-series-rolling-sum"]], "polars.Series.round_sig_figs": [[1109, "polars-series-round-sig-figs"]], "polars.Series.set_at_idx": [[1115, "polars-series-set-at-idx"]], "polars.Series.str.count_matches": [[1136, "polars-series-str-count-matches"]], "polars.Series.str.encode": [[1138, "polars-series-str-encode"]], "polars.Series.rolling_skew": [[1104, "polars-series-rolling-skew"]], "polars.Series.rolling_var": [[1107, "polars-series-rolling-var"]], "polars.Series.shift_and_fill": [[1119, "polars-series-shift-and-fill"]], "polars.Series.scatter": [[1111, "polars-series-scatter"]], "polars.Series.list.get": [[1039, "polars-series-list-get"]], "polars.Series.len": [[1022, "polars-series-len"]], "polars.Series.is_null": [[1014, "polars-series-is-null"]], "polars.Series.list.gather": [[1038, "polars-series-list-gather"]], "polars.Series.inner_dtype": [[996, "polars-series-inner-dtype"]], "polars.Series.is_empty": [[1001, "polars-series-is-empty"]], "polars.Series.is_nan": [[1011, "polars-series-is-nan"]], "polars.Series.is_utf8": [[1019, "polars-series-is-utf8"]], "polars.Series.item": [[1020, "polars-series-item"]], "polars.Series.list.all": [[1025, "polars-series-list-all"]], "polars.Series.list.explode": [[1036, "polars-series-list-explode"]], "polars.Series.list.last": [[1042, "polars-series-list-last"]], "polars.Series.is_numeric": [[1015, "polars-series-is-numeric"]], "polars.Series.is_last_distinct": [[1010, "polars-series-is-last-distinct"]], "polars.Series.is_in": [[1006, "polars-series-is-in"]], "polars.Series.implode": [[995, "polars-series-implode"]], "polars.Series.is_not_nan": [[1012, "polars-series-is-not-nan"]], "polars.Series.list.head": [[1040, "polars-series-list-head"]], "polars.Series.is_not_null": [[1013, "polars-series-is-not-null"]], "polars.Series.list.arg_min": [[1028, "polars-series-list-arg-min"]], "polars.Series.list.diff": [[1033, "polars-series-list-diff"]], "polars.Series.list.count_matches": [[1032, "polars-series-list-count-matches"]], "polars.Series.is_boolean": [[999, "polars-series-is-boolean"]], "polars.Series.list.join": [[1041, "polars-series-list-join"]], "polars.Series.list.eval": [[1035, "polars-series-list-eval"]], "polars.Series.is_integer": [[1008, "polars-series-is-integer"]], "polars.Series.list.drop_nulls": [[1034, "polars-series-list-drop-nulls"]], "polars.Series.get_chunks": [[990, "polars-series-get-chunks"]], "polars.Series.list.arg_max": [[1027, "polars-series-list-arg-max"]], "polars.Series.list.lengths": [[1044, "polars-series-list-lengths"]], "polars.Series.is_sorted": [[1016, "polars-series-is-sorted"]], "polars.Series.hist": [[994, "polars-series-hist"]], "polars.Series.is_float": [[1005, "polars-series-is-float"]], "polars.Series.is_temporal": [[1017, "polars-series-is-temporal"]], "polars.Series.hash": [[992, "polars-series-hash"]], "polars.Series.list.any": [[1026, "polars-series-list-any"]], "polars.Series.is_finite": [[1002, "polars-series-is-finite"]], "polars.Series.is_last": [[1009, "polars-series-is-last"]], "polars.Series.is_first_distinct": [[1004, "polars-series-is-first-distinct"]], "polars.Series.list.first": [[1037, "polars-series-list-first"]], "polars.Series.limit": [[1023, "polars-series-limit"]], "polars.Series.is_infinite": [[1007, "polars-series-is-infinite"]], "polars.Series.is_duplicated": [[1000, "polars-series-is-duplicated"]], "polars.Series.list": [[1024, "polars-series-list"]], "polars.Series.is_unique": [[1018, "polars-series-is-unique"]], "polars.Series.list.count_match": [[1031, "polars-series-list-count-match"]], "polars.Series.head": [[993, "polars-series-head"]], "polars.Series.list.contains": [[1030, "polars-series-list-contains"]], "polars.Series.interpolate": [[997, "polars-series-interpolate"]], "polars.Series.is_between": [[998, "polars-series-is-between"]], "polars.Series.is_first": [[1003, "polars-series-is-first"]], "polars.Series.list.concat": [[1029, "polars-series-list-concat"]], "polars.Series.list.len": [[1043, "polars-series-list-len"]], "polars.Series.kurtosis": [[1021, "polars-series-kurtosis"]], "polars.Series.has_validity": [[991, "polars-series-has-validity"]], "polars.Series.list.set_difference": [[1050, "polars-series-list-set-difference"]], "polars.Series.max": [[1069, "polars-series-max"]], "polars.Series.peak_max": [[1083, "polars-series-peak-max"]], "polars.Series.rolling_apply": [[1097, "polars-series-rolling-apply"]], "polars.Series.qcut": [[1086, "polars-series-qcut"]], "polars.Series.n_chunks": [[1074, "polars-series-n-chunks"]], "polars.Series.new_from_index": [[1079, "polars-series-new-from-index"]], "polars.Series.reverse": [[1094, "polars-series-reverse"]], "polars.Series.pct_change": [[1082, "polars-series-pct-change"]], "polars.Series.list.max": [[1045, "polars-series-list-max"]], "polars.Series.list.reverse": [[1048, "polars-series-list-reverse"]], "polars.Series.map_elements": [[1068, "polars-series-map-elements"]], "polars.Series.list.shift": [[1054, "polars-series-list-shift"]], "polars.Series.log": [[1063, "polars-series-log"]], "polars.Series.list.to_struct": [[1061, "polars-series-list-to-struct"]], "polars.Series.rename": [[1091, "polars-series-rename"]], "polars.Series.nan_min": [[1078, "polars-series-nan-min"]], "polars.Series.map_dict": [[1067, "polars-series-map-dict"]], "polars.Series.reshape": [[1093, "polars-series-reshape"]], "polars.Series.list.sum": [[1057, "polars-series-list-sum"]], "polars.Series.list.sort": [[1056, "polars-series-list-sort"]], "polars.Series.list.slice": [[1055, "polars-series-list-slice"]], "polars.Series.rle": [[1095, "polars-series-rle"]], "polars.Series.list.set_intersection": [[1051, "polars-series-list-set-intersection"]], "polars.Series.list.mean": [[1046, "polars-series-list-mean"]], "polars.Series.list.sample": [[1049, "polars-series-list-sample"]], "polars.Series.log1p": [[1065, "polars-series-log1p"]], "polars.Series.n_unique": [[1075, "polars-series-n-unique"]], "polars.Series.not_": [[1080, "polars-series-not"]], "polars.Series.quantile": [[1087, "polars-series-quantile"]], "polars.Series.reinterpret": [[1090, "polars-series-reinterpret"]], "polars.Series.list.unique": [[1062, "polars-series-list-unique"]], "polars.Series.lower_bound": [[1066, "polars-series-lower-bound"]], "polars.Series.list.tail": [[1058, "polars-series-list-tail"]], "polars.Series.rle_id": [[1096, "polars-series-rle-id"]], "polars.Series.list.take": [[1059, "polars-series-list-take"]], "polars.Series.nan_max": [[1077, "polars-series-nan-max"]], "polars.Series.mean": [[1070, "polars-series-mean"]], "polars.Series.rechunk": [[1089, "polars-series-rechunk"]], "polars.Series.list.set_union": [[1053, "polars-series-list-set-union"]], "polars.Series.log10": [[1064, "polars-series-log10"]], "polars.Series.min": [[1072, "polars-series-min"]], "polars.Series.list.set_symmetric_difference": [[1052, "polars-series-list-set-symmetric-difference"]], "polars.Series.list.to_array": [[1060, "polars-series-list-to-array"]], "polars.Series.rolling_max": [[1099, "polars-series-rolling-max"]], "polars.Series.null_count": [[1081, "polars-series-null-count"]], "polars.Series.product": [[1085, "polars-series-product"]], "polars.Series.name": [[1076, "polars-series-name"]], "polars.Series.median": [[1071, "polars-series-median"]], "polars.Series.replace": [[1092, "polars-series-replace"]], "polars.Series.mode": [[1073, "polars-series-mode"]], "polars.Series.rank": [[1088, "polars-series-rank"]], "polars.Series.rolling_map": [[1098, "polars-series-rolling-map"]], "polars.Series.list.min": [[1047, "polars-series-list-min"]], "polars.Series.peak_min": [[1084, "polars-series-peak-min"]], "polars.Series.fill_null": [[984, "polars-series-fill-null"]], "polars.Series.dt.total_days": [[960, "polars-series-dt-total-days"]], "polars.Series.dt.offset_by": [[949, "polars-series-dt-offset-by"]], "polars.Series.dt.microsecond": [[937, "polars-series-dt-microsecond"]], "polars.Series.flags": [[986, "polars-series-flags"]], "polars.Series.dt.year": [[971, "polars-series-dt-year"]], "polars.Series.dt.replace_time_zone": [[952, "polars-series-dt-replace-time-zone"]], "polars.Series.dt.minute": [[942, "polars-series-dt-minute"]], "polars.Series.dt.second": [[954, "polars-series-dt-second"]], "polars.Series.dt.total_milliseconds": [[963, "polars-series-dt-total-milliseconds"]], "polars.Series.explode": [[980, "polars-series-explode"]], "polars.Series.equals": [[974, "polars-series-equals"]], "polars.Series.dt.truncate": [[967, "polars-series-dt-truncate"]], "polars.Series.ewm_std": [[977, "polars-series-ewm-std"]], "polars.Series.dt.timestamp": [[958, "polars-series-dt-timestamp"]], "polars.Series.dt.quarter": [[951, "polars-series-dt-quarter"]], "polars.Series.dt.total_nanoseconds": [[965, "polars-series-dt-total-nanoseconds"]], "polars.Series.exp": [[979, "polars-series-exp"]], "polars.Series.floor": [[987, "polars-series-floor"]], "polars.Series.dt.month": [[944, "polars-series-dt-month"]], "polars.Series.gather_every": [[989, "polars-series-gather-every"]], "polars.Series.dt.weekday": [[969, "polars-series-dt-weekday"]], "polars.Series.dt.strftime": [[956, "polars-series-dt-strftime"]], "polars.Series.dt.time": [[957, "polars-series-dt-time"]], "polars.Series.extend": [[981, "polars-series-extend"]], "polars.Series.dt.week": [[968, "polars-series-dt-week"]], "polars.Series.ewm_var": [[978, "polars-series-ewm-var"]], "polars.Series.dt.round": [[953, "polars-series-dt-round"]], "polars.Series.dt.milliseconds": [[940, "polars-series-dt-milliseconds"]], "polars.Series.dt.microseconds": [[938, "polars-series-dt-microseconds"]], "polars.Series.dt.min": [[941, "polars-series-dt-min"]], "polars.Series.dt.minutes": [[943, "polars-series-dt-minutes"]], "polars.Series.extend_constant": [[982, "polars-series-extend-constant"]], "polars.Series.dt.nanoseconds": [[948, "polars-series-dt-nanoseconds"]], "polars.Series.entropy": [[973, "polars-series-entropy"]], "polars.Series.dt.total_hours": [[961, "polars-series-dt-total-hours"]], "polars.Series.dt.month_start": [[946, "polars-series-dt-month-start"]], "polars.Series.dt.with_time_unit": [[970, "polars-series-dt-with-time-unit"]], "polars.Series.filter": [[985, "polars-series-filter"]], "polars.Series.dt.seconds": [[955, "polars-series-dt-seconds"]], "polars.Series.dt.nanosecond": [[947, "polars-series-dt-nanosecond"]], "polars.Series.fill_nan": [[983, "polars-series-fill-nan"]], "polars.Series.dt.median": [[936, "polars-series-dt-median"]], "polars.Series.ewm_mean": [[976, "polars-series-ewm-mean"]], "polars.Series.dt.total_seconds": [[966, "polars-series-dt-total-seconds"]], "polars.Series.dt.millisecond": [[939, "polars-series-dt-millisecond"]], "polars.Series.dt.mean": [[935, "polars-series-dt-mean"]], "polars.Series.dtype": [[972, "polars-series-dtype"]], "polars.Series.dt.total_minutes": [[964, "polars-series-dt-total-minutes"]], "polars.Series.dt.month_end": [[945, "polars-series-dt-month-end"]], "polars.Series.dt.to_string": [[959, "polars-series-dt-to-string"]], "polars.Series.gather": [[988, "polars-series-gather"]], "polars.Series.dt.total_microseconds": [[962, "polars-series-dt-total-microseconds"]], "polars.Series.dt.ordinal_day": [[950, "polars-series-dt-ordinal-day"]], "polars.Series.estimated_size": [[975, "polars-series-estimated-size"]], "polars.Series.clip_max": [[898, "polars-series-clip-max"]], "polars.Series.cbrt": [[893, "polars-series-cbrt"]], "polars.Series.dt.dst_offset": [[928, "polars-series-dt-dst-offset"]], "polars.Series.cummin": [[909, "polars-series-cummin"]], "polars.Series.cat.is_local": [[889, "polars-series-cat-is-local"]], "polars.Series.cat.to_local": [[891, "polars-series-cat-to-local"]], "polars.Series.cut": [[913, "polars-series-cut"]], "polars.Series.dt.date": [[924, "polars-series-dt-date"]], "polars.Series.clip": [[897, "polars-series-clip"]], "polars.Series.cum_min": [[905, "polars-series-cum-min"]], "polars.Series.drop_nans": [[917, "polars-series-drop-nans"]], "polars.Series.cat.uses_lexical_ordering": [[892, "polars-series-cat-uses-lexical-ordering"]], "polars.Series.dt.is_leap_year": [[932, "polars-series-dt-is-leap-year"]], "polars.Series.bin.starts_with": [[884, "polars-series-bin-starts-with"]], "polars.Series.ceil": [[894, "polars-series-ceil"]], "polars.Series.describe": [[914, "polars-series-describe"]], "polars.Series.cummax": [[908, "polars-series-cummax"]], "polars.Series.dt.iso_year": [[933, "polars-series-dt-iso-year"]], "polars.Series.cum_sum": [[907, "polars-series-cum-sum"]], "polars.Series.dt.days": [[927, "polars-series-dt-days"]], "polars.Series.cosh": [[902, "polars-series-cosh"]], "polars.Series.dt": [[919, "polars-series-dt"]], "polars.Series.dot": [[916, "polars-series-dot"]], "polars.Series.cum_max": [[904, "polars-series-cum-max"]], "polars.Series.cat": [[887, "polars-series-cat"]], "polars.Series.cat.get_categories": [[888, "polars-series-cat-get-categories"]], "polars.Series.dt.day": [[926, "polars-series-dt-day"]], "polars.Series.cumprod": [[910, "polars-series-cumprod"]], "polars.Series.clear": [[896, "polars-series-clear"]], "polars.Series.dt.convert_time_zone": [[923, "polars-series-dt-convert-time-zone"]], "polars.Series.dt.hour": [[930, "polars-series-dt-hour"]], "polars.Series.clone": [[900, "polars-series-clone"]], "polars.Series.dt.base_utc_offset": [[920, "polars-series-dt-base-utc-offset"]], "polars.Series.clip_min": [[899, "polars-series-clip-min"]], "polars.Series.bin.contains": [[880, "polars-series-bin-contains"]], "polars.Series.cos": [[901, "polars-series-cos"]], "polars.Series.dt.combine": [[922, "polars-series-dt-combine"]], "polars.Series.dt.hours": [[931, "polars-series-dt-hours"]], "polars.Series.cum_prod": [[906, "polars-series-cum-prod"]], "polars.Series.drop_nulls": [[918, "polars-series-drop-nulls"]], "polars.Series.bin.decode": [[881, "polars-series-bin-decode"]], "polars.Series.cat.set_ordering": [[890, "polars-series-cat-set-ordering"]], "polars.Series.bottom_k": [[885, "polars-series-bottom-k"]], "polars.Series.dt.cast_time_unit": [[921, "polars-series-dt-cast-time-unit"]], "polars.Series.chunk_lengths": [[895, "polars-series-chunk-lengths"]], "polars.Series.cumulative_eval": [[912, "polars-series-cumulative-eval"]], "polars.Series.bin.ends_with": [[883, "polars-series-bin-ends-with"]], "polars.Series.bin.encode": [[882, "polars-series-bin-encode"]], "polars.Series.diff": [[915, "polars-series-diff"]], "polars.Series.dt.epoch": [[929, "polars-series-dt-epoch"]], "polars.Series.cot": [[903, "polars-series-cot"]], "polars.Series.dt.max": [[934, "polars-series-dt-max"]], "polars.Series.cast": [[886, "polars-series-cast"]], "polars.Series.dt.datetime": [[925, "polars-series-dt-datetime"]], "polars.Series.cumsum": [[911, "polars-series-cumsum"]], "polars.LazyFrame.fill_nan": [[776, "polars-lazyframe-fill-nan"]], "polars.LazyFrame.sort": [[819, "polars-lazyframe-sort"]], "polars.LazyFrame.group_by": [[781, "polars-lazyframe-group-by"]], "polars.LazyFrame.lazy": [[793, "polars-lazyframe-lazy"]], "polars.LazyFrame.filter": [[778, "polars-lazyframe-filter"]], "polars.LazyFrame.drop_nulls": [[771, "polars-lazyframe-drop-nulls"]], "polars.LazyFrame.groupby": [[784, "polars-lazyframe-groupby"]], "polars.LazyFrame.map_batches": [[796, "polars-lazyframe-map-batches"]], "polars.LazyFrame.slice": [[818, "polars-lazyframe-slice"]], "polars.LazyFrame.max": [[797, "polars-lazyframe-max"]], "polars.LazyFrame.select": [[811, "polars-lazyframe-select"]], "polars.LazyFrame.show_graph": [[817, "polars-lazyframe-show-graph"]], "polars.LazyFrame.shift_and_fill": [[816, "polars-lazyframe-shift-and-fill"]], "polars.LazyFrame.group_by_dynamic": [[782, "polars-lazyframe-group-by-dynamic"]], "polars.LazyFrame.sum": [[821, "polars-lazyframe-sum"]], "polars.LazyFrame.top_k": [[824, "polars-lazyframe-top-k"]], "polars.LazyFrame.select_seq": [[812, "polars-lazyframe-select-seq"]], "polars.LazyFrame.rename": [[807, "polars-lazyframe-rename"]], "polars.LazyFrame.fill_null": [[777, "polars-lazyframe-fill-null"]], "polars.LazyFrame.min": [[802, "polars-lazyframe-min"]], "polars.LazyFrame.gather_every": [[780, "polars-lazyframe-gather-every"]], "polars.LazyFrame.groupby_rolling": [[786, "polars-lazyframe-groupby-rolling"]], "polars.LazyFrame.null_count": [[803, "polars-lazyframe-null-count"]], "polars.LazyFrame.shift": [[815, "polars-lazyframe-shift"]], "polars.LazyFrame.group_by_rolling": [[783, "polars-lazyframe-group-by-rolling"]], "polars.LazyFrame.inspect": [[788, "polars-lazyframe-inspect"]], "polars.LazyFrame.join_asof": [[791, "polars-lazyframe-join-asof"]], "polars.LazyFrame.interpolate": [[789, "polars-lazyframe-interpolate"]], "polars.LazyFrame.groupby_dynamic": [[785, "polars-lazyframe-groupby-dynamic"]], "polars.LazyFrame.limit": [[794, "polars-lazyframe-limit"]], "polars.LazyFrame.join": [[790, "polars-lazyframe-join"]], "polars.LazyFrame.set_sorted": [[814, "polars-lazyframe-set-sorted"]], "polars.LazyFrame.dtypes": [[772, "polars-lazyframe-dtypes"]], "polars.LazyFrame.rolling": [[809, "polars-lazyframe-rolling"]], "polars.LazyFrame.take_every": [[823, "polars-lazyframe-take-every"]], "polars.LazyFrame.schema": [[810, "polars-lazyframe-schema"]], "polars.LazyFrame.std": [[820, "polars-lazyframe-std"]], "polars.LazyFrame.explain": [[773, "polars-lazyframe-explain"]], "polars.LazyFrame.merge_sorted": [[801, "polars-lazyframe-merge-sorted"]], "polars.LazyFrame.fetch": [[775, "polars-lazyframe-fetch"]], "polars.LazyFrame.map": [[795, "polars-lazyframe-map"]], "polars.LazyFrame.median": [[799, "polars-lazyframe-median"]], "polars.LazyFrame.profile": [[805, "polars-lazyframe-profile"]], "polars.LazyFrame.melt": [[800, "polars-lazyframe-melt"]], "polars.LazyFrame.serialize": [[813, "polars-lazyframe-serialize"]], "polars.LazyFrame.first": [[779, "polars-lazyframe-first"]], "polars.LazyFrame.reverse": [[808, "polars-lazyframe-reverse"]], "polars.LazyFrame.head": [[787, "polars-lazyframe-head"]], "polars.LazyFrame.quantile": [[806, "polars-lazyframe-quantile"]], "polars.LazyFrame.drop": [[770, "polars-lazyframe-drop"]], "polars.LazyFrame.explode": [[774, "polars-lazyframe-explode"]], "polars.LazyFrame.mean": [[798, "polars-lazyframe-mean"]], "polars.LazyFrame.last": [[792, "polars-lazyframe-last"]], "polars.LazyFrame.pipe": [[804, "polars-lazyframe-pipe"]], "polars.LazyFrame.tail": [[822, "polars-lazyframe-tail"]], "polars.last": [[706, "polars-last"]], "polars.map_groups": [[710, "polars-map-groups"]], "polars.map_batches": [[709, "polars-map-batches"]], "polars.cov": [[679, "polars-cov"]], "polars.coalesce": [[674, "polars-coalesce"]], "polars.fold": [[698, "polars-fold"]], "polars.all": [[663, "polars-all"]], "polars.concat_str": [[676, "polars-concat-str"]], "polars.duration": [[694, "polars-duration"]], "polars.arctan2": [[670, "polars-arctan2"]], "polars.count": [[678, "polars-count"]], "polars.exclude": [[696, "polars-exclude"]], "polars.all_horizontal": [[664, "polars-all-horizontal"]], "polars.arg_where": [[673, "polars-arg-where"]], "polars.cum_sum_horizontal": [[683, "polars-cum-sum-horizontal"]], "polars.corr": [[677, "polars-corr"]], "polars.head": [[702, "polars-head"]], "polars.map": [[708, "polars-map"]], "polars.implode": [[703, "polars-implode"]], "polars.max": [[711, "polars-max"]], "polars.cumfold": [[684, "polars-cumfold"]], "polars.Expr.xor": [[662, "polars-expr-xor"]], "polars.cum_fold": [[680, "polars-cum-fold"]], "polars.cum_reduce": [[681, "polars-cum-reduce"]], "polars.int_range": [[704, "polars-int-range"]], "polars.Expr.var": [[660, "polars-expr-var"]], "polars.date_range": [[689, "polars-date-range"]], "polars.apply": [[667, "polars-apply"]], "polars.arg_sort_by": [[672, "polars-arg-sort-by"]], "polars.format": [[699, "polars-format"]], "polars.mean": [[713, "polars-mean"]], "polars.int_ranges": [[705, "polars-int-ranges"]], "polars.arange": [[669, "polars-arange"]], "polars.any": [[665, "polars-any"]], "polars.concat_list": [[675, "polars-concat-list"]], "polars.datetime_range": [[692, "polars-datetime-range"]], "polars.first": [[697, "polars-first"]], "polars.Expr.where": [[661, "polars-expr-where"]], "polars.cumsum_horizontal": [[687, "polars-cumsum-horizontal"]], "polars.cumreduce": [[685, "polars-cumreduce"]], "polars.date_ranges": [[690, "polars-date-ranges"]], "polars.datetime_ranges": [[693, "polars-datetime-ranges"]], "polars.datetime": [[691, "polars-datetime"]], "polars.approx_n_unique": [[668, "polars-approx-n-unique"]], "polars.any_horizontal": [[666, "polars-any-horizontal"]], "polars.arctan2d": [[671, "polars-arctan2d"]], "polars.cum_sum": [[682, "polars-cum-sum"]], "polars.cumsum": [[686, "polars-cumsum"]], "polars.from_epoch": [[700, "polars-from-epoch"]], "polars.median": [[714, "polars-median"]], "polars.groups": [[701, "polars-groups"]], "polars.max_horizontal": [[712, "polars-max-horizontal"]], "polars.date": [[688, "polars-date"]], "polars.element": [[695, "polars-element"]], "polars.lit": [[707, "polars-lit"]], "Attributes": [[1212, "attributes"], [850, "attributes"], [290, "attributes"]], "SQL": [[1226, "sql"]], "Methods": [[1226, "methods"]], "Boolean": [[1214, "boolean"], [739, "boolean"]], "Array": [[1211, "array"], [737, "array"]], "Testing": [[1227, "testing"]], "Asserts": [[1227, "asserts"]], "Parametric testing": [[1227, "parametric-testing"]], "Polars primitives": [[1227, "polars-primitives"]], "Strategy helpers": [[1227, "strategy-helpers"]], "Profiles": [[1227, "profiles"]], "Categories": [[1215, "categories"], [740, "categories"]], "Utils": [[1228, "utils"]], "String": [[1223, "string"], [752, "string"]], "polars.Series.zip_with": [[1210, "polars-series-zip-with"]], "Export": [[1218, "export"], [293, "export"]], "Binary": [[1213, "binary"], [751, "binary"], [738, "binary"]], "Miscellaneous": [[1221, "miscellaneous"], [854, "miscellaneous"], [756, "miscellaneous"], [748, "miscellaneous"], [296, "miscellaneous"]], "Series": [[1219, "series"]], "Computation": [[1216, "computation"], [743, "computation"], [291, "computation"]], "Struct": [[1224, "struct"], [753, "struct"]], "Descriptive": [[1217, "descriptive"], [851, "descriptive"], [292, "descriptive"]], "Manipulation/selection": [[1222, "manipulation-selection"], [855, "manipulation-selection"], [749, "manipulation-selection"], [297, "manipulation-selection"]], "Temporal": [[1225, "temporal"], [754, "temporal"], [298, "temporal"]], "List": [[1220, "list"], [746, "list"]], "polars.lazyframe.group_by.LazyGroupBy.min": [[845, "polars-lazyframe-group-by-lazygroupby-min"]], "polars.Series.arg_max": [[870, "polars-series-arg-max"]], "polars.lazyframe.group_by.LazyGroupBy.all": [[835, "polars-lazyframe-group-by-lazygroupby-all"]], "polars.Series.arr.to_list": [[878, "polars-series-arr-to-list"]], "polars.Series.all": [[860, "polars-series-all"]], "polars.LazyFrame.with_columns": [[830, "polars-lazyframe-with-columns"]], "polars.lazyframe.group_by.LazyGroupBy.apply": [[836, "polars-lazyframe-group-by-lazygroupby-apply"]], "polars.lazyframe.group_by.LazyGroupBy.head": [[839, "polars-lazyframe-group-by-lazygroupby-head"]], "polars.lazyframe.group_by.LazyGroupBy.last": [[840, "polars-lazyframe-group-by-lazygroupby-last"]], "polars.Series.arr.max": [[875, "polars-series-arr-max"]], "polars.Series.arccos": [[864, "polars-series-arccos"]], "LazyFrame": [[853, "lazyframe"]], "polars.LazyFrame.with_context": [[832, "polars-lazyframe-with-context"]], "polars.Series.arg_true": [[873, "polars-series-arg-true"]], "polars.LazyFrame.unique": [[825, "polars-lazyframe-unique"]], "polars.LazyFrame.with_row_count": [[833, "polars-lazyframe-with-row-count"]], "polars.Series.arccosh": [[865, "polars-series-arccosh"]], "polars.Series.arg_sort": [[872, "polars-series-arg-sort"]], "polars.lazyframe.group_by.LazyGroupBy.tail": [[849, "polars-lazyframe-group-by-lazygroupby-tail"]], "polars.lazyframe.group_by.LazyGroupBy.count": [[837, "polars-lazyframe-group-by-lazygroupby-count"]], "polars.Series.arctan": [[868, "polars-series-arctan"]], "polars.Series.arr.min": [[876, "polars-series-arr-min"]], "polars.Series.arg_min": [[871, "polars-series-arg-min"]], "polars.Series.alias": [[859, "polars-series-alias"]], "polars.Series.arcsinh": [[867, "polars-series-arcsinh"]], "polars.LazyFrame.width": [[829, "polars-lazyframe-width"]], "polars.lazyframe.group_by.LazyGroupBy.max": [[842, "polars-lazyframe-group-by-lazygroupby-max"]], "polars.LazyFrame.unnest": [[826, "polars-lazyframe-unnest"]], "polars.LazyFrame.var": [[828, "polars-lazyframe-var"]], "polars.Series.apply": [[863, "polars-series-apply"]], "polars.Series.arg_unique": [[874, "polars-series-arg-unique"]], "Selectors": [[856, "selectors"]], "Importing": [[856, "importing"]], "Set operations": [[856, "set-operations"]], "Functions": [[856, "functions"], [744, "functions"], [756, "functions"]], "polars.lazyframe.group_by.LazyGroupBy.first": [[838, "polars-lazyframe-group-by-lazygroupby-first"]], "polars.lazyframe.group_by.LazyGroupBy.map_groups": [[841, "polars-lazyframe-group-by-lazygroupby-map-groups"]], "polars.Series.arcsin": [[866, "polars-series-arcsin"]], "polars.Series.arr.sum": [[877, "polars-series-arr-sum"]], "polars.lazyframe.group_by.LazyGroupBy.quantile": [[847, "polars-lazyframe-group-by-lazygroupby-quantile"]], "polars.lazyframe.group_by.LazyGroupBy.median": [[844, "polars-lazyframe-group-by-lazygroupby-median"]], "polars.Series.arctanh": [[869, "polars-series-arctanh"]], "polars.LazyFrame.with_columns_seq": [[831, "polars-lazyframe-with-columns-seq"]], "polars.LazyFrame.update": [[827, "polars-lazyframe-update"]], "GroupBy": [[852, "groupby"], [294, "groupby"]], "polars.lazyframe.group_by.LazyGroupBy.n_unique": [[846, "polars-lazyframe-group-by-lazygroupby-n-unique"]], "polars.lazyframe.group_by.LazyGroupBy.sum": [[848, "polars-lazyframe-group-by-lazygroupby-sum"]], "polars.Series.abs": [[858, "polars-series-abs"]], "Read/write logical plan": [[854, "read-write-logical-plan"]], "polars.Series.arr.unique": [[879, "polars-series-arr-unique"]], "polars.Series.any": [[861, "polars-series-any"]], "polars.lazyframe.group_by.LazyGroupBy.mean": [[843, "polars-lazyframe-group-by-lazygroupby-mean"]], "polars.lazyframe.group_by.LazyGroupBy.agg": [[834, "polars-lazyframe-group-by-lazygroupby-agg"]], "polars.Series.append": [[862, "polars-series-append"]], "polars.Expr.str.lstrip": [[610, "polars-expr-str-lstrip"]], "polars.Expr.str.rjust": [[619, "polars-expr-str-rjust"]], "polars.Expr.str.strip_chars_start": [[629, "polars-expr-str-strip-chars-start"]], "polars.Expr.truediv": [[655, "polars-expr-truediv"]], "polars.Expr.top_k": [[654, "polars-expr-top-k"]], "polars.Expr.upper_bound": [[658, "polars-expr-upper-bound"]], "polars.Expr.str.len_chars": [[607, "polars-expr-str-len-chars"]], "polars.Expr.str.strip_prefix": [[630, "polars-expr-str-strip-prefix"]], "polars.Expr.str.strip_chars": [[627, "polars-expr-str-strip-chars"]], "polars.Expr.struct.rename_fields": [[644, "polars-expr-struct-rename-fields"]], "polars.Expr.str.strip_suffix": [[631, "polars-expr-str-strip-suffix"]], "polars.Expr.struct.json_encode": [[643, "polars-expr-struct-json-encode"]], "polars.Expr.str.to_integer": [[636, "polars-expr-str-to-integer"]], "polars.Expr.str.to_datetime": [[634, "polars-expr-str-to-datetime"]], "polars.Expr.str.reverse": [[618, "polars-expr-str-reverse"]], "polars.Expr.str.split_exact": [[623, "polars-expr-str-split-exact"]], "polars.Expr.take": [[649, "polars-expr-take"]], "polars.Expr.str.pad_start": [[613, "polars-expr-str-pad-start"]], "polars.Expr.str.splitn": [[624, "polars-expr-str-splitn"]], "polars.Expr.str.parse_int": [[614, "polars-expr-str-parse-int"]], "polars.Expr.str.to_lowercase": [[637, "polars-expr-str-to-lowercase"]], "polars.Expr.str.replace_all": [[616, "polars-expr-str-replace-all"]], "polars.Expr.str.to_time": [[638, "polars-expr-str-to-time"]], "polars.Expr.str.to_date": [[633, "polars-expr-str-to-date"]], "polars.Expr.tan": [[651, "polars-expr-tan"]], "polars.Expr.to_physical": [[653, "polars-expr-to-physical"]], "polars.Expr.str.n_chars": [[611, "polars-expr-str-n-chars"]], "polars.Expr.take_every": [[650, "polars-expr-take-every"]], "polars.Expr.tail": [[648, "polars-expr-tail"]], "polars.Expr.str.replace": [[615, "polars-expr-str-replace"]], "polars.Expr.str.pad_end": [[612, "polars-expr-str-pad-end"]], "polars.Expr.str.to_uppercase": [[640, "polars-expr-str-to-uppercase"]], "polars.Expr.str.lengths": [[608, "polars-expr-str-lengths"]], "polars.Expr.str.split": [[622, "polars-expr-str-split"]], "polars.Expr.str.strptime": [[632, "polars-expr-str-strptime"]], "polars.Expr.sum": [[647, "polars-expr-sum"]], "polars.Expr.unique_counts": [[657, "polars-expr-unique-counts"]], "polars.Expr.str.zfill": [[641, "polars-expr-str-zfill"]], "polars.Expr.struct.field": [[642, "polars-expr-struct-field"]], "polars.Expr.str.rstrip": [[620, "polars-expr-str-rstrip"]], "polars.Expr.str.to_titlecase": [[639, "polars-expr-str-to-titlecase"]], "polars.Expr.unique": [[656, "polars-expr-unique"]], "polars.Expr.str.strip_chars_end": [[628, "polars-expr-str-strip-chars-end"]], "polars.Expr.suffix": [[646, "polars-expr-suffix"]], "polars.Expr.str.starts_with": [[625, "polars-expr-str-starts-with"]], "polars.Expr.str.ljust": [[609, "polars-expr-str-ljust"]], "polars.Expr.sub": [[645, "polars-expr-sub"]], "polars.Expr.value_counts": [[659, "polars-expr-value-counts"]], "polars.Expr.str.strip": [[626, "polars-expr-str-strip"]], "polars.Expr.str.slice": [[621, "polars-expr-str-slice"]], "polars.Expr.str.json_path_match": [[605, "polars-expr-str-json-path-match"]], "polars.Expr.str.to_decimal": [[635, "polars-expr-str-to-decimal"]], "polars.Expr.tanh": [[652, "polars-expr-tanh"]], "polars.Expr.str.replace_many": [[617, "polars-expr-str-replace-many"]], "polars.Expr.str.len_bytes": [[606, "polars-expr-str-len-bytes"]], "polars.Expr.n_unique": [[527, "polars-expr-n-unique"]], "polars.Expr.lt": [[504, "polars-expr-lt"]], "polars.Expr.max": [[510, "polars-expr-max"]], "polars.Expr.lower_bound": [[503, "polars-expr-lower-bound"]], "polars.Expr.peak_max": [[543, "polars-expr-peak-max"]], "polars.Expr.list.tail": [[495, "polars-expr-list-tail"]], "polars.Expr.mean": [[511, "polars-expr-mean"]], "polars.Expr.null_count": [[539, "polars-expr-null-count"]], "polars.Expr.peak_min": [[544, "polars-expr-peak-min"]], "polars.Expr.name.suffix": [[531, "polars-expr-name-suffix"]], "polars.Expr.meta.undo_aliases": [[521, "polars-expr-meta-undo-aliases"]], "polars.Expr.not_": [[538, "polars-expr-not"]], "polars.Expr.name.keep": [[528, "polars-expr-name-keep"]], "polars.Expr.meta.root_names": [[519, "polars-expr-meta-root-names"]], "polars.Expr.map": [[505, "polars-expr-map"]], "polars.Expr.meta.write_json": [[522, "polars-expr-meta-write-json"]], "polars.Expr.nan_max": [[534, "polars-expr-nan-max"]], "polars.Expr.ne_missing": [[537, "polars-expr-ne-missing"]], "polars.Expr.meta.eq": [[513, "polars-expr-meta-eq"]], "polars.Expr.name.to_uppercase": [[533, "polars-expr-name-to-uppercase"]], "polars.Expr.list.unique": [[499, "polars-expr-list-unique"]], "polars.Expr.median": [[512, "polars-expr-median"]], "polars.Expr.name.prefix": [[530, "polars-expr-name-prefix"]], "polars.Expr.meta.pop": [[518, "polars-expr-meta-pop"]], "polars.Expr.mul": [[526, "polars-expr-mul"]], "polars.Expr.name.map": [[529, "polars-expr-name-map"]], "polars.Expr.meta.tree_format": [[520, "polars-expr-meta-tree-format"]], "polars.Expr.meta.has_multiple_outputs": [[514, "polars-expr-meta-has-multiple-outputs"]], "polars.Expr.ne": [[536, "polars-expr-ne"]], "polars.Expr.prefix": [[547, "polars-expr-prefix"]], "polars.Expr.name.to_lowercase": [[532, "polars-expr-name-to-lowercase"]], "polars.Expr.over": [[541, "polars-expr-over"]], "polars.Expr.meta.ne": [[516, "polars-expr-meta-ne"]], "polars.Expr.meta.output_name": [[517, "polars-expr-meta-output-name"]], "polars.Expr.pow": [[546, "polars-expr-pow"]], "polars.Expr.min": [[523, "polars-expr-min"]], "polars.Expr.product": [[548, "polars-expr-product"]], "polars.Expr.pipe": [[545, "polars-expr-pipe"]], "polars.Expr.log10": [[501, "polars-expr-log10"]], "polars.Expr.map_alias": [[506, "polars-expr-map-alias"]], "polars.Expr.meta.is_regex_projection": [[515, "polars-expr-meta-is-regex-projection"]], "polars.Expr.list.to_struct": [[498, "polars-expr-list-to-struct"]], "polars.Expr.nan_min": [[535, "polars-expr-nan-min"]], "polars.Expr.log": [[500, "polars-expr-log"]], "polars.Expr.list.take": [[496, "polars-expr-list-take"]], "polars.Expr.map_dict": [[508, "polars-expr-map-dict"]], "polars.Expr.map_batches": [[507, "polars-expr-map-batches"]], "polars.Expr.mod": [[524, "polars-expr-mod"]], "polars.Expr.qcut": [[549, "polars-expr-qcut"]], "polars.Expr.log1p": [[502, "polars-expr-log1p"]], "polars.Expr.or_": [[540, "polars-expr-or"]], "polars.Expr.pct_change": [[542, "polars-expr-pct-change"]], "polars.Expr.mode": [[525, "polars-expr-mode"]], "polars.Expr.list.to_array": [[497, "polars-expr-list-to-array"]], "polars.Expr.map_elements": [[509, "polars-expr-map-elements"]], "polars.Expr.sort": [[587, "polars-expr-sort"]], "polars.Expr.slice": [[586, "polars-expr-slice"]], "polars.Expr.repeat_by": [[555, "polars-expr-repeat-by"]], "polars.Expr.sample": [[575, "polars-expr-sample"]], "polars.Expr.rolling_quantile": [[568, "polars-expr-rolling-quantile"]], "polars.Expr.sign": [[582, "polars-expr-sign"]], "polars.Expr.shrink_dtype": [[580, "polars-expr-shrink-dtype"]], "polars.Expr.std": [[590, "polars-expr-std"]], "polars.Expr.reshape": [[557, "polars-expr-reshape"]], "polars.Expr.str.contains_any": [[593, "polars-expr-str-contains-any"]], "polars.Expr.str.explode": [[599, "polars-expr-str-explode"]], "polars.Expr.sort_by": [[588, "polars-expr-sort-by"]], "polars.Expr.rolling_mean": [[565, "polars-expr-rolling-mean"]], "polars.Expr.shift_and_fill": [[579, "polars-expr-shift-and-fill"]], "polars.Expr.rolling_max": [[564, "polars-expr-rolling-max"]], "polars.Expr.set_sorted": [[577, "polars-expr-set-sorted"]], "polars.Expr.str.decode": [[596, "polars-expr-str-decode"]], "polars.Expr.str.json_extract": [[604, "polars-expr-str-json-extract"]], "polars.Expr.rolling_var": [[572, "polars-expr-rolling-var"]], "polars.Expr.shuffle": [[581, "polars-expr-shuffle"]], "polars.Expr.rolling_map": [[563, "polars-expr-rolling-map"]], "polars.Expr.rolling_median": [[566, "polars-expr-rolling-median"]], "polars.Expr.str.extract_groups": [[602, "polars-expr-str-extract-groups"]], "polars.Expr.rle": [[559, "polars-expr-rle"]], "polars.Expr.search_sorted": [[576, "polars-expr-search-sorted"]], "polars.Expr.str.contains": [[592, "polars-expr-str-contains"]], "polars.Expr.rle_id": [[560, "polars-expr-rle-id"]], "polars.Expr.shift": [[578, "polars-expr-shift"]], "polars.Expr.rolling_apply": [[562, "polars-expr-rolling-apply"]], "polars.Expr.round": [[573, "polars-expr-round"]], "polars.Expr.rolling": [[561, "polars-expr-rolling"]], "polars.Expr.rolling_sum": [[571, "polars-expr-rolling-sum"]], "polars.Expr.reverse": [[558, "polars-expr-reverse"]], "polars.Expr.rank": [[552, "polars-expr-rank"]], "polars.Expr.quantile": [[550, "polars-expr-quantile"]], "polars.Expr.sin": [[583, "polars-expr-sin"]], "polars.Expr.rolling_std": [[570, "polars-expr-rolling-std"]], "polars.Expr.replace": [[556, "polars-expr-replace"]], "polars.Expr.str.json_decode": [[603, "polars-expr-str-json-decode"]], "polars.Expr.str.ends_with": [[598, "polars-expr-str-ends-with"]], "polars.Expr.radians": [[551, "polars-expr-radians"]], "polars.Expr.str.extract": [[600, "polars-expr-str-extract"]], "polars.Expr.rolling_skew": [[569, "polars-expr-rolling-skew"]], "polars.Expr.str.count_match": [[594, "polars-expr-str-count-match"]], "polars.Expr.reinterpret": [[554, "polars-expr-reinterpret"]], "polars.Expr.str.encode": [[597, "polars-expr-str-encode"]], "polars.Expr.sinh": [[584, "polars-expr-sinh"]], "polars.Expr.skew": [[585, "polars-expr-skew"]], "polars.Expr.rolling_min": [[567, "polars-expr-rolling-min"]], "polars.Expr.rechunk": [[553, "polars-expr-rechunk"]], "polars.Expr.sqrt": [[589, "polars-expr-sqrt"]], "polars.Expr.round_sig_figs": [[574, "polars-expr-round-sig-figs"]], "polars.Expr.str.extract_all": [[601, "polars-expr-str-extract-all"]], "polars.Expr.str.count_matches": [[595, "polars-expr-str-count-matches"]], "polars.Expr.str.concat": [[591, "polars-expr-str-concat"]], "polars.Expr.list.explode": [[473, "polars-expr-list-explode"]], "polars.Expr.list.max": [[482, "polars-expr-list-max"]], "polars.Expr.list.shift": [[491, "polars-expr-list-shift"]], "polars.Expr.list.len": [[480, "polars-expr-list-len"]], "polars.Expr.list.contains": [[467, "polars-expr-list-contains"]], "polars.Expr.is_last": [[448, "polars-expr-is-last"]], "polars.Expr.list.concat": [[466, "polars-expr-list-concat"]], "polars.Expr.list.any": [[463, "polars-expr-list-any"]], "polars.Expr.is_nan": [[450, "polars-expr-is-nan"]], "polars.Expr.list.sum": [[494, "polars-expr-list-sum"]], "polars.Expr.interpolate": [[440, "polars-expr-interpolate"]], "polars.Expr.is_finite": [[443, "polars-expr-is-finite"]], "polars.Expr.list.count_match": [[468, "polars-expr-list-count-match"]], "polars.Expr.is_first_distinct": [[445, "polars-expr-is-first-distinct"]], "polars.Expr.list.eval": [[472, "polars-expr-list-eval"]], "polars.Expr.keep_name": [[456, "polars-expr-keep-name"]], "polars.Expr.is_not_nan": [[452, "polars-expr-is-not-nan"]], "polars.Expr.list.head": [[477, "polars-expr-list-head"]], "polars.Expr.list.reverse": [[485, "polars-expr-list-reverse"]], "polars.Expr.is_unique": [[455, "polars-expr-is-unique"]], "polars.Expr.is_in": [[446, "polars-expr-is-in"]], "polars.Expr.list.sort": [[493, "polars-expr-list-sort"]], "polars.Expr.is_duplicated": [[442, "polars-expr-is-duplicated"]], "polars.Expr.list.min": [[484, "polars-expr-list-min"]], "polars.Expr.is_null": [[454, "polars-expr-is-null"]], "polars.Expr.list.drop_nulls": [[471, "polars-expr-list-drop-nulls"]], "polars.Expr.list.set_union": [[490, "polars-expr-list-set-union"]], "polars.Expr.len": [[460, "polars-expr-len"]], "polars.Expr.is_first": [[444, "polars-expr-is-first"]], "polars.Expr.list.first": [[474, "polars-expr-list-first"]], "polars.Expr.list.all": [[462, "polars-expr-list-all"]], "polars.Expr.list.slice": [[492, "polars-expr-list-slice"]], "polars.Expr.list.arg_max": [[464, "polars-expr-list-arg-max"]], "polars.Expr.is_not_null": [[453, "polars-expr-is-not-null"]], "polars.Expr.list.set_difference": [[487, "polars-expr-list-set-difference"]], "polars.Expr.is_last_distinct": [[449, "polars-expr-is-last-distinct"]], "polars.Expr.list.last": [[479, "polars-expr-list-last"]], "polars.Expr.list.arg_min": [[465, "polars-expr-list-arg-min"]], "polars.Expr.list.lengths": [[481, "polars-expr-list-lengths"]], "polars.Expr.list.set_symmetric_difference": [[489, "polars-expr-list-set-symmetric-difference"]], "polars.Expr.limit": [[461, "polars-expr-limit"]], "polars.Expr.list.set_intersection": [[488, "polars-expr-list-set-intersection"]], "polars.Expr.list.diff": [[470, "polars-expr-list-diff"]], "polars.Expr.is_not": [[451, "polars-expr-is-not"]], "polars.Expr.list.count_matches": [[469, "polars-expr-list-count-matches"]], "polars.Expr.list.mean": [[483, "polars-expr-list-mean"]], "polars.Expr.list.get": [[476, "polars-expr-list-get"]], "polars.Expr.le": [[459, "polars-expr-le"]], "polars.Expr.list.sample": [[486, "polars-expr-list-sample"]], "polars.Expr.is_between": [[441, "polars-expr-is-between"]], "polars.Expr.list.join": [[478, "polars-expr-list-join"]], "polars.Expr.last": [[458, "polars-expr-last"]], "polars.Expr.kurtosis": [[457, "polars-expr-kurtosis"]], "polars.Expr.is_infinite": [[447, "polars-expr-is-infinite"]], "polars.Expr.list.gather": [[475, "polars-expr-list-gather"]], "polars.Expr.cat.get_categories": [[335, "polars-expr-cat-get-categories"]], "polars.Expr.dt.days": [[370, "polars-expr-dt-days"]], "polars.Expr.cum_sum": [[350, "polars-expr-cum-sum"]], "polars.Expr.count": [[345, "polars-expr-count"]], "polars.Expr.dt.millisecond": [[379, "polars-expr-dt-millisecond"]], "polars.Expr.ceil": [[338, "polars-expr-ceil"]], "polars.Expr.cum_prod": [[349, "polars-expr-cum-prod"]], "polars.Expr.degrees": [[358, "polars-expr-degrees"]], "polars.Expr.dt.date": [[367, "polars-expr-dt-date"]], "polars.Expr.dt.datetime": [[368, "polars-expr-dt-datetime"]], "polars.Expr.cumsum": [[355, "polars-expr-cumsum"]], "polars.Expr.diff": [[359, "polars-expr-diff"]], "polars.Expr.cummin": [[353, "polars-expr-cummin"]], "polars.Expr.dt.hours": [[374, "polars-expr-dt-hours"]], "polars.Expr.bin.ends_with": [[331, "polars-expr-bin-ends-with"]], "polars.Expr.dt.milliseconds": [[380, "polars-expr-dt-milliseconds"]], "polars.Expr.cot": [[344, "polars-expr-cot"]], "polars.Expr.drop_nulls": [[362, "polars-expr-drop-nulls"]], "polars.Expr.dt.minutes": [[382, "polars-expr-dt-minutes"]], "polars.Expr.dot": [[360, "polars-expr-dot"]], "polars.Expr.cum_min": [[348, "polars-expr-cum-min"]], "polars.Expr.dt.hour": [[373, "polars-expr-dt-hour"]], "polars.Expr.cat.set_ordering": [[336, "polars-expr-cat-set-ordering"]], "polars.Expr.drop_nans": [[361, "polars-expr-drop-nans"]], "polars.Expr.cut": [[357, "polars-expr-cut"]], "polars.Expr.dt.is_leap_year": [[375, "polars-expr-dt-is-leap-year"]], "polars.Expr.clip": [[339, "polars-expr-clip"]], "polars.Expr.cumcount": [[351, "polars-expr-cumcount"]], "polars.Expr.dt.combine": [[365, "polars-expr-dt-combine"]], "polars.Expr.cosh": [[343, "polars-expr-cosh"]], "polars.Expr.dt.base_utc_offset": [[363, "polars-expr-dt-base-utc-offset"]], "polars.Expr.dt.microseconds": [[378, "polars-expr-dt-microseconds"]], "polars.Expr.cbrt": [[337, "polars-expr-cbrt"]], "polars.Expr.dt.microsecond": [[377, "polars-expr-dt-microsecond"]], "polars.Expr.clip_min": [[341, "polars-expr-clip-min"]], "polars.Expr.dt.day": [[369, "polars-expr-dt-day"]], "polars.Expr.cum_max": [[347, "polars-expr-cum-max"]], "polars.Expr.dt.iso_year": [[376, "polars-expr-dt-iso-year"]], "polars.Expr.cos": [[342, "polars-expr-cos"]], "polars.Expr.cumprod": [[354, "polars-expr-cumprod"]], "polars.Expr.cumulative_eval": [[356, "polars-expr-cumulative-eval"]], "polars.Expr.dt.minute": [[381, "polars-expr-dt-minute"]], "polars.Expr.dt.cast_time_unit": [[364, "polars-expr-dt-cast-time-unit"]], "polars.Expr.cast": [[334, "polars-expr-cast"]], "polars.Expr.dt.dst_offset": [[371, "polars-expr-dt-dst-offset"]], "polars.Expr.dt.month": [[383, "polars-expr-dt-month"]], "polars.Expr.dt.epoch": [[372, "polars-expr-dt-epoch"]], "polars.Expr.dt.month_end": [[384, "polars-expr-dt-month-end"]], "polars.Expr.bin.encode": [[330, "polars-expr-bin-encode"]], "polars.Expr.cum_count": [[346, "polars-expr-cum-count"]], "polars.Expr.dt.convert_time_zone": [[366, "polars-expr-dt-convert-time-zone"]], "polars.Expr.bin.starts_with": [[332, "polars-expr-bin-starts-with"]], "polars.Expr.bottom_k": [[333, "polars-expr-bottom-k"]], "polars.Expr.clip_max": [[340, "polars-expr-clip-max"]], "polars.Expr.cummax": [[352, "polars-expr-cummax"]], "polars.Expr.dt.nanoseconds": [[387, "polars-expr-dt-nanoseconds"]], "polars.Expr.dt.total_seconds": [[405, "polars-expr-dt-total-seconds"]], "polars.Expr.dt.replace_time_zone": [[391, "polars-expr-dt-replace-time-zone"]], "polars.Expr.dt.strftime": [[395, "polars-expr-dt-strftime"]], "polars.Expr.forward_fill": [[428, "polars-expr-forward-fill"]], "polars.Expr.first": [[424, "polars-expr-first"]], "polars.Expr.dt.week": [[407, "polars-expr-dt-week"]], "polars.Expr.head": [[436, "polars-expr-head"]], "polars.Expr.gather_every": [[431, "polars-expr-gather-every"]], "polars.Expr.get": [[433, "polars-expr-get"]], "polars.Expr.dt.round": [[392, "polars-expr-dt-round"]], "polars.Expr.eq_missing": [[413, "polars-expr-eq-missing"]], "polars.Expr.inspect": [[439, "polars-expr-inspect"]], "polars.Expr.floordiv": [[427, "polars-expr-floordiv"]], "polars.Expr.hash": [[435, "polars-expr-hash"]], "polars.Expr.dt.second": [[393, "polars-expr-dt-second"]], "polars.Expr.implode": [[438, "polars-expr-implode"]], "polars.Expr.entropy": [[411, "polars-expr-entropy"]], "polars.Expr.fill_null": [[422, "polars-expr-fill-null"]], "polars.Expr.hist": [[437, "polars-expr-hist"]], "polars.Expr.dt.year": [[410, "polars-expr-dt-year"]], "polars.Expr.dt.to_string": [[398, "polars-expr-dt-to-string"]], "polars.Expr.gt": [[434, "polars-expr-gt"]], "polars.Expr.ge": [[432, "polars-expr-ge"]], "polars.Expr.eq": [[412, "polars-expr-eq"]], "polars.Expr.exclude": [[417, "polars-expr-exclude"]], "polars.Expr.dt.quarter": [[390, "polars-expr-dt-quarter"]], "polars.Expr.dt.month_start": [[385, "polars-expr-dt-month-start"]], "polars.Expr.gather": [[430, "polars-expr-gather"]], "polars.Expr.dt.total_days": [[399, "polars-expr-dt-total-days"]], "polars.Expr.explode": [[419, "polars-expr-explode"]], "polars.Expr.dt.seconds": [[394, "polars-expr-dt-seconds"]], "polars.Expr.exp": [[418, "polars-expr-exp"]], "polars.Expr.dt.timestamp": [[397, "polars-expr-dt-timestamp"]], "polars.Expr.dt.truncate": [[406, "polars-expr-dt-truncate"]], "polars.Expr.dt.total_minutes": [[403, "polars-expr-dt-total-minutes"]], "polars.Expr.floor": [[426, "polars-expr-floor"]], "polars.Expr.ewm_mean": [[414, "polars-expr-ewm-mean"]], "polars.Expr.dt.with_time_unit": [[409, "polars-expr-dt-with-time-unit"]], "polars.Expr.flatten": [[425, "polars-expr-flatten"]], "polars.Expr.dt.nanosecond": [[386, "polars-expr-dt-nanosecond"]], "polars.Expr.dt.total_milliseconds": [[402, "polars-expr-dt-total-milliseconds"]], "polars.Expr.dt.total_nanoseconds": [[404, "polars-expr-dt-total-nanoseconds"]], "polars.Expr.from_json": [[429, "polars-expr-from-json"]], "polars.Expr.dt.offset_by": [[388, "polars-expr-dt-offset-by"]], "polars.Expr.dt.ordinal_day": [[389, "polars-expr-dt-ordinal-day"]], "polars.Expr.dt.weekday": [[408, "polars-expr-dt-weekday"]], "polars.Expr.ewm_std": [[415, "polars-expr-ewm-std"]], "polars.Expr.ewm_var": [[416, "polars-expr-ewm-var"]], "polars.Expr.dt.total_microseconds": [[401, "polars-expr-dt-total-microseconds"]], "polars.Expr.dt.total_hours": [[400, "polars-expr-dt-total-hours"]], "polars.Expr.filter": [[423, "polars-expr-filter"]], "polars.Expr.extend_constant": [[420, "polars-expr-extend-constant"]], "polars.Expr.dt.time": [[396, "polars-expr-dt-time"]], "polars.Expr.fill_nan": [[421, "polars-expr-fill-nan"]], "polars.DataFrame.vstack": [[268, "polars-dataframe-vstack"]], "polars.DataFrame.to_series": [[258, "polars-dataframe-to-series"]], "polars.DataFrame.to_dicts": [[253, "polars-dataframe-to-dicts"]], "polars.DataFrame.pipe": [[221, "polars-dataframe-pipe"]], "polars.DataFrame.std": [[246, "polars-dataframe-std"]], "polars.DataFrame.unnest": [[263, "polars-dataframe-unnest"]], "polars.DataFrame.with_columns_seq": [[271, "polars-dataframe-with-columns-seq"]], "polars.DataFrame.rechunk": [[225, "polars-dataframe-rechunk"]], "polars.DataFrame.row": [[232, "polars-dataframe-row"]], "polars.DataFrame.rows": [[233, "polars-dataframe-rows"]], "polars.DataFrame.sum": [[247, "polars-dataframe-sum"]], "polars.DataFrame.to_init_repr": [[255, "polars-dataframe-to-init-repr"]], "polars.DataFrame.transpose": [[261, "polars-dataframe-transpose"]], "polars.DataFrame.with_row_count": [[272, "polars-dataframe-with-row-count"]], "polars.DataFrame.upsample": [[266, "polars-dataframe-upsample"]], "polars.DataFrame.with_columns": [[270, "polars-dataframe-with-columns"]], "polars.DataFrame.replace_column": [[229, "polars-dataframe-replace-column"]], "polars.DataFrame.rename": [[226, "polars-dataframe-rename"]], "polars.DataFrame.sum_horizontal": [[248, "polars-dataframe-sum-horizontal"]], "polars.DataFrame.to_arrow": [[251, "polars-dataframe-to-arrow"]], "polars.dataframe.group_by.GroupBy.agg": [[274, "polars-dataframe-group-by-groupby-agg"]], "polars.DataFrame.slice": [[244, "polars-dataframe-slice"]], "polars.DataFrame.shift_and_fill": [[242, "polars-dataframe-shift-and-fill"]], "polars.DataFrame.unique": [[262, "polars-dataframe-unique"]], "polars.DataFrame.top_k": [[260, "polars-dataframe-top-k"]], "polars.DataFrame.product": [[223, "polars-dataframe-product"]], "polars.DataFrame.var": [[267, "polars-dataframe-var"]], "polars.DataFrame.rows_by_key": [[234, "polars-dataframe-rows-by-key"]], "polars.DataFrame.replace": [[227, "polars-dataframe-replace"]], "polars.DataFrame.select_seq": [[238, "polars-dataframe-select-seq"]], "polars.DataFrame.reverse": [[230, "polars-dataframe-reverse"]], "polars.DataFrame.sort": [[245, "polars-dataframe-sort"]], "polars.DataFrame.set_sorted": [[239, "polars-dataframe-set-sorted"]], "polars.DataFrame.shift": [[241, "polars-dataframe-shift"]], "polars.DataFrame.unstack": [[264, "polars-dataframe-unstack"]], "polars.DataFrame.shrink_to_fit": [[243, "polars-dataframe-shrink-to-fit"]], "polars.DataFrame.tail": [[249, "polars-dataframe-tail"]], "polars.DataFrame.schema": [[236, "polars-dataframe-schema"]], "polars.DataFrame.rolling": [[231, "polars-dataframe-rolling"]], "polars.DataFrame.partition_by": [[220, "polars-dataframe-partition-by"]], "polars.DataFrame.pivot": [[222, "polars-dataframe-pivot"]], "polars.DataFrame.quantile": [[224, "polars-dataframe-quantile"]], "polars.DataFrame.take_every": [[250, "polars-dataframe-take-every"]], "polars.DataFrame.to_pandas": [[257, "polars-dataframe-to-pandas"]], "polars.DataFrame.to_struct": [[259, "polars-dataframe-to-struct"]], "polars.DataFrame.to_dummies": [[254, "polars-dataframe-to-dummies"]], "polars.DataFrame.shape": [[240, "polars-dataframe-shape"]], "polars.DataFrame.update": [[265, "polars-dataframe-update"]], "polars.DataFrame.select": [[237, "polars-dataframe-select"]], "polars.DataFrame.width": [[269, "polars-dataframe-width"]], "polars.DataFrame.to_numpy": [[256, "polars-dataframe-to-numpy"]], "polars.dataframe.group_by.GroupBy.__iter__": [[273, "polars-dataframe-group-by-groupby-iter"]], "polars.DataFrame.to_dict": [[252, "polars-dataframe-to-dict"]], "polars.DataFrame.sample": [[235, "polars-dataframe-sample"]], "polars.DataFrame.replace_at_idx": [[228, "polars-dataframe-replace-at-idx"]], "polars.time_ranges": [[733, "polars-time-ranges"]], "polars.select": [[724, "polars-select"]], "Input/output": [[758, "input-output"]], "CSV": [[758, "csv"]], "Feather/ IPC": [[758, "feather-ipc"]], "Parquet": [[758, "parquet"]], "Database": [[758, "database"]], "JSON": [[758, "json"]], "AVRO": [[758, "avro"]], "Spreadsheet": [[758, "spreadsheet"]], "Apache Iceberg": [[758, "apache-iceberg"]], "Delta Lake": [[758, "delta-lake"]], "Datasets": [[758, "datasets"]], "BatchedCsvReader": [[758, "batchedcsvreader"]], "polars.LazyFrame.clone": [[765, "polars-lazyframe-clone"]], "polars.LazyFrame.columns": [[768, "polars-lazyframe-columns"]], "Operators": [[751, "operators"]], "Conjunction": [[751, "conjunction"]], "Comparison": [[751, "comparison"]], "Numeric": [[751, "numeric"], [298, "numeric"]], "Window": [[755, "window"]], "Expressions": [[745, "expressions"]], "polars.LazyFrame.cache": [[762, "polars-lazyframe-cache"]], "API reference": [[757, "api-reference"]], "polars.std": [[726, "polars-std"]], "polars.col": [[741, "polars-col"]], "polars.struct": [[727, "polars-struct"]], "polars.time": [[731, "polars-time"]], "polars.zeros": [[736, "polars-zeros"]], "polars.sql_expr": [[725, "polars-sql-expr"]], "polars.rolling_cov": [[723, "polars-rolling-cov"]], "polars.LazyFrame.deserialize": [[769, "polars-lazyframe-deserialize"]], "polars.var": [[734, "polars-var"]], "Conversion": [[756, "conversion"]], "Parallelization": [[756, "parallelization"]], "Random": [[756, "random"]], "StringCache": [[756, "stringcache"]], "polars.sum": [[728, "polars-sum"]], "polars.rolling_corr": [[722, "polars-rolling-corr"]], "Meta": [[747, "meta"]], "polars.LazyFrame.clear": [[764, "polars-lazyframe-clear"]], "polars.LazyFrame.collect": [[766, "polars-lazyframe-collect"]], "polars.LazyFrame.bottom_k": [[761, "polars-lazyframe-bottom-k"]], "polars.time_range": [[732, "polars-time-range"]], "polars.LazyFrame.cast": [[763, "polars-lazyframe-cast"]], "polars.ones": [[718, "polars-ones"]], "polars.when": [[735, "polars-when"]], "polars.tail": [[730, "polars-tail"]], "polars.min_horizontal": [[716, "polars-min-horizontal"]], "polars.repeat": [[721, "polars-repeat"]], "polars.LazyFrame.approx_n_unique": [[760, "polars-lazyframe-approx-n-unique"]], "Columns / names": [[742, "columns-names"]], "polars.min": [[715, "polars-min"]], "polars.LazyFrame.collect_async": [[767, "polars-lazyframe-collect-async"]], "polars.reduce": [[720, "polars-reduce"]], "Name": [[750, "name"]], "polars.sum_horizontal": [[729, "polars-sum-horizontal"]], "polars.quantile": [[719, "polars-quantile"]], "polars.n_unique": [[717, "polars-n-unique"]], "polars.Expr.any": [[307, "polars-expr-any"]], "polars.Expr.arr.sum": [[324, "polars-expr-arr-sum"]], "polars.dataframe.group_by.GroupBy.map_groups": [[281, "polars-dataframe-group-by-groupby-map-groups"]], "polars.dataframe.group_by.GroupBy.tail": [[289, "polars-dataframe-group-by-groupby-tail"]], "polars.Expr.arr.max": [[322, "polars-expr-arr-max"]], "polars.Expr.bin.decode": [[329, "polars-expr-bin-decode"]], "polars.Expr.arg_unique": [[321, "polars-expr-arg-unique"]], "polars.dataframe.group_by.GroupBy.min": [[285, "polars-dataframe-group-by-groupby-min"]], "polars.Expr.backward_fill": [[327, "polars-expr-backward-fill"]], "Exceptions": [[299, "exceptions"]], "polars.dataframe.group_by.GroupBy.count": [[277, "polars-dataframe-group-by-groupby-count"]], "polars.Expr.agg_groups": [[303, "polars-expr-agg-groups"]], "polars.Expr.arr.min": [[323, "polars-expr-arr-min"]], "polars.Expr.and_": [[306, "polars-expr-and"]], "polars.Expr.arcsin": [[313, "polars-expr-arcsin"]], "polars.dataframe.group_by.GroupBy.apply": [[276, "polars-dataframe-group-by-groupby-apply"]], "polars.dataframe.group_by.GroupBy.mean": [[283, "polars-dataframe-group-by-groupby-mean"]], "polars.dataframe.group_by.GroupBy.max": [[282, "polars-dataframe-group-by-groupby-max"]], "polars.Expr.arccosh": [[312, "polars-expr-arccosh"]], "polars.Expr.arg_max": [[317, "polars-expr-arg-max"]], "polars.Expr.arr.unique": [[326, "polars-expr-arr-unique"]], "polars.Expr.arcsinh": [[314, "polars-expr-arcsinh"]], "polars.dataframe.group_by.GroupBy.n_unique": [[286, "polars-dataframe-group-by-groupby-n-unique"]], "polars.Expr.arg_true": [[320, "polars-expr-arg-true"]], "polars.Expr.arg_min": [[318, "polars-expr-arg-min"]], "polars.Expr.approx_n_unique": [[310, "polars-expr-approx-n-unique"]], "polars.Expr.all": [[305, "polars-expr-all"]], "polars.Expr.apply": [[309, "polars-expr-apply"]], "polars.dataframe.group_by.GroupBy.quantile": [[287, "polars-dataframe-group-by-groupby-quantile"]], "polars.Expr.arctan": [[315, "polars-expr-arctan"]], "polars.Expr.bin.contains": [[328, "polars-expr-bin-contains"]], "polars.dataframe.group_by.GroupBy.first": [[278, "polars-dataframe-group-by-groupby-first"]], "polars.dataframe.group_by.GroupBy.head": [[279, "polars-dataframe-group-by-groupby-head"]], "polars.Expr.arg_sort": [[319, "polars-expr-arg-sort"]], "polars.Expr.add": [[302, "polars-expr-add"]], "polars.Expr.alias": [[304, "polars-expr-alias"]], "polars.dataframe.group_by.GroupBy.all": [[275, "polars-dataframe-group-by-groupby-all"]], "polars.Expr.arccos": [[311, "polars-expr-arccos"]], "polars.dataframe.group_by.GroupBy.median": [[284, "polars-dataframe-group-by-groupby-median"]], "polars.Expr.arr.to_list": [[325, "polars-expr-arr-to-list"]], "polars.Expr.append": [[308, "polars-expr-append"]], "polars.dataframe.group_by.GroupBy.sum": [[288, "polars-dataframe-group-by-groupby-sum"]], "polars.Expr.arctanh": [[316, "polars-expr-arctanh"]], "Data types": [[298, "data-types"]], "Nested": [[298, "nested"]], "Other": [[298, "other"]], "polars.Expr.abs": [[301, "polars-expr-abs"]], "polars.dataframe.group_by.GroupBy.last": [[280, "polars-dataframe-group-by-groupby-last"]], "DataFrame": [[295, "dataframe"]]}, "indexentries": {"array (class in polars)": [[2, "polars.Array"]], "__init__() (polars.array method)": [[2, "polars.Array.__init__"]], "binary (class in polars)": [[3, "polars.Binary"]], "__init__() (polars.binary method)": [[3, "polars.Binary.__init__"]], "boolean (class in polars)": [[4, "polars.Boolean"]], "__init__() (polars.boolean method)": [[4, "polars.Boolean.__init__"]], "categorical (class in polars)": [[5, "polars.Categorical"]], "__init__() (polars.categorical method)": [[5, "polars.Categorical.__init__"]], "activate_decimals() (polars.config class method)": [[6, "polars.Config.activate_decimals"]], "load() (polars.config class method)": [[7, "polars.Config.load"]], "load_from_file() (polars.config class method)": [[8, "polars.Config.load_from_file"]], "restore_defaults() (polars.config class method)": [[9, "polars.Config.restore_defaults"]], "save() (polars.config class method)": [[10, "polars.Config.save"]], "save_to_file() (polars.config class method)": [[11, "polars.Config.save_to_file"]], "set_ascii_tables() (polars.config class method)": [[12, "polars.Config.set_ascii_tables"]], "set_auto_structify() (polars.config class method)": [[13, "polars.Config.set_auto_structify"]], "set_decimal_separator() (polars.config class method)": [[14, "polars.Config.set_decimal_separator"]], "set_float_precision() (polars.config class method)": [[15, "polars.Config.set_float_precision"]], "set_fmt_float() (polars.config class method)": [[16, "polars.Config.set_fmt_float"]], "set_fmt_str_lengths() (polars.config class method)": [[17, "polars.Config.set_fmt_str_lengths"]], "set_fmt_table_cell_list_len() (polars.config class method)": [[18, "polars.Config.set_fmt_table_cell_list_len"]], "set_streaming_chunk_size() (polars.config class method)": [[19, "polars.Config.set_streaming_chunk_size"]], "set_tbl_cell_alignment() (polars.config class method)": [[20, "polars.Config.set_tbl_cell_alignment"]], "set_tbl_cell_numeric_alignment() (polars.config class method)": [[21, "polars.Config.set_tbl_cell_numeric_alignment"]], "set_tbl_cols() (polars.config class method)": [[22, "polars.Config.set_tbl_cols"]], "set_tbl_column_data_type_inline() (polars.config class method)": [[23, "polars.Config.set_tbl_column_data_type_inline"]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[24, "polars.Config.set_tbl_dataframe_shape_below"]], "set_tbl_formatting() (polars.config class method)": [[25, "polars.Config.set_tbl_formatting"]], "set_tbl_hide_column_data_types() (polars.config class method)": [[26, "polars.Config.set_tbl_hide_column_data_types"]], "set_tbl_hide_column_names() (polars.config class method)": [[27, "polars.Config.set_tbl_hide_column_names"]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[28, "polars.Config.set_tbl_hide_dataframe_shape"]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[29, "polars.Config.set_tbl_hide_dtype_separator"]], "set_tbl_rows() (polars.config class method)": [[30, "polars.Config.set_tbl_rows"]], "set_tbl_width_chars() (polars.config class method)": [[31, "polars.Config.set_tbl_width_chars"]], "set_thousands_separator() (polars.config class method)": [[32, "polars.Config.set_thousands_separator"]], "set_trim_decimal_zeros() (polars.config class method)": [[33, "polars.Config.set_trim_decimal_zeros"]], "set_verbose() (polars.config class method)": [[34, "polars.Config.set_verbose"]], "state() (polars.config class method)": [[35, "polars.Config.state"]], "write_avro() (polars.dataframe method)": [[36, "polars.DataFrame.write_avro"]], "write_csv() (polars.dataframe method)": [[37, "polars.DataFrame.write_csv"]], "write_database() (polars.dataframe method)": [[38, "polars.DataFrame.write_database"]], "write_delta() (polars.dataframe method)": [[39, "polars.DataFrame.write_delta"]], "write_excel() (polars.dataframe method)": [[40, "polars.DataFrame.write_excel"]], "write_ipc() (polars.dataframe method)": [[41, "polars.DataFrame.write_ipc"]], "write_ipc_stream() (polars.dataframe method)": [[42, "polars.DataFrame.write_ipc_stream"]], "write_json() (polars.dataframe method)": [[43, "polars.DataFrame.write_json"]], "write_ndjson() (polars.dataframe method)": [[44, "polars.DataFrame.write_ndjson"]], "write_parquet() (polars.dataframe method)": [[45, "polars.DataFrame.write_parquet"]], "datatype (class in polars)": [[46, "polars.DataType"]], "__init__() (polars.datatype method)": [[46, "polars.DataType.__init__"]], "date (class in polars)": [[47, "polars.Date"]], "__init__() (polars.date method)": [[47, "polars.Date.__init__"]], "datetime (class in polars)": [[48, "polars.Datetime"]], "__init__() (polars.datetime method)": [[48, "polars.Datetime.__init__"]], "decimal (class in polars)": [[49, "polars.Decimal"]], "__init__() (polars.decimal method)": [[49, "polars.Decimal.__init__"]], "duration (class in polars)": [[50, "polars.Duration"]], "__init__() (polars.duration method)": [[50, "polars.Duration.__init__"]], "enum (class in polars)": [[51, "polars.Enum"]], "__init__() (polars.enum method)": [[51, "polars.Enum.__init__"]], "float32 (class in polars)": [[52, "polars.Float32"]], "__init__() (polars.float32 method)": [[52, "polars.Float32.__init__"]], "float64 (class in polars)": [[53, "polars.Float64"]], "__init__() (polars.float64 method)": [[53, "polars.Float64.__init__"]], "int16 (class in polars)": [[54, "polars.Int16"]], "__init__() (polars.int16 method)": [[54, "polars.Int16.__init__"]], "int32 (class in polars)": [[55, "polars.Int32"]], "__init__() (polars.int32 method)": [[55, "polars.Int32.__init__"]], "int64 (class in polars)": [[56, "polars.Int64"]], "__init__() (polars.int64 method)": [[56, "polars.Int64.__init__"]], "int8 (class in polars)": [[57, "polars.Int8"]], "__init__() (polars.int8 method)": [[57, "polars.Int8.__init__"]], "sink_csv() (polars.lazyframe method)": [[58, "polars.LazyFrame.sink_csv"]], "sink_ipc() (polars.lazyframe method)": [[59, "polars.LazyFrame.sink_ipc"]], "sink_parquet() (polars.lazyframe method)": [[60, "polars.LazyFrame.sink_parquet"]], "list (class in polars)": [[61, "polars.List"]], "__init__() (polars.list method)": [[61, "polars.List.__init__"]], "null (class in polars)": [[62, "polars.Null"]], "__init__() (polars.null method)": [[62, "polars.Null.__init__"]], "object (class in polars)": [[63, "polars.Object"]], "__init__() (polars.object method)": [[63, "polars.Object.__init__"]], "execute() (polars.sqlcontext method)": [[64, "polars.SQLContext.execute"]], "register() (polars.sqlcontext method)": [[65, "polars.SQLContext.register"]], "register_globals() (polars.sqlcontext method)": [[66, "polars.SQLContext.register_globals"]], "register_many() (polars.sqlcontext method)": [[67, "polars.SQLContext.register_many"]], "tables() (polars.sqlcontext method)": [[68, "polars.SQLContext.tables"]], "unregister() (polars.sqlcontext method)": [[69, "polars.SQLContext.unregister"]], "stringcache (class in polars)": [[70, "polars.StringCache"]], "__init__() (polars.stringcache method)": [[70, "polars.StringCache.__init__"]], "struct (class in polars)": [[71, "polars.Struct"]], "__init__() (polars.struct method)": [[71, "polars.Struct.__init__"]], "time (class in polars)": [[72, "polars.Time"]], "__init__() (polars.time method)": [[72, "polars.Time.__init__"]], "uint16 (class in polars)": [[73, "polars.UInt16"]], "__init__() (polars.uint16 method)": [[73, "polars.UInt16.__init__"]], "uint32 (class in polars)": [[74, "polars.UInt32"]], "__init__() (polars.uint32 method)": [[74, "polars.UInt32.__init__"]], "uint64 (class in polars)": [[75, "polars.UInt64"]], "__init__() (polars.uint64 method)": [[75, "polars.UInt64.__init__"]], "uint8 (class in polars)": [[76, "polars.UInt8"]], "__init__() (polars.uint8 method)": [[76, "polars.UInt8.__init__"]], "unknown (class in polars)": [[77, "polars.Unknown"]], "__init__() (polars.unknown method)": [[77, "polars.Unknown.__init__"]], "utf8 (class in polars)": [[78, "polars.Utf8"]], "__init__() (polars.utf8 method)": [[78, "polars.Utf8.__init__"]], "align_frames() (in module polars)": [[79, "polars.align_frames"]], "register_dataframe_namespace() (in module polars.api)": [[80, "polars.api.register_dataframe_namespace"]], "register_expr_namespace() (in module polars.api)": [[81, "polars.api.register_expr_namespace"]], "register_lazyframe_namespace() (in module polars.api)": [[82, "polars.api.register_lazyframe_namespace"]], "register_series_namespace() (in module polars.api)": [[83, "polars.api.register_series_namespace"]], "build_info() (in module polars)": [[84, "polars.build_info"]], "collect_all() (in module polars)": [[85, "polars.collect_all"]], "collect_all_async() (in module polars)": [[86, "polars.collect_all_async"]], "concat() (in module polars)": [[87, "polars.concat"]], "disable_string_cache() (in module polars)": [[88, "polars.disable_string_cache"]], "enable_string_cache() (in module polars)": [[89, "polars.enable_string_cache"]], "arrowerror": [[90, "polars.exceptions.ArrowError"]], "columnnotfounderror": [[91, "polars.exceptions.ColumnNotFoundError"]], "computeerror": [[92, "polars.exceptions.ComputeError"]], "duplicateerror": [[93, "polars.exceptions.DuplicateError"]], "invalidoperationerror": [[94, "polars.exceptions.InvalidOperationError"]], "nodataerror": [[95, "polars.exceptions.NoDataError"]], "norowsreturnederror": [[96, "polars.exceptions.NoRowsReturnedError"]], "polarspanicerror": [[97, "polars.exceptions.PolarsPanicError"]], "rowserror": [[98, "polars.exceptions.RowsError"]], "schemaerror": [[99, "polars.exceptions.SchemaError"]], "schemafieldnotfounderror": [[100, "polars.exceptions.SchemaFieldNotFoundError"]], "shapeerror": [[101, "polars.exceptions.ShapeError"]], "structfieldnotfounderror": [[102, "polars.exceptions.StructFieldNotFoundError"]], "toomanyrowsreturnederror": [[103, "polars.exceptions.TooManyRowsReturnedError"]], "from_arrow() (in module polars)": [[104, "polars.from_arrow"]], "from_dataframe() (in module polars)": [[105, "polars.from_dataframe"]], "from_dict() (in module polars)": [[106, "polars.from_dict"]], "from_dicts() (in module polars)": [[107, "polars.from_dicts"]], "from_numpy() (in module polars)": [[108, "polars.from_numpy"]], "from_pandas() (in module polars)": [[109, "polars.from_pandas"]], "from_records() (in module polars)": [[110, "polars.from_records"]], "from_repr() (in module polars)": [[111, "polars.from_repr"]], "get_index_type() (in module polars)": [[112, "polars.get_index_type"]], "next_batches() (polars.io.csv.batched_reader.batchedcsvreader method)": [[113, "polars.io.csv.batched_reader.BatchedCsvReader.next_batches"]], "read_avro() (in module polars)": [[114, "polars.read_avro"]], "read_csv() (in module polars)": [[115, "polars.read_csv"]], "read_csv_batched() (in module polars)": [[116, "polars.read_csv_batched"]], "read_database() (in module polars)": [[117, "polars.read_database"]], "read_database_uri() (in module polars)": [[118, "polars.read_database_uri"]], "read_delta() (in module polars)": [[119, "polars.read_delta"]], "read_excel() (in module polars)": [[120, "polars.read_excel"]], "read_ipc() (in module polars)": [[121, "polars.read_ipc"]], "read_ipc_schema() (in module polars)": [[122, "polars.read_ipc_schema"]], "read_ipc_stream() (in module polars)": [[123, "polars.read_ipc_stream"]], "read_json() (in module polars)": [[124, "polars.read_json"]], "read_ndjson() (in module polars)": [[125, "polars.read_ndjson"]], "read_ods() (in module polars)": [[126, "polars.read_ods"]], "read_parquet() (in module polars)": [[127, "polars.read_parquet"]], "read_parquet_schema() (in module polars)": [[128, "polars.read_parquet_schema"]], "scan_csv() (in module polars)": [[129, "polars.scan_csv"]], "scan_delta() (in module polars)": [[130, "polars.scan_delta"]], "scan_iceberg() (in module polars)": [[131, "polars.scan_iceberg"]], "scan_ipc() (in module polars)": [[132, "polars.scan_ipc"]], "scan_ndjson() (in module polars)": [[133, "polars.scan_ndjson"]], "scan_parquet() (in module polars)": [[134, "polars.scan_parquet"]], "scan_pyarrow_dataset() (in module polars)": [[135, "polars.scan_pyarrow_dataset"]], "set_random_seed() (in module polars)": [[136, "polars.set_random_seed"]], "show_versions() (in module polars)": [[137, "polars.show_versions"]], "assert_frame_equal() (in module polars.testing)": [[138, "polars.testing.assert_frame_equal"]], "assert_frame_not_equal() (in module polars.testing)": [[139, "polars.testing.assert_frame_not_equal"]], "assert_series_equal() (in module polars.testing)": [[140, "polars.testing.assert_series_equal"]], "assert_series_not_equal() (in module polars.testing)": [[141, "polars.testing.assert_series_not_equal"]], "__init__() (polars.testing.parametric.column method)": [[142, "polars.testing.parametric.column.__init__"]], "column (class in polars.testing.parametric)": [[142, "polars.testing.parametric.column"]], "columns() (in module polars.testing.parametric)": [[143, "polars.testing.parametric.columns"]], "create_list_strategy() (in module polars.testing.parametric)": [[144, "polars.testing.parametric.create_list_strategy"]], "dataframes() (in module polars.testing.parametric)": [[145, "polars.testing.parametric.dataframes"]], "load_profile() (in module polars.testing.parametric)": [[146, "polars.testing.parametric.load_profile"]], "series() (in module polars.testing.parametric)": [[147, "polars.testing.parametric.series"]], "set_profile() (in module polars.testing.parametric)": [[148, "polars.testing.parametric.set_profile"]], "threadpool_size() (in module polars)": [[149, "polars.threadpool_size"]], "using_string_cache() (in module polars)": [[150, "polars.using_string_cache"]], "__dataframe__() (polars.dataframe method)": [[153, "polars.DataFrame.__dataframe__"]], "apply() (polars.dataframe method)": [[154, "polars.DataFrame.apply"]], "approx_n_unique() (polars.dataframe method)": [[155, "polars.DataFrame.approx_n_unique"]], "bottom_k() (polars.dataframe method)": [[156, "polars.DataFrame.bottom_k"]], "cast() (polars.dataframe method)": [[157, "polars.DataFrame.cast"]], "clear() (polars.dataframe method)": [[158, "polars.DataFrame.clear"]], "clone() (polars.dataframe method)": [[159, "polars.DataFrame.clone"]], "columns (polars.dataframe property)": [[160, "polars.DataFrame.columns"]], "corr() (polars.dataframe method)": [[161, "polars.DataFrame.corr"]], "describe() (polars.dataframe method)": [[162, "polars.DataFrame.describe"]], "drop() (polars.dataframe method)": [[163, "polars.DataFrame.drop"]], "drop_in_place() (polars.dataframe method)": [[164, "polars.DataFrame.drop_in_place"]], "drop_nulls() (polars.dataframe method)": [[165, "polars.DataFrame.drop_nulls"]], "dtypes (polars.dataframe property)": [[166, "polars.DataFrame.dtypes"]], "equals() (polars.dataframe method)": [[167, "polars.DataFrame.equals"]], "estimated_size() (polars.dataframe method)": [[168, "polars.DataFrame.estimated_size"]], "explode() (polars.dataframe method)": [[169, "polars.DataFrame.explode"]], "extend() (polars.dataframe method)": [[170, "polars.DataFrame.extend"]], "fill_nan() (polars.dataframe method)": [[171, "polars.DataFrame.fill_nan"]], "fill_null() (polars.dataframe method)": [[172, "polars.DataFrame.fill_null"]], "filter() (polars.dataframe method)": [[173, "polars.DataFrame.filter"]], "find_idx_by_name() (polars.dataframe method)": [[174, "polars.DataFrame.find_idx_by_name"]], "flags (polars.dataframe property)": [[175, "polars.DataFrame.flags"]], "fold() (polars.dataframe method)": [[176, "polars.DataFrame.fold"]], "frame_equal() (polars.dataframe method)": [[177, "polars.DataFrame.frame_equal"]], "gather_every() (polars.dataframe method)": [[178, "polars.DataFrame.gather_every"]], "get_column() (polars.dataframe method)": [[179, "polars.DataFrame.get_column"]], "get_column_index() (polars.dataframe method)": [[180, "polars.DataFrame.get_column_index"]], "get_columns() (polars.dataframe method)": [[181, "polars.DataFrame.get_columns"]], "glimpse() (polars.dataframe method)": [[182, "polars.DataFrame.glimpse"]], "group_by() (polars.dataframe method)": [[183, "polars.DataFrame.group_by"]], "group_by_dynamic() (polars.dataframe method)": [[184, "polars.DataFrame.group_by_dynamic"]], "group_by_rolling() (polars.dataframe method)": [[185, "polars.DataFrame.group_by_rolling"]], "groupby() (polars.dataframe method)": [[186, "polars.DataFrame.groupby"]], "groupby_dynamic() (polars.dataframe method)": [[187, "polars.DataFrame.groupby_dynamic"]], "groupby_rolling() (polars.dataframe method)": [[188, "polars.DataFrame.groupby_rolling"]], "hash_rows() (polars.dataframe method)": [[189, "polars.DataFrame.hash_rows"]], "head() (polars.dataframe method)": [[190, "polars.DataFrame.head"]], "height (polars.dataframe property)": [[191, "polars.DataFrame.height"]], "hstack() (polars.dataframe method)": [[192, "polars.DataFrame.hstack"]], "insert_at_idx() (polars.dataframe method)": [[193, "polars.DataFrame.insert_at_idx"]], "insert_column() (polars.dataframe method)": [[194, "polars.DataFrame.insert_column"]], "interpolate() (polars.dataframe method)": [[195, "polars.DataFrame.interpolate"]], "is_duplicated() (polars.dataframe method)": [[196, "polars.DataFrame.is_duplicated"]], "is_empty() (polars.dataframe method)": [[197, "polars.DataFrame.is_empty"]], "is_unique() (polars.dataframe method)": [[198, "polars.DataFrame.is_unique"]], "item() (polars.dataframe method)": [[199, "polars.DataFrame.item"]], "iter_columns() (polars.dataframe method)": [[200, "polars.DataFrame.iter_columns"]], "iter_rows() (polars.dataframe method)": [[201, "polars.DataFrame.iter_rows"]], "iter_slices() (polars.dataframe method)": [[202, "polars.DataFrame.iter_slices"]], "join() (polars.dataframe method)": [[203, "polars.DataFrame.join"]], "join_asof() (polars.dataframe method)": [[204, "polars.DataFrame.join_asof"]], "lazy() (polars.dataframe method)": [[205, "polars.DataFrame.lazy"]], "limit() (polars.dataframe method)": [[206, "polars.DataFrame.limit"]], "map_rows() (polars.dataframe method)": [[207, "polars.DataFrame.map_rows"]], "max() (polars.dataframe method)": [[208, "polars.DataFrame.max"]], "max_horizontal() (polars.dataframe method)": [[209, "polars.DataFrame.max_horizontal"]], "mean() (polars.dataframe method)": [[210, "polars.DataFrame.mean"]], "mean_horizontal() (polars.dataframe method)": [[211, "polars.DataFrame.mean_horizontal"]], "median() (polars.dataframe method)": [[212, "polars.DataFrame.median"]], "melt() (polars.dataframe method)": [[213, "polars.DataFrame.melt"]], "merge_sorted() (polars.dataframe method)": [[214, "polars.DataFrame.merge_sorted"]], "min() (polars.dataframe method)": [[215, "polars.DataFrame.min"]], "min_horizontal() (polars.dataframe method)": [[216, "polars.DataFrame.min_horizontal"]], "n_chunks() (polars.dataframe method)": [[217, "polars.DataFrame.n_chunks"]], "n_unique() (polars.dataframe method)": [[218, "polars.DataFrame.n_unique"]], "null_count() (polars.dataframe method)": [[219, "polars.DataFrame.null_count"]], "partition_by() (polars.dataframe method)": [[220, "polars.DataFrame.partition_by"]], "pipe() (polars.dataframe method)": [[221, "polars.DataFrame.pipe"]], "pivot() (polars.dataframe method)": [[222, "polars.DataFrame.pivot"]], "product() (polars.dataframe method)": [[223, "polars.DataFrame.product"]], "quantile() (polars.dataframe method)": [[224, "polars.DataFrame.quantile"]], "rechunk() (polars.dataframe method)": [[225, "polars.DataFrame.rechunk"]], "rename() (polars.dataframe method)": [[226, "polars.DataFrame.rename"]], "replace() (polars.dataframe method)": [[227, "polars.DataFrame.replace"]], "replace_at_idx() (polars.dataframe method)": [[228, "polars.DataFrame.replace_at_idx"]], "replace_column() (polars.dataframe method)": [[229, "polars.DataFrame.replace_column"]], "reverse() (polars.dataframe method)": [[230, "polars.DataFrame.reverse"]], "rolling() (polars.dataframe method)": [[231, "polars.DataFrame.rolling"]], "row() (polars.dataframe method)": [[232, "polars.DataFrame.row"]], "rows() (polars.dataframe method)": [[233, "polars.DataFrame.rows"]], "rows_by_key() (polars.dataframe method)": [[234, "polars.DataFrame.rows_by_key"]], "sample() (polars.dataframe method)": [[235, "polars.DataFrame.sample"]], "schema (polars.dataframe property)": [[236, "polars.DataFrame.schema"]], "select() (polars.dataframe method)": [[237, "polars.DataFrame.select"]], "select_seq() (polars.dataframe method)": [[238, "polars.DataFrame.select_seq"]], "set_sorted() (polars.dataframe method)": [[239, "polars.DataFrame.set_sorted"]], "shape (polars.dataframe property)": [[240, "polars.DataFrame.shape"]], "shift() (polars.dataframe method)": [[241, "polars.DataFrame.shift"]], "shift_and_fill() (polars.dataframe method)": [[242, "polars.DataFrame.shift_and_fill"]], "shrink_to_fit() (polars.dataframe method)": [[243, "polars.DataFrame.shrink_to_fit"]], "slice() (polars.dataframe method)": [[244, "polars.DataFrame.slice"]], "sort() (polars.dataframe method)": [[245, "polars.DataFrame.sort"]], "std() (polars.dataframe method)": [[246, "polars.DataFrame.std"]], "sum() (polars.dataframe method)": [[247, "polars.DataFrame.sum"]], "sum_horizontal() (polars.dataframe method)": [[248, "polars.DataFrame.sum_horizontal"]], "tail() (polars.dataframe method)": [[249, "polars.DataFrame.tail"]], "take_every() (polars.dataframe method)": [[250, "polars.DataFrame.take_every"]], "to_arrow() (polars.dataframe method)": [[251, "polars.DataFrame.to_arrow"]], "to_dict() (polars.dataframe method)": [[252, "polars.DataFrame.to_dict"]], "to_dicts() (polars.dataframe method)": [[253, "polars.DataFrame.to_dicts"]], "to_dummies() (polars.dataframe method)": [[254, "polars.DataFrame.to_dummies"]], "to_init_repr() (polars.dataframe method)": [[255, "polars.DataFrame.to_init_repr"]], "to_numpy() (polars.dataframe method)": [[256, "polars.DataFrame.to_numpy"]], "to_pandas() (polars.dataframe method)": [[257, "polars.DataFrame.to_pandas"]], "to_series() (polars.dataframe method)": [[258, "polars.DataFrame.to_series"]], "to_struct() (polars.dataframe method)": [[259, "polars.DataFrame.to_struct"]], "top_k() (polars.dataframe method)": [[260, "polars.DataFrame.top_k"]], "transpose() (polars.dataframe method)": [[261, "polars.DataFrame.transpose"]], "unique() (polars.dataframe method)": [[262, "polars.DataFrame.unique"]], "unnest() (polars.dataframe method)": [[263, "polars.DataFrame.unnest"]], "unstack() (polars.dataframe method)": [[264, "polars.DataFrame.unstack"]], "update() (polars.dataframe method)": [[265, "polars.DataFrame.update"]], "upsample() (polars.dataframe method)": [[266, "polars.DataFrame.upsample"]], "var() (polars.dataframe method)": [[267, "polars.DataFrame.var"]], "vstack() (polars.dataframe method)": [[268, "polars.DataFrame.vstack"]], "width (polars.dataframe property)": [[269, "polars.DataFrame.width"]], "with_columns() (polars.dataframe method)": [[270, "polars.DataFrame.with_columns"]], "with_columns_seq() (polars.dataframe method)": [[271, "polars.DataFrame.with_columns_seq"]], "with_row_count() (polars.dataframe method)": [[272, "polars.DataFrame.with_row_count"]], "__iter__() (polars.dataframe.group_by.groupby method)": [[273, "polars.dataframe.group_by.GroupBy.__iter__"]], "agg() (polars.dataframe.group_by.groupby method)": [[274, "polars.dataframe.group_by.GroupBy.agg"]], "all() (polars.dataframe.group_by.groupby method)": [[275, "polars.dataframe.group_by.GroupBy.all"]], "apply() (polars.dataframe.group_by.groupby method)": [[276, "polars.dataframe.group_by.GroupBy.apply"]], "count() (polars.dataframe.group_by.groupby method)": [[277, "polars.dataframe.group_by.GroupBy.count"]], "first() (polars.dataframe.group_by.groupby method)": [[278, "polars.dataframe.group_by.GroupBy.first"]], "head() (polars.dataframe.group_by.groupby method)": [[279, "polars.dataframe.group_by.GroupBy.head"]], "last() (polars.dataframe.group_by.groupby method)": [[280, "polars.dataframe.group_by.GroupBy.last"]], "map_groups() (polars.dataframe.group_by.groupby method)": [[281, "polars.dataframe.group_by.GroupBy.map_groups"]], "max() (polars.dataframe.group_by.groupby method)": [[282, "polars.dataframe.group_by.GroupBy.max"]], "mean() (polars.dataframe.group_by.groupby method)": [[283, "polars.dataframe.group_by.GroupBy.mean"]], "median() (polars.dataframe.group_by.groupby method)": [[284, "polars.dataframe.group_by.GroupBy.median"]], "min() (polars.dataframe.group_by.groupby method)": [[285, "polars.dataframe.group_by.GroupBy.min"]], "n_unique() (polars.dataframe.group_by.groupby method)": [[286, "polars.dataframe.group_by.GroupBy.n_unique"]], "quantile() (polars.dataframe.group_by.groupby method)": [[287, "polars.dataframe.group_by.GroupBy.quantile"]], "sum() (polars.dataframe.group_by.groupby method)": [[288, "polars.dataframe.group_by.GroupBy.sum"]], "tail() (polars.dataframe.group_by.groupby method)": [[289, "polars.dataframe.group_by.GroupBy.tail"]], "abs() (polars.expr method)": [[301, "polars.Expr.abs"]], "add() (polars.expr method)": [[302, "polars.Expr.add"]], "agg_groups() (polars.expr method)": [[303, "polars.Expr.agg_groups"]], "alias() (polars.expr method)": [[304, "polars.Expr.alias"]], "all() (polars.expr method)": [[305, "polars.Expr.all"]], "and_() (polars.expr method)": [[306, "polars.Expr.and_"]], "any() (polars.expr method)": [[307, "polars.Expr.any"]], "append() (polars.expr method)": [[308, "polars.Expr.append"]], "apply() (polars.expr method)": [[309, "polars.Expr.apply"]], "approx_n_unique() (polars.expr method)": [[310, "polars.Expr.approx_n_unique"]], "arccos() (polars.expr method)": [[311, "polars.Expr.arccos"]], "arccosh() (polars.expr method)": [[312, "polars.Expr.arccosh"]], "arcsin() (polars.expr method)": [[313, "polars.Expr.arcsin"]], "arcsinh() (polars.expr method)": [[314, "polars.Expr.arcsinh"]], "arctan() (polars.expr method)": [[315, "polars.Expr.arctan"]], "arctanh() (polars.expr method)": [[316, "polars.Expr.arctanh"]], "arg_max() (polars.expr method)": [[317, "polars.Expr.arg_max"]], "arg_min() (polars.expr method)": [[318, "polars.Expr.arg_min"]], "arg_sort() (polars.expr method)": [[319, "polars.Expr.arg_sort"]], "arg_true() (polars.expr method)": [[320, "polars.Expr.arg_true"]], "arg_unique() (polars.expr method)": [[321, "polars.Expr.arg_unique"]], "max() (polars.expr.arr method)": [[322, "polars.Expr.arr.max"]], "min() (polars.expr.arr method)": [[323, "polars.Expr.arr.min"]], "sum() (polars.expr.arr method)": [[324, "polars.Expr.arr.sum"]], "to_list() (polars.expr.arr method)": [[325, "polars.Expr.arr.to_list"]], "unique() (polars.expr.arr method)": [[326, "polars.Expr.arr.unique"]], "backward_fill() (polars.expr method)": [[327, "polars.Expr.backward_fill"]], "contains() (polars.expr.bin method)": [[328, "polars.Expr.bin.contains"]], "decode() (polars.expr.bin method)": [[329, "polars.Expr.bin.decode"]], "encode() (polars.expr.bin method)": [[330, "polars.Expr.bin.encode"]], "ends_with() (polars.expr.bin method)": [[331, "polars.Expr.bin.ends_with"]], "starts_with() (polars.expr.bin method)": [[332, "polars.Expr.bin.starts_with"]], "bottom_k() (polars.expr method)": [[333, "polars.Expr.bottom_k"]], "cast() (polars.expr method)": [[334, "polars.Expr.cast"]], "get_categories() (polars.expr.cat method)": [[335, "polars.Expr.cat.get_categories"]], "set_ordering() (polars.expr.cat method)": [[336, "polars.Expr.cat.set_ordering"]], "cbrt() (polars.expr method)": [[337, "polars.Expr.cbrt"]], "ceil() (polars.expr method)": [[338, "polars.Expr.ceil"]], "clip() (polars.expr method)": [[339, "polars.Expr.clip"]], "clip_max() (polars.expr method)": [[340, "polars.Expr.clip_max"]], "clip_min() (polars.expr method)": [[341, "polars.Expr.clip_min"]], "cos() (polars.expr method)": [[342, "polars.Expr.cos"]], "cosh() (polars.expr method)": [[343, "polars.Expr.cosh"]], "cot() (polars.expr method)": [[344, "polars.Expr.cot"]], "count() (polars.expr method)": [[345, "polars.Expr.count"]], "cum_count() (polars.expr method)": [[346, "polars.Expr.cum_count"]], "cum_max() (polars.expr method)": [[347, "polars.Expr.cum_max"]], "cum_min() (polars.expr method)": [[348, "polars.Expr.cum_min"]], "cum_prod() (polars.expr method)": [[349, "polars.Expr.cum_prod"]], "cum_sum() (polars.expr method)": [[350, "polars.Expr.cum_sum"]], "cumcount() (polars.expr method)": [[351, "polars.Expr.cumcount"]], "cummax() (polars.expr method)": [[352, "polars.Expr.cummax"]], "cummin() (polars.expr method)": [[353, "polars.Expr.cummin"]], "cumprod() (polars.expr method)": [[354, "polars.Expr.cumprod"]], "cumsum() (polars.expr method)": [[355, "polars.Expr.cumsum"]], "cumulative_eval() (polars.expr method)": [[356, "polars.Expr.cumulative_eval"]], "cut() (polars.expr method)": [[357, "polars.Expr.cut"]], "degrees() (polars.expr method)": [[358, "polars.Expr.degrees"]], "diff() (polars.expr method)": [[359, "polars.Expr.diff"]], "dot() (polars.expr method)": [[360, "polars.Expr.dot"]], "drop_nans() (polars.expr method)": [[361, "polars.Expr.drop_nans"]], "drop_nulls() (polars.expr method)": [[362, "polars.Expr.drop_nulls"]], "base_utc_offset() (polars.expr.dt method)": [[363, "polars.Expr.dt.base_utc_offset"]], "cast_time_unit() (polars.expr.dt method)": [[364, "polars.Expr.dt.cast_time_unit"]], "combine() (polars.expr.dt method)": [[365, "polars.Expr.dt.combine"]], "convert_time_zone() (polars.expr.dt method)": [[366, "polars.Expr.dt.convert_time_zone"]], "date() (polars.expr.dt method)": [[367, "polars.Expr.dt.date"]], "datetime() (polars.expr.dt method)": [[368, "polars.Expr.dt.datetime"]], "day() (polars.expr.dt method)": [[369, "polars.Expr.dt.day"]], "days() (polars.expr.dt method)": [[370, "polars.Expr.dt.days"]], "dst_offset() (polars.expr.dt method)": [[371, "polars.Expr.dt.dst_offset"]], "epoch() (polars.expr.dt method)": [[372, "polars.Expr.dt.epoch"]], "hour() (polars.expr.dt method)": [[373, "polars.Expr.dt.hour"]], "hours() (polars.expr.dt method)": [[374, "polars.Expr.dt.hours"]], "is_leap_year() (polars.expr.dt method)": [[375, "polars.Expr.dt.is_leap_year"]], "iso_year() (polars.expr.dt method)": [[376, "polars.Expr.dt.iso_year"]], "microsecond() (polars.expr.dt method)": [[377, "polars.Expr.dt.microsecond"]], "microseconds() (polars.expr.dt method)": [[378, "polars.Expr.dt.microseconds"]], "millisecond() (polars.expr.dt method)": [[379, "polars.Expr.dt.millisecond"]], "milliseconds() (polars.expr.dt method)": [[380, "polars.Expr.dt.milliseconds"]], "minute() (polars.expr.dt method)": [[381, "polars.Expr.dt.minute"]], "minutes() (polars.expr.dt method)": [[382, "polars.Expr.dt.minutes"]], "month() (polars.expr.dt method)": [[383, "polars.Expr.dt.month"]], "month_end() (polars.expr.dt method)": [[384, "polars.Expr.dt.month_end"]], "month_start() (polars.expr.dt method)": [[385, "polars.Expr.dt.month_start"]], "nanosecond() (polars.expr.dt method)": [[386, "polars.Expr.dt.nanosecond"]], "nanoseconds() (polars.expr.dt method)": [[387, "polars.Expr.dt.nanoseconds"]], "offset_by() (polars.expr.dt method)": [[388, "polars.Expr.dt.offset_by"]], "ordinal_day() (polars.expr.dt method)": [[389, "polars.Expr.dt.ordinal_day"]], "quarter() (polars.expr.dt method)": [[390, "polars.Expr.dt.quarter"]], "replace_time_zone() (polars.expr.dt method)": [[391, "polars.Expr.dt.replace_time_zone"]], "round() (polars.expr.dt method)": [[392, "polars.Expr.dt.round"]], "second() (polars.expr.dt method)": [[393, "polars.Expr.dt.second"]], "seconds() (polars.expr.dt method)": [[394, "polars.Expr.dt.seconds"]], "strftime() (polars.expr.dt method)": [[395, "polars.Expr.dt.strftime"]], "time() (polars.expr.dt method)": [[396, "polars.Expr.dt.time"]], "timestamp() (polars.expr.dt method)": [[397, "polars.Expr.dt.timestamp"]], "to_string() (polars.expr.dt method)": [[398, "polars.Expr.dt.to_string"]], "total_days() (polars.expr.dt method)": [[399, "polars.Expr.dt.total_days"]], "total_hours() (polars.expr.dt method)": [[400, "polars.Expr.dt.total_hours"]], "total_microseconds() (polars.expr.dt method)": [[401, "polars.Expr.dt.total_microseconds"]], "total_milliseconds() (polars.expr.dt method)": [[402, "polars.Expr.dt.total_milliseconds"]], "total_minutes() (polars.expr.dt method)": [[403, "polars.Expr.dt.total_minutes"]], "total_nanoseconds() (polars.expr.dt method)": [[404, "polars.Expr.dt.total_nanoseconds"]], "total_seconds() (polars.expr.dt method)": [[405, "polars.Expr.dt.total_seconds"]], "truncate() (polars.expr.dt method)": [[406, "polars.Expr.dt.truncate"]], "week() (polars.expr.dt method)": [[407, "polars.Expr.dt.week"]], "weekday() (polars.expr.dt method)": [[408, "polars.Expr.dt.weekday"]], "with_time_unit() (polars.expr.dt method)": [[409, "polars.Expr.dt.with_time_unit"]], "year() (polars.expr.dt method)": [[410, "polars.Expr.dt.year"]], "entropy() (polars.expr method)": [[411, "polars.Expr.entropy"]], "eq() (polars.expr method)": [[412, "polars.Expr.eq"]], "eq_missing() (polars.expr method)": [[413, "polars.Expr.eq_missing"]], "ewm_mean() (polars.expr method)": [[414, "polars.Expr.ewm_mean"]], "ewm_std() (polars.expr method)": [[415, "polars.Expr.ewm_std"]], "ewm_var() (polars.expr method)": [[416, "polars.Expr.ewm_var"]], "exclude() (polars.expr method)": [[417, "polars.Expr.exclude"]], "exp() (polars.expr method)": [[418, "polars.Expr.exp"]], "explode() (polars.expr method)": [[419, "polars.Expr.explode"]], "extend_constant() (polars.expr method)": [[420, "polars.Expr.extend_constant"]], "fill_nan() (polars.expr method)": [[421, "polars.Expr.fill_nan"]], "fill_null() (polars.expr method)": [[422, "polars.Expr.fill_null"]], "filter() (polars.expr method)": [[423, "polars.Expr.filter"]], "first() (polars.expr method)": [[424, "polars.Expr.first"]], "flatten() (polars.expr method)": [[425, "polars.Expr.flatten"]], "floor() (polars.expr method)": [[426, "polars.Expr.floor"]], "floordiv() (polars.expr method)": [[427, "polars.Expr.floordiv"]], "forward_fill() (polars.expr method)": [[428, "polars.Expr.forward_fill"]], "from_json() (polars.expr class method)": [[429, "polars.Expr.from_json"]], "gather() (polars.expr method)": [[430, "polars.Expr.gather"]], "gather_every() (polars.expr method)": [[431, "polars.Expr.gather_every"]], "ge() (polars.expr method)": [[432, "polars.Expr.ge"]], "get() (polars.expr method)": [[433, "polars.Expr.get"]], "gt() (polars.expr method)": [[434, "polars.Expr.gt"]], "hash() (polars.expr method)": [[435, "polars.Expr.hash"]], "head() (polars.expr method)": [[436, "polars.Expr.head"]], "hist() (polars.expr method)": [[437, "polars.Expr.hist"]], "implode() (polars.expr method)": [[438, "polars.Expr.implode"]], "inspect() (polars.expr method)": [[439, "polars.Expr.inspect"]], "interpolate() (polars.expr method)": [[440, "polars.Expr.interpolate"]], "is_between() (polars.expr method)": [[441, "polars.Expr.is_between"]], "is_duplicated() (polars.expr method)": [[442, "polars.Expr.is_duplicated"]], "is_finite() (polars.expr method)": [[443, "polars.Expr.is_finite"]], "is_first() (polars.expr method)": [[444, "polars.Expr.is_first"]], "is_first_distinct() (polars.expr method)": [[445, "polars.Expr.is_first_distinct"]], "is_in() (polars.expr method)": [[446, "polars.Expr.is_in"]], "is_infinite() (polars.expr method)": [[447, "polars.Expr.is_infinite"]], "is_last() (polars.expr method)": [[448, "polars.Expr.is_last"]], "is_last_distinct() (polars.expr method)": [[449, "polars.Expr.is_last_distinct"]], "is_nan() (polars.expr method)": [[450, "polars.Expr.is_nan"]], "is_not() (polars.expr method)": [[451, "polars.Expr.is_not"]], "is_not_nan() (polars.expr method)": [[452, "polars.Expr.is_not_nan"]], "is_not_null() (polars.expr method)": [[453, "polars.Expr.is_not_null"]], "is_null() (polars.expr method)": [[454, "polars.Expr.is_null"]], "is_unique() (polars.expr method)": [[455, "polars.Expr.is_unique"]], "keep_name() (polars.expr method)": [[456, "polars.Expr.keep_name"]], "kurtosis() (polars.expr method)": [[457, "polars.Expr.kurtosis"]], "last() (polars.expr method)": [[458, "polars.Expr.last"]], "le() (polars.expr method)": [[459, "polars.Expr.le"]], "len() (polars.expr method)": [[460, "polars.Expr.len"]], "limit() (polars.expr method)": [[461, "polars.Expr.limit"]], "all() (polars.expr.list method)": [[462, "polars.Expr.list.all"]], "any() (polars.expr.list method)": [[463, "polars.Expr.list.any"]], "arg_max() (polars.expr.list method)": [[464, "polars.Expr.list.arg_max"]], "arg_min() (polars.expr.list method)": [[465, "polars.Expr.list.arg_min"]], "concat() (polars.expr.list method)": [[466, "polars.Expr.list.concat"]], "contains() (polars.expr.list method)": [[467, "polars.Expr.list.contains"]], "count_match() (polars.expr.list method)": [[468, "polars.Expr.list.count_match"]], "count_matches() (polars.expr.list method)": [[469, "polars.Expr.list.count_matches"]], "diff() (polars.expr.list method)": [[470, "polars.Expr.list.diff"]], "drop_nulls() (polars.expr.list method)": [[471, "polars.Expr.list.drop_nulls"]], "eval() (polars.expr.list method)": [[472, "polars.Expr.list.eval"]], "explode() (polars.expr.list method)": [[473, "polars.Expr.list.explode"]], "first() (polars.expr.list method)": [[474, "polars.Expr.list.first"]], "gather() (polars.expr.list method)": [[475, "polars.Expr.list.gather"]], "get() (polars.expr.list method)": [[476, "polars.Expr.list.get"]], "head() (polars.expr.list method)": [[477, "polars.Expr.list.head"]], "join() (polars.expr.list method)": [[478, "polars.Expr.list.join"]], "last() (polars.expr.list method)": [[479, "polars.Expr.list.last"]], "len() (polars.expr.list method)": [[480, "polars.Expr.list.len"]], "lengths() (polars.expr.list method)": [[481, "polars.Expr.list.lengths"]], "max() (polars.expr.list method)": [[482, "polars.Expr.list.max"]], "mean() (polars.expr.list method)": [[483, "polars.Expr.list.mean"]], "min() (polars.expr.list method)": [[484, "polars.Expr.list.min"]], "reverse() (polars.expr.list method)": [[485, "polars.Expr.list.reverse"]], "sample() (polars.expr.list method)": [[486, "polars.Expr.list.sample"]], "set_difference() (polars.expr.list method)": [[487, "polars.Expr.list.set_difference"]], "set_intersection() (polars.expr.list method)": [[488, "polars.Expr.list.set_intersection"]], "set_symmetric_difference() (polars.expr.list method)": [[489, "polars.Expr.list.set_symmetric_difference"]], "set_union() (polars.expr.list method)": [[490, "polars.Expr.list.set_union"]], "shift() (polars.expr.list method)": [[491, "polars.Expr.list.shift"]], "slice() (polars.expr.list method)": [[492, "polars.Expr.list.slice"]], "sort() (polars.expr.list method)": [[493, "polars.Expr.list.sort"]], "sum() (polars.expr.list method)": [[494, "polars.Expr.list.sum"]], "tail() (polars.expr.list method)": [[495, "polars.Expr.list.tail"]], "take() (polars.expr.list method)": [[496, "polars.Expr.list.take"]], "to_array() (polars.expr.list method)": [[497, "polars.Expr.list.to_array"]], "to_struct() (polars.expr.list method)": [[498, "polars.Expr.list.to_struct"]], "unique() (polars.expr.list method)": [[499, "polars.Expr.list.unique"]], "log() (polars.expr method)": [[500, "polars.Expr.log"]], "log10() (polars.expr method)": [[501, "polars.Expr.log10"]], "log1p() (polars.expr method)": [[502, "polars.Expr.log1p"]], "lower_bound() (polars.expr method)": [[503, "polars.Expr.lower_bound"]], "lt() (polars.expr method)": [[504, "polars.Expr.lt"]], "map() (polars.expr method)": [[505, "polars.Expr.map"]], "map_alias() (polars.expr method)": [[506, "polars.Expr.map_alias"]], "map_batches() (polars.expr method)": [[507, "polars.Expr.map_batches"]], "map_dict() (polars.expr method)": [[508, "polars.Expr.map_dict"]], "map_elements() (polars.expr method)": [[509, "polars.Expr.map_elements"]], "max() (polars.expr method)": [[510, "polars.Expr.max"]], "mean() (polars.expr method)": [[511, "polars.Expr.mean"]], "median() (polars.expr method)": [[512, "polars.Expr.median"]], "eq() (polars.expr.meta method)": [[513, "polars.Expr.meta.eq"]], "has_multiple_outputs() (polars.expr.meta method)": [[514, "polars.Expr.meta.has_multiple_outputs"]], "is_regex_projection() (polars.expr.meta method)": [[515, "polars.Expr.meta.is_regex_projection"]], "ne() (polars.expr.meta method)": [[516, "polars.Expr.meta.ne"]], "output_name() (polars.expr.meta method)": [[517, "polars.Expr.meta.output_name"]], "pop() (polars.expr.meta method)": [[518, "polars.Expr.meta.pop"]], "root_names() (polars.expr.meta method)": [[519, "polars.Expr.meta.root_names"]], "tree_format() (polars.expr.meta method)": [[520, "polars.Expr.meta.tree_format"]], "undo_aliases() (polars.expr.meta method)": [[521, "polars.Expr.meta.undo_aliases"]], "write_json() (polars.expr.meta method)": [[522, "polars.Expr.meta.write_json"]], "min() (polars.expr method)": [[523, "polars.Expr.min"]], "mod() (polars.expr method)": [[524, "polars.Expr.mod"]], "mode() (polars.expr method)": [[525, "polars.Expr.mode"]], "mul() (polars.expr method)": [[526, "polars.Expr.mul"]], "n_unique() (polars.expr method)": [[527, "polars.Expr.n_unique"]], "keep() (polars.expr.name method)": [[528, "polars.Expr.name.keep"]], "map() (polars.expr.name method)": [[529, "polars.Expr.name.map"]], "prefix() (polars.expr.name method)": [[530, "polars.Expr.name.prefix"]], "suffix() (polars.expr.name method)": [[531, "polars.Expr.name.suffix"]], "to_lowercase() (polars.expr.name method)": [[532, "polars.Expr.name.to_lowercase"]], "to_uppercase() (polars.expr.name method)": [[533, "polars.Expr.name.to_uppercase"]], "nan_max() (polars.expr method)": [[534, "polars.Expr.nan_max"]], "nan_min() (polars.expr method)": [[535, "polars.Expr.nan_min"]], "ne() (polars.expr method)": [[536, "polars.Expr.ne"]], "ne_missing() (polars.expr method)": [[537, "polars.Expr.ne_missing"]], "not_() (polars.expr method)": [[538, "polars.Expr.not_"]], "null_count() (polars.expr method)": [[539, "polars.Expr.null_count"]], "or_() (polars.expr method)": [[540, "polars.Expr.or_"]], "over() (polars.expr method)": [[541, "polars.Expr.over"]], "pct_change() (polars.expr method)": [[542, "polars.Expr.pct_change"]], "peak_max() (polars.expr method)": [[543, "polars.Expr.peak_max"]], "peak_min() (polars.expr method)": [[544, "polars.Expr.peak_min"]], "pipe() (polars.expr method)": [[545, "polars.Expr.pipe"]], "pow() (polars.expr method)": [[546, "polars.Expr.pow"]], "prefix() (polars.expr method)": [[547, "polars.Expr.prefix"]], "product() (polars.expr method)": [[548, "polars.Expr.product"]], "qcut() (polars.expr method)": [[549, "polars.Expr.qcut"]], "quantile() (polars.expr method)": [[550, "polars.Expr.quantile"]], "radians() (polars.expr method)": [[551, "polars.Expr.radians"]], "rank() (polars.expr method)": [[552, "polars.Expr.rank"]], "rechunk() (polars.expr method)": [[553, "polars.Expr.rechunk"]], "reinterpret() (polars.expr method)": [[554, "polars.Expr.reinterpret"]], "repeat_by() (polars.expr method)": [[555, "polars.Expr.repeat_by"]], "replace() (polars.expr method)": [[556, "polars.Expr.replace"]], "reshape() (polars.expr method)": [[557, "polars.Expr.reshape"]], "reverse() (polars.expr method)": [[558, "polars.Expr.reverse"]], "rle() (polars.expr method)": [[559, "polars.Expr.rle"]], "rle_id() (polars.expr method)": [[560, "polars.Expr.rle_id"]], "rolling() (polars.expr method)": [[561, "polars.Expr.rolling"]], "rolling_apply() (polars.expr method)": [[562, "polars.Expr.rolling_apply"]], "rolling_map() (polars.expr method)": [[563, "polars.Expr.rolling_map"]], "rolling_max() (polars.expr method)": [[564, "polars.Expr.rolling_max"]], "rolling_mean() (polars.expr method)": [[565, "polars.Expr.rolling_mean"]], "rolling_median() (polars.expr method)": [[566, "polars.Expr.rolling_median"]], "rolling_min() (polars.expr method)": [[567, "polars.Expr.rolling_min"]], "rolling_quantile() (polars.expr method)": [[568, "polars.Expr.rolling_quantile"]], "rolling_skew() (polars.expr method)": [[569, "polars.Expr.rolling_skew"]], "rolling_std() (polars.expr method)": [[570, "polars.Expr.rolling_std"]], "rolling_sum() (polars.expr method)": [[571, "polars.Expr.rolling_sum"]], "rolling_var() (polars.expr method)": [[572, "polars.Expr.rolling_var"]], "round() (polars.expr method)": [[573, "polars.Expr.round"]], "round_sig_figs() (polars.expr method)": [[574, "polars.Expr.round_sig_figs"]], "sample() (polars.expr method)": [[575, "polars.Expr.sample"]], "search_sorted() (polars.expr method)": [[576, "polars.Expr.search_sorted"]], "set_sorted() (polars.expr method)": [[577, "polars.Expr.set_sorted"]], "shift() (polars.expr method)": [[578, "polars.Expr.shift"]], "shift_and_fill() (polars.expr method)": [[579, "polars.Expr.shift_and_fill"]], "shrink_dtype() (polars.expr method)": [[580, "polars.Expr.shrink_dtype"]], "shuffle() (polars.expr method)": [[581, "polars.Expr.shuffle"]], "sign() (polars.expr method)": [[582, "polars.Expr.sign"]], "sin() (polars.expr method)": [[583, "polars.Expr.sin"]], "sinh() (polars.expr method)": [[584, "polars.Expr.sinh"]], "skew() (polars.expr method)": [[585, "polars.Expr.skew"]], "slice() (polars.expr method)": [[586, "polars.Expr.slice"]], "sort() (polars.expr method)": [[587, "polars.Expr.sort"]], "sort_by() (polars.expr method)": [[588, "polars.Expr.sort_by"]], "sqrt() (polars.expr method)": [[589, "polars.Expr.sqrt"]], "std() (polars.expr method)": [[590, "polars.Expr.std"]], "concat() (polars.expr.str method)": [[591, "polars.Expr.str.concat"]], "contains() (polars.expr.str method)": [[592, "polars.Expr.str.contains"]], "contains_any() (polars.expr.str method)": [[593, "polars.Expr.str.contains_any"]], "count_match() (polars.expr.str method)": [[594, "polars.Expr.str.count_match"]], "count_matches() (polars.expr.str method)": [[595, "polars.Expr.str.count_matches"]], "decode() (polars.expr.str method)": [[596, "polars.Expr.str.decode"]], "encode() (polars.expr.str method)": [[597, "polars.Expr.str.encode"]], "ends_with() (polars.expr.str method)": [[598, "polars.Expr.str.ends_with"]], "explode() (polars.expr.str method)": [[599, "polars.Expr.str.explode"]], "extract() (polars.expr.str method)": [[600, "polars.Expr.str.extract"]], "extract_all() (polars.expr.str method)": [[601, "polars.Expr.str.extract_all"]], "extract_groups() (polars.expr.str method)": [[602, "polars.Expr.str.extract_groups"]], "json_decode() (polars.expr.str method)": [[603, "polars.Expr.str.json_decode"]], "json_extract() (polars.expr.str method)": [[604, "polars.Expr.str.json_extract"]], "json_path_match() (polars.expr.str method)": [[605, "polars.Expr.str.json_path_match"]], "len_bytes() (polars.expr.str method)": [[606, "polars.Expr.str.len_bytes"]], "len_chars() (polars.expr.str method)": [[607, "polars.Expr.str.len_chars"]], "lengths() (polars.expr.str method)": [[608, "polars.Expr.str.lengths"]], "ljust() (polars.expr.str method)": [[609, "polars.Expr.str.ljust"]], "lstrip() (polars.expr.str method)": [[610, "polars.Expr.str.lstrip"]], "n_chars() (polars.expr.str method)": [[611, "polars.Expr.str.n_chars"]], "pad_end() (polars.expr.str method)": [[612, "polars.Expr.str.pad_end"]], "pad_start() (polars.expr.str method)": [[613, "polars.Expr.str.pad_start"]], "parse_int() (polars.expr.str method)": [[614, "polars.Expr.str.parse_int"]], "replace() (polars.expr.str method)": [[615, "polars.Expr.str.replace"]], "replace_all() (polars.expr.str method)": [[616, "polars.Expr.str.replace_all"]], "replace_many() (polars.expr.str method)": [[617, "polars.Expr.str.replace_many"]], "reverse() (polars.expr.str method)": [[618, "polars.Expr.str.reverse"]], "rjust() (polars.expr.str method)": [[619, "polars.Expr.str.rjust"]], "rstrip() (polars.expr.str method)": [[620, "polars.Expr.str.rstrip"]], "slice() (polars.expr.str method)": [[621, "polars.Expr.str.slice"]], "split() (polars.expr.str method)": [[622, "polars.Expr.str.split"]], "split_exact() (polars.expr.str method)": [[623, "polars.Expr.str.split_exact"]], "splitn() (polars.expr.str method)": [[624, "polars.Expr.str.splitn"]], "starts_with() (polars.expr.str method)": [[625, "polars.Expr.str.starts_with"]], "strip() (polars.expr.str method)": [[626, "polars.Expr.str.strip"]], "strip_chars() (polars.expr.str method)": [[627, "polars.Expr.str.strip_chars"]], "strip_chars_end() (polars.expr.str method)": [[628, "polars.Expr.str.strip_chars_end"]], "strip_chars_start() (polars.expr.str method)": [[629, "polars.Expr.str.strip_chars_start"]], "strip_prefix() (polars.expr.str method)": [[630, "polars.Expr.str.strip_prefix"]], "strip_suffix() (polars.expr.str method)": [[631, "polars.Expr.str.strip_suffix"]], "strptime() (polars.expr.str method)": [[632, "polars.Expr.str.strptime"]], "to_date() (polars.expr.str method)": [[633, "polars.Expr.str.to_date"]], "to_datetime() (polars.expr.str method)": [[634, "polars.Expr.str.to_datetime"]], "to_decimal() (polars.expr.str method)": [[635, "polars.Expr.str.to_decimal"]], "to_integer() (polars.expr.str method)": [[636, "polars.Expr.str.to_integer"]], "to_lowercase() (polars.expr.str method)": [[637, "polars.Expr.str.to_lowercase"]], "to_time() (polars.expr.str method)": [[638, "polars.Expr.str.to_time"]], "to_titlecase() (polars.expr.str method)": [[639, "polars.Expr.str.to_titlecase"]], "to_uppercase() (polars.expr.str method)": [[640, "polars.Expr.str.to_uppercase"]], "zfill() (polars.expr.str method)": [[641, "polars.Expr.str.zfill"]], "field() (polars.expr.struct method)": [[642, "polars.Expr.struct.field"]], "json_encode() (polars.expr.struct method)": [[643, "polars.Expr.struct.json_encode"]], "rename_fields() (polars.expr.struct method)": [[644, "polars.Expr.struct.rename_fields"]], "sub() (polars.expr method)": [[645, "polars.Expr.sub"]], "suffix() (polars.expr method)": [[646, "polars.Expr.suffix"]], "sum() (polars.expr method)": [[647, "polars.Expr.sum"]], "tail() (polars.expr method)": [[648, "polars.Expr.tail"]], "take() (polars.expr method)": [[649, "polars.Expr.take"]], "take_every() (polars.expr method)": [[650, "polars.Expr.take_every"]], "tan() (polars.expr method)": [[651, "polars.Expr.tan"]], "tanh() (polars.expr method)": [[652, "polars.Expr.tanh"]], "to_physical() (polars.expr method)": [[653, "polars.Expr.to_physical"]], "top_k() (polars.expr method)": [[654, "polars.Expr.top_k"]], "truediv() (polars.expr method)": [[655, "polars.Expr.truediv"]], "unique() (polars.expr method)": [[656, "polars.Expr.unique"]], "unique_counts() (polars.expr method)": [[657, "polars.Expr.unique_counts"]], "upper_bound() (polars.expr method)": [[658, "polars.Expr.upper_bound"]], "value_counts() (polars.expr method)": [[659, "polars.Expr.value_counts"]], "var() (polars.expr method)": [[660, "polars.Expr.var"]], "where() (polars.expr method)": [[661, "polars.Expr.where"]], "xor() (polars.expr method)": [[662, "polars.Expr.xor"]], "all() (in module polars)": [[663, "polars.all"]], "all_horizontal() (in module polars)": [[664, "polars.all_horizontal"]], "any() (in module polars)": [[665, "polars.any"]], "any_horizontal() (in module polars)": [[666, "polars.any_horizontal"]], "apply() (in module polars)": [[667, "polars.apply"]], "approx_n_unique() (in module polars)": [[668, "polars.approx_n_unique"]], "arange() (in module polars)": [[669, "polars.arange"]], "arctan2() (in module polars)": [[670, "polars.arctan2"]], "arctan2d() (in module polars)": [[671, "polars.arctan2d"]], "arg_sort_by() (in module polars)": [[672, "polars.arg_sort_by"]], "arg_where() (in module polars)": [[673, "polars.arg_where"]], "coalesce() (in module polars)": [[674, "polars.coalesce"]], "concat_list() (in module polars)": [[675, "polars.concat_list"]], "concat_str() (in module polars)": [[676, "polars.concat_str"]], "corr() (in module polars)": [[677, "polars.corr"]], "count() (in module polars)": [[678, "polars.count"]], "cov() (in module polars)": [[679, "polars.cov"]], "cum_fold() (in module polars)": [[680, "polars.cum_fold"]], "cum_reduce() (in module polars)": [[681, "polars.cum_reduce"]], "cum_sum() (in module polars)": [[682, "polars.cum_sum"]], "cum_sum_horizontal() (in module polars)": [[683, "polars.cum_sum_horizontal"]], "cumfold() (in module polars)": [[684, "polars.cumfold"]], "cumreduce() (in module polars)": [[685, "polars.cumreduce"]], "cumsum() (in module polars)": [[686, "polars.cumsum"]], "cumsum_horizontal() (in module polars)": [[687, "polars.cumsum_horizontal"]], "date() (in module polars)": [[688, "polars.date"]], "date_range() (in module polars)": [[689, "polars.date_range"]], "date_ranges() (in module polars)": [[690, "polars.date_ranges"]], "datetime() (in module polars)": [[691, "polars.datetime"]], "datetime_range() (in module polars)": [[692, "polars.datetime_range"]], "datetime_ranges() (in module polars)": [[693, "polars.datetime_ranges"]], "duration() (in module polars)": [[694, "polars.duration"]], "element() (in module polars)": [[695, "polars.element"]], "exclude() (in module polars)": [[696, "polars.exclude"]], "first() (in module polars)": [[697, "polars.first"]], "fold() (in module polars)": [[698, "polars.fold"]], "format() (in module polars)": [[699, "polars.format"]], "from_epoch() (in module polars)": [[700, "polars.from_epoch"]], "groups() (in module polars)": [[701, "polars.groups"]], "head() (in module polars)": [[702, "polars.head"]], "implode() (in module polars)": [[703, "polars.implode"]], "int_range() (in module polars)": [[704, "polars.int_range"]], "int_ranges() (in module polars)": [[705, "polars.int_ranges"]], "last() (in module polars)": [[706, "polars.last"]], "lit() (in module polars)": [[707, "polars.lit"]], "map() (in module polars)": [[708, "polars.map"]], "map_batches() (in module polars)": [[709, "polars.map_batches"]], "map_groups() (in module polars)": [[710, "polars.map_groups"]], "max() (in module polars)": [[711, "polars.max"]], "max_horizontal() (in module polars)": [[712, "polars.max_horizontal"]], "mean() (in module polars)": [[713, "polars.mean"]], "median() (in module polars)": [[714, "polars.median"]], "min() (in module polars)": [[715, "polars.min"]], "min_horizontal() (in module polars)": [[716, "polars.min_horizontal"]], "n_unique() (in module polars)": [[717, "polars.n_unique"]], "ones() (in module polars)": [[718, "polars.ones"]], "quantile() (in module polars)": [[719, "polars.quantile"]], "reduce() (in module polars)": [[720, "polars.reduce"]], "repeat() (in module polars)": [[721, "polars.repeat"]], "rolling_corr() (in module polars)": [[722, "polars.rolling_corr"]], "rolling_cov() (in module polars)": [[723, "polars.rolling_cov"]], "select() (in module polars)": [[724, "polars.select"]], "sql_expr() (in module polars)": [[725, "polars.sql_expr"]], "std() (in module polars)": [[726, "polars.std"]], "struct() (in module polars)": [[727, "polars.struct"]], "sum() (in module polars)": [[728, "polars.sum"]], "sum_horizontal() (in module polars)": [[729, "polars.sum_horizontal"]], "tail() (in module polars)": [[730, "polars.tail"]], "time() (in module polars)": [[731, "polars.time"]], "time_range() (in module polars)": [[732, "polars.time_range"]], "time_ranges() (in module polars)": [[733, "polars.time_ranges"]], "var() (in module polars)": [[734, "polars.var"]], "when() (in module polars)": [[735, "polars.when"]], "zeros() (in module polars)": [[736, "polars.zeros"]], "approx_n_unique() (polars.lazyframe method)": [[760, "polars.LazyFrame.approx_n_unique"]], "bottom_k() (polars.lazyframe method)": [[761, "polars.LazyFrame.bottom_k"]], "cache() (polars.lazyframe method)": [[762, "polars.LazyFrame.cache"]], "cast() (polars.lazyframe method)": [[763, "polars.LazyFrame.cast"]], "clear() (polars.lazyframe method)": [[764, "polars.LazyFrame.clear"]], "clone() (polars.lazyframe method)": [[765, "polars.LazyFrame.clone"]], "collect() (polars.lazyframe method)": [[766, "polars.LazyFrame.collect"]], "collect_async() (polars.lazyframe method)": [[767, "polars.LazyFrame.collect_async"]], "columns (polars.lazyframe property)": [[768, "polars.LazyFrame.columns"]], "deserialize() (polars.lazyframe class method)": [[769, "polars.LazyFrame.deserialize"]], "drop() (polars.lazyframe method)": [[770, "polars.LazyFrame.drop"]], "drop_nulls() (polars.lazyframe method)": [[771, "polars.LazyFrame.drop_nulls"]], "dtypes (polars.lazyframe property)": [[772, "polars.LazyFrame.dtypes"]], "explain() (polars.lazyframe method)": [[773, "polars.LazyFrame.explain"]], "explode() (polars.lazyframe method)": [[774, "polars.LazyFrame.explode"]], "fetch() (polars.lazyframe method)": [[775, "polars.LazyFrame.fetch"]], "fill_nan() (polars.lazyframe method)": [[776, "polars.LazyFrame.fill_nan"]], "fill_null() (polars.lazyframe method)": [[777, "polars.LazyFrame.fill_null"]], "filter() (polars.lazyframe method)": [[778, "polars.LazyFrame.filter"]], "first() (polars.lazyframe method)": [[779, "polars.LazyFrame.first"]], "gather_every() (polars.lazyframe method)": [[780, "polars.LazyFrame.gather_every"]], "group_by() (polars.lazyframe method)": [[781, "polars.LazyFrame.group_by"]], "group_by_dynamic() (polars.lazyframe method)": [[782, "polars.LazyFrame.group_by_dynamic"]], "group_by_rolling() (polars.lazyframe method)": [[783, "polars.LazyFrame.group_by_rolling"]], "groupby() (polars.lazyframe method)": [[784, "polars.LazyFrame.groupby"]], "groupby_dynamic() (polars.lazyframe method)": [[785, "polars.LazyFrame.groupby_dynamic"]], "groupby_rolling() (polars.lazyframe method)": [[786, "polars.LazyFrame.groupby_rolling"]], "head() (polars.lazyframe method)": [[787, "polars.LazyFrame.head"]], "inspect() (polars.lazyframe method)": [[788, "polars.LazyFrame.inspect"]], "interpolate() (polars.lazyframe method)": [[789, "polars.LazyFrame.interpolate"]], "join() (polars.lazyframe method)": [[790, "polars.LazyFrame.join"]], "join_asof() (polars.lazyframe method)": [[791, "polars.LazyFrame.join_asof"]], "last() (polars.lazyframe method)": [[792, "polars.LazyFrame.last"]], "lazy() (polars.lazyframe method)": [[793, "polars.LazyFrame.lazy"]], "limit() (polars.lazyframe method)": [[794, "polars.LazyFrame.limit"]], "map() (polars.lazyframe method)": [[795, "polars.LazyFrame.map"]], "map_batches() (polars.lazyframe method)": [[796, "polars.LazyFrame.map_batches"]], "max() (polars.lazyframe method)": [[797, "polars.LazyFrame.max"]], "mean() (polars.lazyframe method)": [[798, "polars.LazyFrame.mean"]], "median() (polars.lazyframe method)": [[799, "polars.LazyFrame.median"]], "melt() (polars.lazyframe method)": [[800, "polars.LazyFrame.melt"]], "merge_sorted() (polars.lazyframe method)": [[801, "polars.LazyFrame.merge_sorted"]], "min() (polars.lazyframe method)": [[802, "polars.LazyFrame.min"]], "null_count() (polars.lazyframe method)": [[803, "polars.LazyFrame.null_count"]], "pipe() (polars.lazyframe method)": [[804, "polars.LazyFrame.pipe"]], "profile() (polars.lazyframe method)": [[805, "polars.LazyFrame.profile"]], "quantile() (polars.lazyframe method)": [[806, "polars.LazyFrame.quantile"]], "rename() (polars.lazyframe method)": [[807, "polars.LazyFrame.rename"]], "reverse() (polars.lazyframe method)": [[808, "polars.LazyFrame.reverse"]], "rolling() (polars.lazyframe method)": [[809, "polars.LazyFrame.rolling"]], "schema (polars.lazyframe property)": [[810, "polars.LazyFrame.schema"]], "select() (polars.lazyframe method)": [[811, "polars.LazyFrame.select"]], "select_seq() (polars.lazyframe method)": [[812, "polars.LazyFrame.select_seq"]], "serialize() (polars.lazyframe method)": [[813, "polars.LazyFrame.serialize"]], "set_sorted() (polars.lazyframe method)": [[814, "polars.LazyFrame.set_sorted"]], "shift() (polars.lazyframe method)": [[815, "polars.LazyFrame.shift"]], "shift_and_fill() (polars.lazyframe method)": [[816, "polars.LazyFrame.shift_and_fill"]], "show_graph() (polars.lazyframe method)": [[817, "polars.LazyFrame.show_graph"]], "slice() (polars.lazyframe method)": [[818, "polars.LazyFrame.slice"]], "sort() (polars.lazyframe method)": [[819, "polars.LazyFrame.sort"]], "std() (polars.lazyframe method)": [[820, "polars.LazyFrame.std"]], "sum() (polars.lazyframe method)": [[821, "polars.LazyFrame.sum"]], "tail() (polars.lazyframe method)": [[822, "polars.LazyFrame.tail"]], "take_every() (polars.lazyframe method)": [[823, "polars.LazyFrame.take_every"]], "top_k() (polars.lazyframe method)": [[824, "polars.LazyFrame.top_k"]], "unique() (polars.lazyframe method)": [[825, "polars.LazyFrame.unique"]], "unnest() (polars.lazyframe method)": [[826, "polars.LazyFrame.unnest"]], "update() (polars.lazyframe method)": [[827, "polars.LazyFrame.update"]], "var() (polars.lazyframe method)": [[828, "polars.LazyFrame.var"]], "width (polars.lazyframe property)": [[829, "polars.LazyFrame.width"]], "with_columns() (polars.lazyframe method)": [[830, "polars.LazyFrame.with_columns"]], "with_columns_seq() (polars.lazyframe method)": [[831, "polars.LazyFrame.with_columns_seq"]], "with_context() (polars.lazyframe method)": [[832, "polars.LazyFrame.with_context"]], "with_row_count() (polars.lazyframe method)": [[833, "polars.LazyFrame.with_row_count"]], "agg() (polars.lazyframe.group_by.lazygroupby method)": [[834, "polars.lazyframe.group_by.LazyGroupBy.agg"]], "all() (polars.lazyframe.group_by.lazygroupby method)": [[835, "polars.lazyframe.group_by.LazyGroupBy.all"]], "apply() (polars.lazyframe.group_by.lazygroupby method)": [[836, "polars.lazyframe.group_by.LazyGroupBy.apply"]], "count() (polars.lazyframe.group_by.lazygroupby method)": [[837, "polars.lazyframe.group_by.LazyGroupBy.count"]], "first() (polars.lazyframe.group_by.lazygroupby method)": [[838, "polars.lazyframe.group_by.LazyGroupBy.first"]], "head() (polars.lazyframe.group_by.lazygroupby method)": [[839, "polars.lazyframe.group_by.LazyGroupBy.head"]], "last() (polars.lazyframe.group_by.lazygroupby method)": [[840, "polars.lazyframe.group_by.LazyGroupBy.last"]], "map_groups() (polars.lazyframe.group_by.lazygroupby method)": [[841, "polars.lazyframe.group_by.LazyGroupBy.map_groups"]], "max() (polars.lazyframe.group_by.lazygroupby method)": [[842, "polars.lazyframe.group_by.LazyGroupBy.max"]], "mean() (polars.lazyframe.group_by.lazygroupby method)": [[843, "polars.lazyframe.group_by.LazyGroupBy.mean"]], "median() (polars.lazyframe.group_by.lazygroupby method)": [[844, "polars.lazyframe.group_by.LazyGroupBy.median"]], "min() (polars.lazyframe.group_by.lazygroupby method)": [[845, "polars.lazyframe.group_by.LazyGroupBy.min"]], "n_unique() (polars.lazyframe.group_by.lazygroupby method)": [[846, "polars.lazyframe.group_by.LazyGroupBy.n_unique"]], "quantile() (polars.lazyframe.group_by.lazygroupby method)": [[847, "polars.lazyframe.group_by.LazyGroupBy.quantile"]], "sum() (polars.lazyframe.group_by.lazygroupby method)": [[848, "polars.lazyframe.group_by.LazyGroupBy.sum"]], "tail() (polars.lazyframe.group_by.lazygroupby method)": [[849, "polars.lazyframe.group_by.LazyGroupBy.tail"]], "all() (in module polars.selectors)": [[856, "polars.selectors.all"]], "by_dtype() (in module polars.selectors)": [[856, "polars.selectors.by_dtype"]], "by_name() (in module polars.selectors)": [[856, "polars.selectors.by_name"]], "categorical() (in module polars.selectors)": [[856, "polars.selectors.categorical"]], "contains() (in module polars.selectors)": [[856, "polars.selectors.contains"]], "date() (in module polars.selectors)": [[856, "polars.selectors.date"]], "datetime() (in module polars.selectors)": [[856, "polars.selectors.datetime"]], "duration() (in module polars.selectors)": [[856, "polars.selectors.duration"]], "ends_with() (in module polars.selectors)": [[856, "polars.selectors.ends_with"]], "expand_selector() (in module polars.selectors)": [[856, "polars.selectors.expand_selector"]], "first() (in module polars.selectors)": [[856, "polars.selectors.first"]], "float() (in module polars.selectors)": [[856, "polars.selectors.float"]], "integer() (in module polars.selectors)": [[856, "polars.selectors.integer"]], "is_selector() (in module polars.selectors)": [[856, "polars.selectors.is_selector"]], "last() (in module polars.selectors)": [[856, "polars.selectors.last"]], "matches() (in module polars.selectors)": [[856, "polars.selectors.matches"]], "module": [[856, "module-polars.selectors"]], "numeric() (in module polars.selectors)": [[856, "polars.selectors.numeric"]], "polars.selectors": [[856, "module-polars.selectors"]], "starts_with() (in module polars.selectors)": [[856, "polars.selectors.starts_with"]], "string() (in module polars.selectors)": [[856, "polars.selectors.string"]], "temporal() (in module polars.selectors)": [[856, "polars.selectors.temporal"]], "time() (in module polars.selectors)": [[856, "polars.selectors.time"]], "abs() (polars.series method)": [[858, "polars.Series.abs"]], "alias() (polars.series method)": [[859, "polars.Series.alias"]], "all() (polars.series method)": [[860, "polars.Series.all"]], "any() (polars.series method)": [[861, "polars.Series.any"]], "append() (polars.series method)": [[862, "polars.Series.append"]], "apply() (polars.series method)": [[863, "polars.Series.apply"]], "arccos() (polars.series method)": [[864, "polars.Series.arccos"]], "arccosh() (polars.series method)": [[865, "polars.Series.arccosh"]], "arcsin() (polars.series method)": [[866, "polars.Series.arcsin"]], "arcsinh() (polars.series method)": [[867, "polars.Series.arcsinh"]], "arctan() (polars.series method)": [[868, "polars.Series.arctan"]], "arctanh() (polars.series method)": [[869, "polars.Series.arctanh"]], "arg_max() (polars.series method)": [[870, "polars.Series.arg_max"]], "arg_min() (polars.series method)": [[871, "polars.Series.arg_min"]], "arg_sort() (polars.series method)": [[872, "polars.Series.arg_sort"]], "arg_true() (polars.series method)": [[873, "polars.Series.arg_true"]], "arg_unique() (polars.series method)": [[874, "polars.Series.arg_unique"]], "max() (polars.series.arr method)": [[875, "polars.Series.arr.max"]], "min() (polars.series.arr method)": [[876, "polars.Series.arr.min"]], "sum() (polars.series.arr method)": [[877, "polars.Series.arr.sum"]], "to_list() (polars.series.arr method)": [[878, "polars.Series.arr.to_list"]], "unique() (polars.series.arr method)": [[879, "polars.Series.arr.unique"]], "contains() (polars.series.bin method)": [[880, "polars.Series.bin.contains"]], "decode() (polars.series.bin method)": [[881, "polars.Series.bin.decode"]], "encode() (polars.series.bin method)": [[882, "polars.Series.bin.encode"]], "ends_with() (polars.series.bin method)": [[883, "polars.Series.bin.ends_with"]], "starts_with() (polars.series.bin method)": [[884, "polars.Series.bin.starts_with"]], "bottom_k() (polars.series method)": [[885, "polars.Series.bottom_k"]], "cast() (polars.series method)": [[886, "polars.Series.cast"]], "cat (polars.series attribute)": [[887, "polars.Series.cat"]], "get_categories() (polars.series.cat method)": [[888, "polars.Series.cat.get_categories"]], "is_local() (polars.series.cat method)": [[889, "polars.Series.cat.is_local"]], "set_ordering() (polars.series.cat method)": [[890, "polars.Series.cat.set_ordering"]], "to_local() (polars.series.cat method)": [[891, "polars.Series.cat.to_local"]], "uses_lexical_ordering() (polars.series.cat method)": [[892, "polars.Series.cat.uses_lexical_ordering"]], "cbrt() (polars.series method)": [[893, "polars.Series.cbrt"]], "ceil() (polars.series method)": [[894, "polars.Series.ceil"]], "chunk_lengths() (polars.series method)": [[895, "polars.Series.chunk_lengths"]], "clear() (polars.series method)": [[896, "polars.Series.clear"]], "clip() (polars.series method)": [[897, "polars.Series.clip"]], "clip_max() (polars.series method)": [[898, "polars.Series.clip_max"]], "clip_min() (polars.series method)": [[899, "polars.Series.clip_min"]], "clone() (polars.series method)": [[900, "polars.Series.clone"]], "cos() (polars.series method)": [[901, "polars.Series.cos"]], "cosh() (polars.series method)": [[902, "polars.Series.cosh"]], "cot() (polars.series method)": [[903, "polars.Series.cot"]], "cum_max() (polars.series method)": [[904, "polars.Series.cum_max"]], "cum_min() (polars.series method)": [[905, "polars.Series.cum_min"]], "cum_prod() (polars.series method)": [[906, "polars.Series.cum_prod"]], "cum_sum() (polars.series method)": [[907, "polars.Series.cum_sum"]], "cummax() (polars.series method)": [[908, "polars.Series.cummax"]], "cummin() (polars.series method)": [[909, "polars.Series.cummin"]], "cumprod() (polars.series method)": [[910, "polars.Series.cumprod"]], "cumsum() (polars.series method)": [[911, "polars.Series.cumsum"]], "cumulative_eval() (polars.series method)": [[912, "polars.Series.cumulative_eval"]], "cut() (polars.series method)": [[913, "polars.Series.cut"]], "describe() (polars.series method)": [[914, "polars.Series.describe"]], "diff() (polars.series method)": [[915, "polars.Series.diff"]], "dot() (polars.series method)": [[916, "polars.Series.dot"]], "drop_nans() (polars.series method)": [[917, "polars.Series.drop_nans"]], "drop_nulls() (polars.series method)": [[918, "polars.Series.drop_nulls"]], "dt (polars.series attribute)": [[919, "polars.Series.dt"]], "base_utc_offset() (polars.series.dt method)": [[920, "polars.Series.dt.base_utc_offset"]], "cast_time_unit() (polars.series.dt method)": [[921, "polars.Series.dt.cast_time_unit"]], "combine() (polars.series.dt method)": [[922, "polars.Series.dt.combine"]], "convert_time_zone() (polars.series.dt method)": [[923, "polars.Series.dt.convert_time_zone"]], "date() (polars.series.dt method)": [[924, "polars.Series.dt.date"]], "datetime() (polars.series.dt method)": [[925, "polars.Series.dt.datetime"]], "day() (polars.series.dt method)": [[926, "polars.Series.dt.day"]], "days() (polars.series.dt method)": [[927, "polars.Series.dt.days"]], "dst_offset() (polars.series.dt method)": [[928, "polars.Series.dt.dst_offset"]], "epoch() (polars.series.dt method)": [[929, "polars.Series.dt.epoch"]], "hour() (polars.series.dt method)": [[930, "polars.Series.dt.hour"]], "hours() (polars.series.dt method)": [[931, "polars.Series.dt.hours"]], "is_leap_year() (polars.series.dt method)": [[932, "polars.Series.dt.is_leap_year"]], "iso_year() (polars.series.dt method)": [[933, "polars.Series.dt.iso_year"]], "max() (polars.series.dt method)": [[934, "polars.Series.dt.max"]], "mean() (polars.series.dt method)": [[935, "polars.Series.dt.mean"]], "median() (polars.series.dt method)": [[936, "polars.Series.dt.median"]], "microsecond() (polars.series.dt method)": [[937, "polars.Series.dt.microsecond"]], "microseconds() (polars.series.dt method)": [[938, "polars.Series.dt.microseconds"]], "millisecond() (polars.series.dt method)": [[939, "polars.Series.dt.millisecond"]], "milliseconds() (polars.series.dt method)": [[940, "polars.Series.dt.milliseconds"]], "min() (polars.series.dt method)": [[941, "polars.Series.dt.min"]], "minute() (polars.series.dt method)": [[942, "polars.Series.dt.minute"]], "minutes() (polars.series.dt method)": [[943, "polars.Series.dt.minutes"]], "month() (polars.series.dt method)": [[944, "polars.Series.dt.month"]], "month_end() (polars.series.dt method)": [[945, "polars.Series.dt.month_end"]], "month_start() (polars.series.dt method)": [[946, "polars.Series.dt.month_start"]], "nanosecond() (polars.series.dt method)": [[947, "polars.Series.dt.nanosecond"]], "nanoseconds() (polars.series.dt method)": [[948, "polars.Series.dt.nanoseconds"]], "offset_by() (polars.series.dt method)": [[949, "polars.Series.dt.offset_by"]], "ordinal_day() (polars.series.dt method)": [[950, "polars.Series.dt.ordinal_day"]], "quarter() (polars.series.dt method)": [[951, "polars.Series.dt.quarter"]], "replace_time_zone() (polars.series.dt method)": [[952, "polars.Series.dt.replace_time_zone"]], "round() (polars.series.dt method)": [[953, "polars.Series.dt.round"]], "second() (polars.series.dt method)": [[954, "polars.Series.dt.second"]], "seconds() (polars.series.dt method)": [[955, "polars.Series.dt.seconds"]], "strftime() (polars.series.dt method)": [[956, "polars.Series.dt.strftime"]], "time() (polars.series.dt method)": [[957, "polars.Series.dt.time"]], "timestamp() (polars.series.dt method)": [[958, "polars.Series.dt.timestamp"]], "to_string() (polars.series.dt method)": [[959, "polars.Series.dt.to_string"]], "total_days() (polars.series.dt method)": [[960, "polars.Series.dt.total_days"]], "total_hours() (polars.series.dt method)": [[961, "polars.Series.dt.total_hours"]], "total_microseconds() (polars.series.dt method)": [[962, "polars.Series.dt.total_microseconds"]], "total_milliseconds() (polars.series.dt method)": [[963, "polars.Series.dt.total_milliseconds"]], "total_minutes() (polars.series.dt method)": [[964, "polars.Series.dt.total_minutes"]], "total_nanoseconds() (polars.series.dt method)": [[965, "polars.Series.dt.total_nanoseconds"]], "total_seconds() (polars.series.dt method)": [[966, "polars.Series.dt.total_seconds"]], "truncate() (polars.series.dt method)": [[967, "polars.Series.dt.truncate"]], "week() (polars.series.dt method)": [[968, "polars.Series.dt.week"]], "weekday() (polars.series.dt method)": [[969, "polars.Series.dt.weekday"]], "with_time_unit() (polars.series.dt method)": [[970, "polars.Series.dt.with_time_unit"]], "year() (polars.series.dt method)": [[971, "polars.Series.dt.year"]], "dtype (polars.series attribute)": [[972, "polars.Series.dtype"]], "entropy() (polars.series method)": [[973, "polars.Series.entropy"]], "equals() (polars.series method)": [[974, "polars.Series.equals"]], "estimated_size() (polars.series method)": [[975, "polars.Series.estimated_size"]], "ewm_mean() (polars.series method)": [[976, "polars.Series.ewm_mean"]], "ewm_std() (polars.series method)": [[977, "polars.Series.ewm_std"]], "ewm_var() (polars.series method)": [[978, "polars.Series.ewm_var"]], "exp() (polars.series method)": [[979, "polars.Series.exp"]], "explode() (polars.series method)": [[980, "polars.Series.explode"]], "extend() (polars.series method)": [[981, "polars.Series.extend"]], "extend_constant() (polars.series method)": [[982, "polars.Series.extend_constant"]], "fill_nan() (polars.series method)": [[983, "polars.Series.fill_nan"]], "fill_null() (polars.series method)": [[984, "polars.Series.fill_null"]], "filter() (polars.series method)": [[985, "polars.Series.filter"]], "flags (polars.series attribute)": [[986, "polars.Series.flags"]], "floor() (polars.series method)": [[987, "polars.Series.floor"]], "gather() (polars.series method)": [[988, "polars.Series.gather"]], "gather_every() (polars.series method)": [[989, "polars.Series.gather_every"]], "get_chunks() (polars.series method)": [[990, "polars.Series.get_chunks"]], "has_validity() (polars.series method)": [[991, "polars.Series.has_validity"]], "hash() (polars.series method)": [[992, "polars.Series.hash"]], "head() (polars.series method)": [[993, "polars.Series.head"]], "hist() (polars.series method)": [[994, "polars.Series.hist"]], "implode() (polars.series method)": [[995, "polars.Series.implode"]], "inner_dtype (polars.series attribute)": [[996, "polars.Series.inner_dtype"]], "interpolate() (polars.series method)": [[997, "polars.Series.interpolate"]], "is_between() (polars.series method)": [[998, "polars.Series.is_between"]], "is_boolean() (polars.series method)": [[999, "polars.Series.is_boolean"]], "is_duplicated() (polars.series method)": [[1000, "polars.Series.is_duplicated"]], "is_empty() (polars.series method)": [[1001, "polars.Series.is_empty"]], "is_finite() (polars.series method)": [[1002, "polars.Series.is_finite"]], "is_first() (polars.series method)": [[1003, "polars.Series.is_first"]], "is_first_distinct() (polars.series method)": [[1004, "polars.Series.is_first_distinct"]], "is_float() (polars.series method)": [[1005, "polars.Series.is_float"]], "is_in() (polars.series method)": [[1006, "polars.Series.is_in"]], "is_infinite() (polars.series method)": [[1007, "polars.Series.is_infinite"]], "is_integer() (polars.series method)": [[1008, "polars.Series.is_integer"]], "is_last() (polars.series method)": [[1009, "polars.Series.is_last"]], "is_last_distinct() (polars.series method)": [[1010, "polars.Series.is_last_distinct"]], "is_nan() (polars.series method)": [[1011, "polars.Series.is_nan"]], "is_not_nan() (polars.series method)": [[1012, "polars.Series.is_not_nan"]], "is_not_null() (polars.series method)": [[1013, "polars.Series.is_not_null"]], "is_null() (polars.series method)": [[1014, "polars.Series.is_null"]], "is_numeric() (polars.series method)": [[1015, "polars.Series.is_numeric"]], "is_sorted() (polars.series method)": [[1016, "polars.Series.is_sorted"]], "is_temporal() (polars.series method)": [[1017, "polars.Series.is_temporal"]], "is_unique() (polars.series method)": [[1018, "polars.Series.is_unique"]], "is_utf8() (polars.series method)": [[1019, "polars.Series.is_utf8"]], "item() (polars.series method)": [[1020, "polars.Series.item"]], "kurtosis() (polars.series method)": [[1021, "polars.Series.kurtosis"]], "len() (polars.series method)": [[1022, "polars.Series.len"]], "limit() (polars.series method)": [[1023, "polars.Series.limit"]], "list (polars.series attribute)": [[1024, "polars.Series.list"]], "all() (polars.series.list method)": [[1025, "polars.Series.list.all"]], "any() (polars.series.list method)": [[1026, "polars.Series.list.any"]], "arg_max() (polars.series.list method)": [[1027, "polars.Series.list.arg_max"]], "arg_min() (polars.series.list method)": [[1028, "polars.Series.list.arg_min"]], "concat() (polars.series.list method)": [[1029, "polars.Series.list.concat"]], "contains() (polars.series.list method)": [[1030, "polars.Series.list.contains"]], "count_match() (polars.series.list method)": [[1031, "polars.Series.list.count_match"]], "count_matches() (polars.series.list method)": [[1032, "polars.Series.list.count_matches"]], "diff() (polars.series.list method)": [[1033, "polars.Series.list.diff"]], "drop_nulls() (polars.series.list method)": [[1034, "polars.Series.list.drop_nulls"]], "eval() (polars.series.list method)": [[1035, "polars.Series.list.eval"]], "explode() (polars.series.list method)": [[1036, "polars.Series.list.explode"]], "first() (polars.series.list method)": [[1037, "polars.Series.list.first"]], "gather() (polars.series.list method)": [[1038, "polars.Series.list.gather"]], "get() (polars.series.list method)": [[1039, "polars.Series.list.get"]], "head() (polars.series.list method)": [[1040, "polars.Series.list.head"]], "join() (polars.series.list method)": [[1041, "polars.Series.list.join"]], "last() (polars.series.list method)": [[1042, "polars.Series.list.last"]], "len() (polars.series.list method)": [[1043, "polars.Series.list.len"]], "lengths() (polars.series.list method)": [[1044, "polars.Series.list.lengths"]], "max() (polars.series.list method)": [[1045, "polars.Series.list.max"]], "mean() (polars.series.list method)": [[1046, "polars.Series.list.mean"]], "min() (polars.series.list method)": [[1047, "polars.Series.list.min"]], "reverse() (polars.series.list method)": [[1048, "polars.Series.list.reverse"]], "sample() (polars.series.list method)": [[1049, "polars.Series.list.sample"]], "set_difference() (polars.series.list method)": [[1050, "polars.Series.list.set_difference"]], "set_intersection() (polars.series.list method)": [[1051, "polars.Series.list.set_intersection"]], "set_symmetric_difference() (polars.series.list method)": [[1052, "polars.Series.list.set_symmetric_difference"]], "set_union() (polars.series.list method)": [[1053, "polars.Series.list.set_union"]], "shift() (polars.series.list method)": [[1054, "polars.Series.list.shift"]], "slice() (polars.series.list method)": [[1055, "polars.Series.list.slice"]], "sort() (polars.series.list method)": [[1056, "polars.Series.list.sort"]], "sum() (polars.series.list method)": [[1057, "polars.Series.list.sum"]], "tail() (polars.series.list method)": [[1058, "polars.Series.list.tail"]], "take() (polars.series.list method)": [[1059, "polars.Series.list.take"]], "to_array() (polars.series.list method)": [[1060, "polars.Series.list.to_array"]], "to_struct() (polars.series.list method)": [[1061, "polars.Series.list.to_struct"]], "unique() (polars.series.list method)": [[1062, "polars.Series.list.unique"]], "log() (polars.series method)": [[1063, "polars.Series.log"]], "log10() (polars.series method)": [[1064, "polars.Series.log10"]], "log1p() (polars.series method)": [[1065, "polars.Series.log1p"]], "lower_bound() (polars.series method)": [[1066, "polars.Series.lower_bound"]], "map_dict() (polars.series method)": [[1067, "polars.Series.map_dict"]], "map_elements() (polars.series method)": [[1068, "polars.Series.map_elements"]], "max() (polars.series method)": [[1069, "polars.Series.max"]], "mean() (polars.series method)": [[1070, "polars.Series.mean"]], "median() (polars.series method)": [[1071, "polars.Series.median"]], "min() (polars.series method)": [[1072, "polars.Series.min"]], "mode() (polars.series method)": [[1073, "polars.Series.mode"]], "n_chunks() (polars.series method)": [[1074, "polars.Series.n_chunks"]], "n_unique() (polars.series method)": [[1075, "polars.Series.n_unique"]], "name (polars.series attribute)": [[1076, "polars.Series.name"]], "nan_max() (polars.series method)": [[1077, "polars.Series.nan_max"]], "nan_min() (polars.series method)": [[1078, "polars.Series.nan_min"]], "new_from_index() (polars.series method)": [[1079, "polars.Series.new_from_index"]], "not_() (polars.series method)": [[1080, "polars.Series.not_"]], "null_count() (polars.series method)": [[1081, "polars.Series.null_count"]], "pct_change() (polars.series method)": [[1082, "polars.Series.pct_change"]], "peak_max() (polars.series method)": [[1083, "polars.Series.peak_max"]], "peak_min() (polars.series method)": [[1084, "polars.Series.peak_min"]], "product() (polars.series method)": [[1085, "polars.Series.product"]], "qcut() (polars.series method)": [[1086, "polars.Series.qcut"]], "quantile() (polars.series method)": [[1087, "polars.Series.quantile"]], "rank() (polars.series method)": [[1088, "polars.Series.rank"]], "rechunk() (polars.series method)": [[1089, "polars.Series.rechunk"]], "reinterpret() (polars.series method)": [[1090, "polars.Series.reinterpret"]], "rename() (polars.series method)": [[1091, "polars.Series.rename"]], "replace() (polars.series method)": [[1092, "polars.Series.replace"]], "reshape() (polars.series method)": [[1093, "polars.Series.reshape"]], "reverse() (polars.series method)": [[1094, "polars.Series.reverse"]], "rle() (polars.series method)": [[1095, "polars.Series.rle"]], "rle_id() (polars.series method)": [[1096, "polars.Series.rle_id"]], "rolling_apply() (polars.series method)": [[1097, "polars.Series.rolling_apply"]], "rolling_map() (polars.series method)": [[1098, "polars.Series.rolling_map"]], "rolling_max() (polars.series method)": [[1099, "polars.Series.rolling_max"]], "rolling_mean() (polars.series method)": [[1100, "polars.Series.rolling_mean"]], "rolling_median() (polars.series method)": [[1101, "polars.Series.rolling_median"]], "rolling_min() (polars.series method)": [[1102, "polars.Series.rolling_min"]], "rolling_quantile() (polars.series method)": [[1103, "polars.Series.rolling_quantile"]], "rolling_skew() (polars.series method)": [[1104, "polars.Series.rolling_skew"]], "rolling_std() (polars.series method)": [[1105, "polars.Series.rolling_std"]], "rolling_sum() (polars.series method)": [[1106, "polars.Series.rolling_sum"]], "rolling_var() (polars.series method)": [[1107, "polars.Series.rolling_var"]], "round() (polars.series method)": [[1108, "polars.Series.round"]], "round_sig_figs() (polars.series method)": [[1109, "polars.Series.round_sig_figs"]], "sample() (polars.series method)": [[1110, "polars.Series.sample"]], "scatter() (polars.series method)": [[1111, "polars.Series.scatter"]], "search_sorted() (polars.series method)": [[1112, "polars.Series.search_sorted"]], "series_equal() (polars.series method)": [[1113, "polars.Series.series_equal"]], "set() (polars.series method)": [[1114, "polars.Series.set"]], "set_at_idx() (polars.series method)": [[1115, "polars.Series.set_at_idx"]], "set_sorted() (polars.series method)": [[1116, "polars.Series.set_sorted"]], "shape (polars.series attribute)": [[1117, "polars.Series.shape"]], "shift() (polars.series method)": [[1118, "polars.Series.shift"]], "shift_and_fill() (polars.series method)": [[1119, "polars.Series.shift_and_fill"]], "shrink_dtype() (polars.series method)": [[1120, "polars.Series.shrink_dtype"]], "shrink_to_fit() (polars.series method)": [[1121, "polars.Series.shrink_to_fit"]], "shuffle() (polars.series method)": [[1122, "polars.Series.shuffle"]], "sign() (polars.series method)": [[1123, "polars.Series.sign"]], "sin() (polars.series method)": [[1124, "polars.Series.sin"]], "sinh() (polars.series method)": [[1125, "polars.Series.sinh"]], "skew() (polars.series method)": [[1126, "polars.Series.skew"]], "slice() (polars.series method)": [[1127, "polars.Series.slice"]], "sort() (polars.series method)": [[1128, "polars.Series.sort"]], "sqrt() (polars.series method)": [[1129, "polars.Series.sqrt"]], "std() (polars.series method)": [[1130, "polars.Series.std"]], "str (polars.series attribute)": [[1131, "polars.Series.str"]], "concat() (polars.series.str method)": [[1132, "polars.Series.str.concat"]], "contains() (polars.series.str method)": [[1133, "polars.Series.str.contains"]], "contains_any() (polars.series.str method)": [[1134, "polars.Series.str.contains_any"]], "count_match() (polars.series.str method)": [[1135, "polars.Series.str.count_match"]], "count_matches() (polars.series.str method)": [[1136, "polars.Series.str.count_matches"]], "decode() (polars.series.str method)": [[1137, "polars.Series.str.decode"]], "encode() (polars.series.str method)": [[1138, "polars.Series.str.encode"]], "ends_with() (polars.series.str method)": [[1139, "polars.Series.str.ends_with"]], "explode() (polars.series.str method)": [[1140, "polars.Series.str.explode"]], "extract() (polars.series.str method)": [[1141, "polars.Series.str.extract"]], "extract_all() (polars.series.str method)": [[1142, "polars.Series.str.extract_all"]], "extract_groups() (polars.series.str method)": [[1143, "polars.Series.str.extract_groups"]], "json_decode() (polars.series.str method)": [[1144, "polars.Series.str.json_decode"]], "json_extract() (polars.series.str method)": [[1145, "polars.Series.str.json_extract"]], "json_path_match() (polars.series.str method)": [[1146, "polars.Series.str.json_path_match"]], "len_bytes() (polars.series.str method)": [[1147, "polars.Series.str.len_bytes"]], "len_chars() (polars.series.str method)": [[1148, "polars.Series.str.len_chars"]], "lengths() (polars.series.str method)": [[1149, "polars.Series.str.lengths"]], "ljust() (polars.series.str method)": [[1150, "polars.Series.str.ljust"]], "lstrip() (polars.series.str method)": [[1151, "polars.Series.str.lstrip"]], "n_chars() (polars.series.str method)": [[1152, "polars.Series.str.n_chars"]], "pad_end() (polars.series.str method)": [[1153, "polars.Series.str.pad_end"]], "pad_start() (polars.series.str method)": [[1154, "polars.Series.str.pad_start"]], "parse_int() (polars.series.str method)": [[1155, "polars.Series.str.parse_int"]], "replace() (polars.series.str method)": [[1156, "polars.Series.str.replace"]], "replace_all() (polars.series.str method)": [[1157, "polars.Series.str.replace_all"]], "replace_many() (polars.series.str method)": [[1158, "polars.Series.str.replace_many"]], "reverse() (polars.series.str method)": [[1159, "polars.Series.str.reverse"]], "rjust() (polars.series.str method)": [[1160, "polars.Series.str.rjust"]], "rstrip() (polars.series.str method)": [[1161, "polars.Series.str.rstrip"]], "slice() (polars.series.str method)": [[1162, "polars.Series.str.slice"]], "split() (polars.series.str method)": [[1163, "polars.Series.str.split"]], "split_exact() (polars.series.str method)": [[1164, "polars.Series.str.split_exact"]], "splitn() (polars.series.str method)": [[1165, "polars.Series.str.splitn"]], "starts_with() (polars.series.str method)": [[1166, "polars.Series.str.starts_with"]], "strip() (polars.series.str method)": [[1167, "polars.Series.str.strip"]], "strip_chars() (polars.series.str method)": [[1168, "polars.Series.str.strip_chars"]], "strip_chars_end() (polars.series.str method)": [[1169, "polars.Series.str.strip_chars_end"]], "strip_chars_start() (polars.series.str method)": [[1170, "polars.Series.str.strip_chars_start"]], "strip_prefix() (polars.series.str method)": [[1171, "polars.Series.str.strip_prefix"]], "strip_suffix() (polars.series.str method)": [[1172, "polars.Series.str.strip_suffix"]], "strptime() (polars.series.str method)": [[1173, "polars.Series.str.strptime"]], "to_date() (polars.series.str method)": [[1174, "polars.Series.str.to_date"]], "to_datetime() (polars.series.str method)": [[1175, "polars.Series.str.to_datetime"]], "to_decimal() (polars.series.str method)": [[1176, "polars.Series.str.to_decimal"]], "to_integer() (polars.series.str method)": [[1177, "polars.Series.str.to_integer"]], "to_lowercase() (polars.series.str method)": [[1178, "polars.Series.str.to_lowercase"]], "to_time() (polars.series.str method)": [[1179, "polars.Series.str.to_time"]], "to_titlecase() (polars.series.str method)": [[1180, "polars.Series.str.to_titlecase"]], "to_uppercase() (polars.series.str method)": [[1181, "polars.Series.str.to_uppercase"]], "zfill() (polars.series.str method)": [[1182, "polars.Series.str.zfill"]], "field() (polars.series.struct method)": [[1183, "polars.Series.struct.field"]], "fields (polars.series.struct attribute)": [[1184, "polars.Series.struct.fields"]], "json_encode (polars.series.struct attribute)": [[1185, "polars.Series.struct.json_encode"]], "rename_fields() (polars.series.struct method)": [[1186, "polars.Series.struct.rename_fields"]], "schema (polars.series.struct attribute)": [[1187, "polars.Series.struct.schema"]], "unnest() (polars.series.struct method)": [[1188, "polars.Series.struct.unnest"]], "sum() (polars.series method)": [[1189, "polars.Series.sum"]], "tail() (polars.series method)": [[1190, "polars.Series.tail"]], "take() (polars.series method)": [[1191, "polars.Series.take"]], "take_every() (polars.series method)": [[1192, "polars.Series.take_every"]], "tan() (polars.series method)": [[1193, "polars.Series.tan"]], "tanh() (polars.series method)": [[1194, "polars.Series.tanh"]], "to_arrow() (polars.series method)": [[1195, "polars.Series.to_arrow"]], "to_dummies() (polars.series method)": [[1196, "polars.Series.to_dummies"]], "to_frame() (polars.series method)": [[1197, "polars.Series.to_frame"]], "to_init_repr() (polars.series method)": [[1198, "polars.Series.to_init_repr"]], "to_list() (polars.series method)": [[1199, "polars.Series.to_list"]], "to_numpy() (polars.series method)": [[1200, "polars.Series.to_numpy"]], "to_pandas() (polars.series method)": [[1201, "polars.Series.to_pandas"]], "to_physical() (polars.series method)": [[1202, "polars.Series.to_physical"]], "top_k() (polars.series method)": [[1203, "polars.Series.top_k"]], "unique() (polars.series method)": [[1204, "polars.Series.unique"]], "unique_counts() (polars.series method)": [[1205, "polars.Series.unique_counts"]], "upper_bound() (polars.series method)": [[1206, "polars.Series.upper_bound"]], "value_counts() (polars.series method)": [[1207, "polars.Series.value_counts"]], "var() (polars.series method)": [[1208, "polars.Series.var"]], "view() (polars.series method)": [[1209, "polars.Series.view"]], "zip_with() (polars.series method)": [[1210, "polars.Series.zip_with"]], "sqlcontext (class in polars)": [[1226, "polars.SQLContext"]], "__enter__() (polars.sqlcontext method)": [[1226, "polars.SQLContext.__enter__"]], "__exit__() (polars.sqlcontext method)": [[1226, "polars.SQLContext.__exit__"]], "__init__() (polars.sqlcontext method)": [[1226, "polars.SQLContext.__init__"]]}})